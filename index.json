[{"categories":null,"content":"TypeScript notes","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":" Basics ES6 OOP Debugging ","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/:0:0","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":"Basics tsc -init generates tsconfig.json and now tsc will compile all the files in the directory and subdirectories. Arrays. const pets: string[] = ['cats', 'dogs'] // can only hold strings now. const weirdArray: any[] = ['cats', 42] // can hold any type. Tuples are just arrays with a specific number of elements of specific types. There are no enforcements in JS, but it’s all enforced in TS. const author: [string, number] = ['Bob', 42]; Enums are TS only. enum Food { Pizza, // 0 Burger = 500, Rice // 501 } const myFavorite = Food.Burger console.log(myFavorite) // 500 Functions. function add(x: number, y: number): string { return '' + x + y } let f: (x: number, y: number) =\u003e string = add Objects. const car: {type: string, model: string, year: number} = { type: 'Toyota', model: 'Corolla', year: 2009 } null and undefined are subtypes of all other types. So we can do let foo: number = null. We can turn on strictNullChecks in tsconfig.json,and then the compiler will complain if we assign null or undefined to any variable except if it is declared as type any. If we do let foo = null, we can only assign null to it due to the inferred null type. void is typically used only when the function returns no value. Type alias. type Person = { firstName: string, lastName: string, age: number } const person1: Person = { firstName: 'Mike', lastName: 'White', age: 42 } Union types. let foo: number | string; foo = 42 foo = '42' Use third-party libraries with the @types type declaration file. npm install foo npm install --save-dev @types/foo ","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/:1:0","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":"ES6 We get ES6 features out-of-the-box when using TypeScript. Arrow functions and default parameters. const addNums = (a: number, b: number = 10): number =\u003e a + b Spread, rest, and optional arguments. const addNums = (a?: number, b?: number): number =\u003e a + b // optional arguments const nums: number[] = [5, 6] addNums(...nums) // spread const addNums = (...a: number[]) : number =\u003e a.reduce((acc, val) =\u003e acc + val) // rest const nums: number[] = [5, 6] addNums(...nums) Destructuring (objects and arrays). const person = { firstName: 'Mike', lastName: 'White', age: 42 } const {firstName, lastName, age} = person const a = ['abc', 11, 'wow'] const [x, y, z] = a [foo, bar] = [bar, foo] // swaps the values ","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/:2:0","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":"OOP We can declare properties outside of constructors. And TS adds visibilities (private, protected). class Planet { private name: string = 'none' mass: number; static meStatic: boolean = true constructor(inName: string, inMass: number) { // We can still set the properties in constructors this.name = inName this.mass = inMass } } Getters and setters. class Planet { private _name: string = 'no name set' get name() { return `Name is ${self._name}` } set name(inName: string) { this._name = inName } readonly foo: string = 'read only' // or provide a getter only to make it read-only } Generics. function echoMe\u003cT\u003e(inArg: T): T { return inArg; } ","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/:3:0","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":"Debugging tsc --sourceMap foo.ts generates a foot.js.map file, which allows us to debug the TS code in the browser by appending //# sourceMappingURL=foo.js.map to the TS file. ","date":"October 31, 2022","objectID":"/posts/2022-10-31-TypeScript-Notes/:4:0","tags":["Programming Languages","TypeScript","Web Development"],"title":"TypeScript Notes","uri":"/posts/2022-10-31-TypeScript-Notes/"},{"categories":null,"content":"Modern Java notes for Java 8+.","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":" Method reference and lambdas Streams Default methods Optional Miscellaneous References Notes for the modern Java (Java 8+.) ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:0:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Method reference and lambdas Java 8+ treats functions and lambdas as first-class citizens, which means we can pass functions around using method reference. Note that lambdas can only capture final variables in the same scope. inventory.sort(comparing(Apple::getWeight)); // Or inventory.sort((Apple a1, Apple a2) -\u003e a1.getWeight().compareTo(a2.getWeight())); // And the types can be inferred inventory.sort((a1, a2) -\u003e a1.getWeight().compareTo(a2.getWeight())); // Instead of Collections.sort(inventory, new Comparator\u003cApple\u003e() { public int compare(Apple a1, Apple a2) { return a1.getWeight().compareTo(a2.getWeight()); } }); File[] hiddenFiles = new File(\".\").listFiles(File::isHidden); // Instead of File[] hiddenFiles = new File(\".\").listFiles(new FileFilter() { public boolean accept(File file) { return file.isHidden(); } }); filterApples(inventory, (Apple a) -\u003e a.getWeight() \u003e 150 ); // We can also use a Predicate to achieve behavior parameterization. public interface Predicate\u003cT\u003e { boolean test(T t); } public static \u003cT\u003e List\u003cT\u003e filter(List\u003cT\u003e list, Predicate\u003cT\u003e p) { List\u003cT\u003e result = new ArrayList\u003c\u003e(); for(T e: list) { if(p.test(e)) { parameter T result.add(e); } } return result; } filter(numbers, (Integer i) -\u003e i % 2 == 0); Thread t = new Thread(() -\u003e System.out.println(\"Hello world\")); // Instead of Thread t = new Thread(new Runnable() { public void run() { System.out.println(\"Hello world\"); } }); // Callable is like the upgraded Runnable. It sends the task to a tread pool and the result // is stored in a Future. ExecutorService executorService = Executors.newCachedThreadPool(); Future\u003cString\u003e threadName = executorService.submit( () -\u003e Thread.currentThread().getName()); // Instead of Future\u003cString\u003e threadName = executorService.submit(new Callable\u003cString\u003e() { @Override public String call() throws Exception { return Thread.currentThread().getName(); } }); // We can also use .and() .or() to create more complicated lambdas. Predicate\u003cApple\u003e redAndHeavyAppleOrGreen = redApple.and(apple -\u003e apple.getWeight() \u003e 150).or(apple -\u003e GREEN.equals(apple.getColor())); // Composing functions. f.andThen(g) // g(f(x)) f.compose(g) // f(g(x)) ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:1:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Streams Streams let us manipulate collections in a declarative way. By using streams, we get parallel processing for free. import static java.util.stream.Collectors.toList; // Sequential. List\u003cApple\u003e heavyApples = inventory.stream() .filter((Apple a) -\u003e a.getWeight() \u003e 150).collect(toList()); // Parallel. Or we can also use .parallel(). List\u003cApple\u003e heavyApples = inventory.parallelStream() .filter((Apple a) -\u003e a.getWeight() \u003e 150).collect(toList()); Streams are like generators in Python. They are processed in-demand. Some stream functions: List\u003cString\u003e lowCaloricDishesName = menu.parallelStream() .filter(d -\u003e d.getCalories() \u003c 400) .sorted(comparing(Dishes::getCalories)) .map(Dish::getName) .distinct() .limit(3) .collect(toList()); // or .count() or .forEach() Use .flatMap() to flatten each stream into a single stream. List\u003cString\u003e uniqueCharacters = words.stream() .map(word -\u003e word.split(\"\")) .flatMap(Arrays::stream) .distinct() .collect(toList()); .anyMatch(), .allMatch(), and .nonMatch() return a bool. Some other functions: int sum = number.stream().reduce(0, (a, b) -\u003e a + b); sum = numbers.stream().reduce(0, Integer::sum); Optional\u003cInteger\u003e sum = numbers.stream().reduce(Integer::sum); Optional\u003cInteger\u003e max = numbers.stream().reduce(Integer::max); Numeric streams. Summing a stream is expensive due to boxing. We can use IntStream instead. int calories = menu.stream() .mapToInt(Dish::getCalories) .sum(); // We can convert IntStream back using .boxed(). // For max and min, IntStream returns OptionalInt. // range() is end exclusive. IntStream evenNumbers = IntStream.rangeClosed(1, 100) .filter(x -\u003e x % 2 == 0); int fifty = evenNumbers.count() Create streams: Stream\u003cString\u003e stream = Stream.of(\"Modern\", \"Java\", \"In\", \"Action\"); stream.map(String::toUpperCase).forEach(System.out::println) int[] nums = [1, 2, 3, 4] int ten = Arrays.stream(nums).sum(); // For unbounded infinite streams: IntStream.iterate(0, n -\u003e n + 4) .takeWhile(n -\u003e n \u003c 100) .forEach(System.out::println); Stream.generate(Math::random) .limit(5) .forEach(System.out::println); IntStream ones = IntStream.generate(() -\u003e 1); Collectors: .toList(), .counting(), .maxBy(), .groupingBy() for .collect(). Summarization: int totalCalories = menu.stream().collect(summingInt(Dish::getCalories); // or averagingInt(), summarizingInt(). // is the same as: int totalCalories = menu.stream().collect(reducing( 0, Dish::getCalories, (i, j) -\u003e i + j)); // and: int totalCalories = menu.stream().collect(reducing( 0, Dish::getCalories, Integer::sum)); String shortMenu = menu.stream().map(Dish::getName).collect(joining(\", \")); // .map() can be omitted if there's a toString() implemented. // .groupingBy() and .partitioningBy() public boolean isPrime(int candidate) { int candidateRoot = (int) Math.sqrt((double) candidate); return IntStream.rangeClosed(2, candidateRoot).nonMatch(i -\u003e candidate % i == 0); } public Map\u003cBoolean, List\u003cInteger\u003e\u003e partitionPrimes(int n) { return IntStream.rangeClosed(2, n).boxed() .collect(partitioningBy(candidate -\u003e isPrime(candidate))); } ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:2:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Default methods Default methods for an interface allow concrete implementations not have to change. // In List default void sort(Comparator\u003c? super E\u003e c) { Collections.sort(this, c); } // This made it possible to call apples.sort(). ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:3:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Optional Optional\u003cT\u003e is a better null type: menu.stream() .filter(Dish::isVegetarian) .findAny() // or findFirst() .ifPresent(dish -\u003e System.out.println(dish.getName())); isPresent() // returns a bool isPresent(Consumer\u003cT\u003e block) // executed only when the optional is not null get() // returns the value if present; otherwise it throws NoSuchElementException orElse(T other) // other is the default value if it's not present. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:4:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Miscellaneous Diamond operator \u003c\u003e: List\u003cString\u003e listOfStrings = new ArrayList\u003c\u003e(); // The type here will be inferred. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:5:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"References Modern Java in Action ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Modern-Java-Notes/:6:0","tags":["Programming Languages","Java"],"title":"Modern Java Notes","uri":"/posts/2020-11-02-Modern-Java-Notes/"},{"categories":null,"content":"Advanced tricks in Python that could be useful for tech interviews.","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":" Decorators functools cached_property lru_cache reduce dataclasses dataclass Data Structures Dictioaries OrderedDict defaultdict ChainMap MappingProxyType Arrays array.array bytes bytearray Records, Structs, and Data Transfer Objects namedtuple SimpleNamespace Sets and Multisets frozenset Counter Stacks list deque LifoQueue Queues list deque queue.Queue multiprocessing.Queue Priority Queues list heapq queue.PriorityQueue Enums Enum IntEnum Functions Lambdas Classes and OOP Own Exceptions Shallow and Deep Copy Abstract Base Class Looping and Iteration Enumerate Iterators Generators Equality Itertools islice groupby permutations and combinations Miscellaneous stdin Binary conversion String Walrus operator Compare with zip Python advanced tricks. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:0:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Decorators ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:1:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"functools cached_property Just like @property, with extra caching for expensive properties from functools import cached_property class DataSet: def __init__(self, sequence_of_numbers): self._data = sequence_of_numbers @cached_property def stdev(self): return statistics.stdev(self._data) @cached_property def variance(self): return statistics.variance(self._data) lru_cache It can be used for automatic memoization. If maxsize=None, lru feature is turned off and the limit is without bound. from functools import lru_cache @lru_cache(maxsize=None) def fib(n: int) -\u003e int: if n \u003c 2: return n return fib(n-1) + fib(n-2) print([fib(n) for n in range(16)]) fib.cache_info() [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] CacheInfo(hits=28, misses=16, maxsize=None, currsize=16) reduce It applies the function cumulatively to the iterable. from functools import reduce from math import gcd from typing import List def gcd_for_list(items: List[int]) -\u003e int: return reduce(gcd, items) print(gcd_for_list([2, 4, 6, 8, 10])) print(reduce(lambda x, y: x + y, [1, 2, 3])) 2 6 ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:1:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"dataclasses dataclass This decorator adds __init__(), __repr__(), and other special methods automatically. from dataclasses import dataclass @dataclass class InventoryItem: \"\"\"Class for keeping track of an item in inventory.\"\"\" name: str unit_price: float quantity_on_hand: int = 0 ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:1:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Data Structures Reference: https://realpython.com/python-data-structures/ ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Dictioaries OrderedDict It is a specialized dict subclass that remembers the insertion order. from collections import OrderedDict popitem(last=True) move_to_end(key, last=True) defaultdict It provides an easier way to convert tuples into a dictionary. Or it can be used to implement a counter. from collections import defaultdict s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] # list is the default factory function that creates an empty list # if the key is encourntered for the first time. d = defaultdict(list) for k, v in s: d[k].append(v) print(d) nums = [3, 5, 4, 6, 6, 1] d = defaultdict(int) for num in nums: d[num] += 1 print(d) defaultdict(\u003cclass 'list'\u003e, {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}) defaultdict(\u003cclass 'int'\u003e, {3: 1, 5: 1, 4: 1, 6: 2, 1: 1}) ChainMap It groups multiple dictionaries into one single mapping. from collections import ChainMap dict1 = { 'one': 1, 'two': 2 } dict2 = { 'three': 3, 'four': 4 } # First, we can use unpacking to merge them into one. print({**dict1, **dict2}) # Or we can use ChainMap. chained_map = ChainMap(dict1, dict2) print(chained_map) # Which can be converted to a normal dict very easily. print(dict(chained_map)) {'one': 1, 'two': 2, 'three': 3, 'four': 4} ChainMap({'one': 1, 'two': 2}, {'three': 3, 'four': 4}) {'two': 2, 'three': 3, 'four': 4, 'one': 1} MappingProxyType It is a read-only dictionary. from types import MappingProxyType writable = { 'one': 1, 'two': 2 } read_only = MappingProxyType(writable) print(read_only) {'one': 1, 'two': 2} ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Arrays array.array It is a basic C-style typed array that’s more space-efficient. Unlike list, it can only have one type. import array arr = array.array('f', (1.0, 1.5, 2.0, 2.5)) print(arr) array('f', [1.0, 1.5, 2.0, 2.5]) bytes It is an immutable array of single bytes ( 0\u003c= int \u003c= 255). Like array, it’s also space-efficient. arr = bytes((0, 1, 2, 255)) print(arr) b'\\x00\\x01\\x02\\xff' bytearray It is a mutable verson of bytes. arr = bytearray((0, 1, 2, 255)) arr.append(42) del arr[0] print(arr) bytearray(b'\\x01\\x02\\xff*') ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Records, Structs, and Data Transfer Objects namedtuple from collections import namedtuple Car = namedtuple('Car', 'color mileage automatic') car1 = Car('red', 3812.4, True) print(car1.mileage) # typing.NamedTuple provides type hints from typing import NamedTuple class CarCar(NamedTuple): color: str mileage: float automatic: bool car2 = CarCar('red', 3812.4, True) print(car2.mileage) 3812.4 3812.4 SimpleNamespace It’s a dictionary with attribute access. from types import SimpleNamespace car1 = SimpleNamespace(color='red', mileage=3812.4, automatic=True) print(car1.color) red ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:3","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Sets and Multisets frozenset It is an immutable, hashable set that can be used as dictionary keys or elements of another set. d = {frozenset({1, 2, 3}): 'hi'} print(d[frozenset({1, 2, 3})]) hi Counter It is a multiset or bag. from collections import Counter counter = Counter(['a', 'b', 'a']) print(counter) print(len(counter)) # Unique elements. print(sorted(counter.elements())) print(sum(counter.values())) # Total counts. print(counter.most_common(n=1)) print(Counter('aaba')) counter.update(['a']) print(counter) n = 1 print(counter.most_common()[:-n-1:-1]) # n lest common elements. for k, v in counter.items(): print(f'{k}: {v}') Counter({'a': 2, 'b': 1}) 2 ['a', 'a', 'b'] 3 [('a', 2)] Counter({'a': 3, 'b': 1}) Counter({'a': 3, 'b': 1}) [('b', 1)] a: 3 b: 1 ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:4","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Stacks list The built-in list can be used as a stack with push and pop in amortized O(1). However, list needs to be resized occasionally. s = [] s.append('eat') print(s.pop()) eat deque It is a robust stack that can be also used as a queue. It’s implemented as a doubly-linked list, which means O(1) insertion and deletion but O(n) random access. from collections import deque s = deque() s.append('eat') print(s[-1]) # Top of the stack. print(s.pop()) eat eat LifoQueue It is a synchronized stack that provides locking semantics. from queue import LifoQueue s = LifoQueue() s.put('eat') s.put('sleep') print(s.get()) print(s.get()) sleep eat ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:5","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Queues list It is a terrible choice for a queue since it’s super slow for dequeing - O(n). q = [] q.append('eat') print(q.pop(0)) eat deque it is a robust queue that also be used as a stack. from collections import deque q = deque() q.append('eat') print(q.popleft()) eat queue.Queue It is a synchronized queue that provides locking semantics. It should be used for multi-threads in a single process. from queue import Queue q = Queue() q.put('eat') q.put('sleep') print(q.get()) print(q.get()) eat sleep multiprocessing.Queue It is a synchronized queue that provides locking semantics. It should be used for multi-processes. from multiprocessing import Queue q = Queue() q.put('eat') q.put('sleep') print(q.get()) print(q.get()) eat sleep ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:6","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Priority Queues list list can be used to implement a prioity queue. But insertion is a slow O(n) q = [] q.append((2, 'code')) q.append((1, 'eat')) q.append((3, 'sleep')) q.sort(reverse=True) while q: print(q.pop()) (1, 'eat') (2, 'code') (3, 'sleep') heapq It is a list-based binary min-heap. Insertion and extraction take O(log n). import heapq q = [] heapq.heappush(q, (2, 'code')) heapq.heappush(q, (1, 'eat')) heapq.heappush(q, (3, 'sleep')) heapq.heappushpop(q, (4, 'repeat')) while q: print(heapq.heappop(q)) x = [3, 2, 6] heapq.heapify(x) print(x) (2, 'code') (3, 'sleep') (4, 'repeat') [2, 3, 6] queue.PriorityQueue It uses heapq internally and is synchronized. from queue import PriorityQueue q = PriorityQueue() q.put((2, 'code')) q.put((1, 'eat')) q.put((3, 'sleep')) while not q.empty(): print(q.get()) (1, 'eat') (2, 'code') (3, 'sleep') ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:7","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Enums Enum from enum import Enum, unique, auto @unique # By default, the values are not unique. class Color(Enum): RED = 1 GREEN = 2 BLUE = 3 print(repr(Color.RED)) print(Color.RED.name) print(Color.RED.value) print(Color(1)) print(Color['RED']) class ColorAuto(Enum): RED = auto() BLUE = auto() GREEN = auto() print(list(ColorAuto)) for name, member in ColorAuto.__members__.items(): print(f'{name}: {member}') # Functional API. Animal = Enum('Animal', 'ANT BEE CAT DOG') print(Animal.ANT.value) \u003cColor.RED: 1\u003e RED 1 Color.RED Color.RED [\u003cColorAuto.RED: 1\u003e, \u003cColorAuto.BLUE: 2\u003e, \u003cColorAuto.GREEN: 3\u003e] RED: ColorAuto.RED BLUE: ColorAuto.BLUE GREEN: ColorAuto.GREEN 1 IntEnum It is a subclass of int. This means that IntEnum can be compared to integers. However, Enum is favored over IntEnum. from enum import IntEnum class Shape(IntEnum): CIRCLE = 1 SQUARE = 2 class Request(IntEnum): POST = 1 GET = 2 print(Shape.CIRCLE) print(Shape.CIRCLE == 1) print(Shape.CIRCLE == Request.POST) Shape.CIRCLE True True ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:2:8","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Functions ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:3:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Lambdas tuples = [(1, 'd'), (2, 'b'), (3, 'a')] tuples.sort(key=lambda x: x[1]) print(tuples) print(sorted(range(-5, 6), key=lambda x: x * x)) # But usually this print([x for x in range(16) if x % 2 == 0]) # is better than print(list(filter(lambda x: x % 2 == 0, range(16)))) xs = { 'a': 4, 'c': 2, 'b': 3, } print(sorted(xs.items(), key=lambda x: x[1], reverse=True)) # Use a tuple as the key to sort by multiple keys. tuples = [(1, 'd'), (3, 'a'), (2, 'b'), (2, 'a')] print(sorted(tuples, key=lambda x: (x[0], x[1]))) [(3, 'a'), (2, 'b'), (1, 'd')] [0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5] [0, 2, 4, 6, 8, 10, 12, 14] [0, 2, 4, 6, 8, 10, 12, 14] [('a', 4), ('b', 3), ('c', 2)] [(1, 'd'), (2, 'a'), (2, 'b'), (3, 'a')] ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:3:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Classes and OOP ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:4:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Own Exceptions Defining our own exceptions can be helpful. class NameTooShortError(ValueError): pass def validate(name): if len(name) \u003c 10: raise NameTooShortError ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:4:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Shallow and Deep Copy xs = [[1, 2, 3], [4, 5, 6]] yx = list(xs) # Shallow copy. ys = xs[:] # Shallow copy again. import copy yx = copy.deepcopy(yx) yx = copy.copy(yx) # Shallow copy again. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:4:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Abstract Base Class from abc import ABCMeta, abstractmethod class Base(metaclass=ABCMeta): @abstractmethod def foo(self): pass # Better than raise NotImplementedError. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:4:3","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Looping and Iteration ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:5:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Enumerate for i, item in enumerate(['a', 'b', 'c']): print(f'{i}: {item}') 0: a 1: b 2: c ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:5:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Iterators A for in loop is a syntactic sugar for calling __iter__ and __next__. And we can also use iter() and next() to invoke these dunders, just like len() for __len__. And since generators are just simplified iterators, we can also use next(). ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:5:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Generators print(sum(x * 2 for x in range(10))) # is more performant than print(sum((x * 2 for x in range(10)))) 90 90 ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:5:3","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Equality A dictionary key is equal when they have the same __hash__ and __eq__. ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:5:4","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Itertools ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:6:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"islice The Iterator’s equivalence of slice() is islice(). from itertools import islice stream = iter(range(10)) for x in islice(stream, 5): print(x) ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:6:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"groupby It can be used for string compression. from itertools import groupby s = [(k, len(list(v))) for k, v in groupby('aaabbccda')] print(s) s = [list(v) for _, v in groupby('aaabbccda')] print(s) [('a', 3), ('b', 2), ('c', 2), ('d', 1), ('a', 1)] [['a', 'a', 'a'], ['b', 'b'], ['c', 'c'], ['d'], ['a']] ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:6:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"permutations and combinations import itertools friends = ['Monique', 'Ashish', 'Devon', 'Bernie'] print(list(itertools.permutations(friends, r=2))) print(list(itertools.combinations(friends, r=2))) [('Monique', 'Ashish'), ('Monique', 'Devon'), ('Monique', 'Bernie'), ('Ashish', 'Monique'), ('Ashish', 'Devon'), ('Ashish', 'Bernie'), ('Devon', 'Monique'), ('Devon', 'Ashish'), ('Devon', 'Bernie'), ('Bernie', 'Monique'), ('Bernie', 'Ashish'), ('Bernie', 'Devon')] [('Monique', 'Ashish'), ('Monique', 'Devon'), ('Monique', 'Bernie'), ('Ashish', 'Devon'), ('Ashish', 'Bernie'), ('Devon', 'Bernie')] ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:6:3","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Miscellaneous ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:0","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"stdin import sys lines = [line.rstrip('\\n') for line in sys.stdin.readlines()] print(lines) # Or for line in sys.stdin: print(line.rstrip('\\n')) ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:1","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Binary conversion print(f'{42:b}') M = 10 format(42, f'0{M}b') a = f'{42:08b}' print(a) # With leading zeros print(int(a, 2)) 101010 00101010 42 ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:2","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"String import string s = 'foobar' print(s.startswith('foo')) print(s.startswith('fooo')) print(s[::-1]) # Reverse the string. s = 'f.s,h;q' s_no_punctuation = s.translate(str.maketrans('', '', string.punctuation)) print(s_no_punctuation) # And some other handy constants: print( string.ascii_letters, string.ascii_uppercase, string.ascii_lowercase, string.digits, string.hexdigits, string.octdigits, string.punctuation, string.printable, string.whitespace ) s = '121211' print(s.count('1')) print('1'.isnumeric()) True False raboof fshq abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 0123456789abcdefABCDEF 01234567 !\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\]^_`{|}~ 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\]^_`{|}~ 4 True ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:3","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Walrus operator Use the walrus operator := to reduce unnecessary assignment. s = 'hello' if (s_len := len(s)) == 5: print(s_len) File \"\u003cipython-input-1-00b419d10e06\u003e\", line 2 if (s_len := len(s)) == 5: ^ SyntaxError: invalid syntax ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:4","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Compare with zip from itertools import zip_longest s1 = 'abcde' s2 = 'abbde' for c1, c2 in zip(s1, s2): print(c1==c2) s1 = 'abcde' s2 = 'abbd' print(list(zip(s1, s2))) print(list(zip_longest(s1, s2))) for c1, c2 in zip_longest(s1, s2): print(c1 == c2) True True False True True [('a', 'a'), ('b', 'b'), ('c', 'b'), ('d', 'd')] [('a', 'a'), ('b', 'b'), ('c', 'b'), ('d', 'd'), ('e', None)] True True False True False ","date":"November 2, 2020","objectID":"/posts/2020-11-02-Python-Advanced-Tricks/:7:5","tags":["Programming Languages","Python"],"title":"Python Advanced Tricks","uri":"/posts/2020-11-02-Python-Advanced-Tricks/"},{"categories":null,"content":"Some notes for the Flutter framework.","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":" Introduction Declarative UI Why How Views The equivalent of a view in Flutter How to update widgets Intents The equivalent of an Intent in Flutter How to handle incoming intents from external apps The equivalent of startActivityForResult() Project structure and resources Image files Strings Layouts Equivalent of a LinearLayout Flexible widget Expanded widget SizedBox widget Spacer widget Equivalent of a RelativeLayout Equivalent of a ScrollView Gesture detection and touch event handling Equivalent of onClick Other gestures ListView and adapters Equivalent of ListView Which item is clicked Update ListView dynamically Text Form input Equivalent of a hint Show validation errors Databases and local storage Shared Preferences SQLite Notifications Widget Lifecycles References ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:0:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Introduction This post is assuming that the reader has Android development background. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:1:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Declarative UI ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:2:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Why Flutter lets the developer describe the current UI state and leaves the transitioning to the framework. This lightens the burden on developers from having to program how to transition between various UI states. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:2:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"How Example: // Imperative style b.setColor(red) b.clearChildren() ViewC c3 = new ViewC(...) b.add(c3) // Declarative style return ViewB( color: red, child: ViewC(...) ) In the declarative style, view configurations (such as Flutter’s Widgets) are immutable and only lightweight blueprints. To change the UI, a widget triggers a rebuild on itself and constructs a new Widget subtree. The framework manages many of the responsibilities behind the scenes. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:2:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Views ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:3:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"The equivalent of a view in Flutter In Flutter, the rough equivalent to a View is a Widget. The difference is that widgets are immutable and lightweight. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:3:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"How to update widgets Since widgets are immutable, we have to work with the state. A StatelessWidget is a widget with no state info, similar to a ImageView with a logo, which doesn’t change during runtime. An example is the Text widget, which is a subclass of StatelessWidget: Text( 'I like Flutter!', style: TextStyle(fontWeight: FontWeight.bold), ); If we want the text to change dynamically, we wrap the Text widget in a StatefulWidget: import 'package:flutter/material.dart'; void main() { runApp(SampleApp()); } class SampleApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Sample App', theme: ThemeData( primarySwatch: Colors.blue, ), home: SampleAppPage(), ); } } class SampleAppPage extends StatefulWidget { SampleAppPage({Key key}) : super(key: key); @override _SampleAppPageState createState() =\u003e _SampleAppPageState(); } class _SampleAppPageState extends State\u003cSampleAppPage\u003e { // Default placeholder text String textToShow = \"I Like Flutter\"; void _updateText() { setState(() { // update the text textToShow = \"Flutter is Awesome!\"; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Sample App\"), ), body: Center(child: Text(textToShow)), floatingActionButton: FloatingActionButton( onPressed: _updateText, tooltip: 'Update Text', child: Icon(Icons.update), ), ); } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:3:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Intents ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:4:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"The equivalent of an Intent in Flutter Flutter doesn’t have intents. And Flutter doesn’t have a direct equivalent to activities and fragments; rather, we navigate between screens using a Navigator and Routes, all within the same Activity. A Routeis an abstraction for a screen or page. And a Navigator is a widget that manages routes. A Route roughly maps to an Activity. A navigator can push and pop routes to move from screen to screen. It works like a stack on which you can push() new routes we want to navigate to and pop() routes that we want to go back. We specify a Map of route names: void main() { runApp(MaterialApp( home: MyAppHome(), // becomes the route named '/' routes: \u003cString, WidgetBuilder\u003e { '/a': (BuildContext context) =\u003e MyPage(title: 'page A'), '/b': (BuildContext context) =\u003e MyPage(title: 'page B'), '/c': (BuildContext context) =\u003e MyPage(title: 'page C'), }, )); } Navigator.of(context).pushNamed('/b'); For calling a Camera or File picker, we need a native platform integration or use plugins. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:4:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"How to handle incoming intents from external apps Flutter handles incoming intents from Android by directly talking to the Android layer and requesting the data shared. The basic flow is that we first handle the shared data in Activity and wait until Flutter requests with a MethodChannel. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:4:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"The equivalent of startActivityForResult() It’s done by awaiting on the Future returned by push(): Map coordinates = await Navigator.of(context).pushNamed('/location'); // Then in the location route Navigator.of(context).pop({\"lat\":43.821757,\"long\":-79.226392}); ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:4:3","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Project structure and resources ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:5:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Image files No predefined folder structure. We declare the assets (with location) in the pubspec.yaml file. For example: images/my_icon.png // Base: 1.0x image images/2.0x/my_icon.png // 2.0x image images/3.0x/my_icon.png // 3.0x image // declare these in pubspec.yaml assets: - images/my_icon.jpeg // Then access using AssetImage return AssetImage(\"images/my_icon.jpeg\"); // Or in an Image widget @override Widget build(BuildContext context) { return Image.asset(\"images/my_image.png\") } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:5:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Strings No dedicated resources-like system. The best practice is: class Strings { static String welcomeMessage = \"Welcome to Flutter\"; } // Access Text(Strings.welcomeMessage); We’re encouraged to use the intl package for internationalization. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:5:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Layouts ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Equivalent of a LinearLayout The Row or Column widgets are the equivalent: @override Widget build(BuildContext context) { return Row( // Or Column mainAxisAlignment: MainAxisAlignment.center, children: \u003cWidget\u003e[ Text('Row One'), Text('Row Two'), Text('Row Three'), Text('Row Four'), ], ); } Noteworthy properties: mainAxisAlignment mainAxisSize crossAxisAlignment: the cross axis for Row is the vertical axis. The alignment styles: ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Flexible widget The Flexible widget wraps a widget to make it resizable: class MyWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Row( children: [ BlueBox(), Flexible( fit: FlexFit.loose, // The widget's preferred size is used flex: 1, // Determines what fraction of the remaining space each widget gets: here is 1/2 child: BlueBox(), ), Flexible( fit: FlexFit.tight, // Forces the widget to fill all of its extra space flex: 1, child: BlueBox(), ), ], ); } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Expanded widget It forces the widget to fill all the empty space: Expanded(child: BlueBox()). ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:3","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"SizedBox widget It can be used in two ways: When it wraps a widget, it resizes the widget using height and weight. SizedBox( width: 100, // number of pixels child: BlueBox(), ) When it doesn’t wrap a widget, it can create empty space: SizedBox(width: 25) ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:4","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Spacer widget It creates empty space based on flex: Spacer(flex: 1) ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:5","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Equivalent of a RelativeLayout We can achieve the same result by using a combination of Column, Row, and Stack widgets. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:6","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Equivalent of a ScrollView THe equivalent is a ListView. A ListView in Flutter is both a ScrollView and an Android ListView. @override Widget build(BuildContext context) { return ListView( // Or Column mainAxisAlignment: MainAxisAlignment.center, children: \u003cWidget\u003e[ Text('Row One'), Text('Row Two'), Text('Row Three'), Text('Row Four'), ], ); } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:6:7","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Gesture detection and touch event handling ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:7:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Equivalent of onClick If the widget supports event detection, pass a function to it and handle it in the function: @override Widget build(BuildContext context) { return RaisedButton( onPressed: () { print(\"click\"); }, child: Text(\"Button\")); } If the widget doesn’t support event detection, wrap it in a GestureDetector and pass a function to the onTap parameter: class SampleApp extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( body: Center( child: GestureDetector( child: FlutterLogo( size: 200.0, ), onTap: () { print(\"tap\"); }, ), )); } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:7:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Other gestures Using GestureDetector, we can listen to gestures such as: Tap Double tap Long press Vertical drag Horizontal drag ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:7:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"ListView and adapters ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:8:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Equivalent of ListView The equivalent of ListView is ListView: import 'package:flutter/material.dart'; void main() { runApp(SampleApp()); } class SampleApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Sample App', theme: ThemeData( primarySwatch: Colors.blue, ), home: SampleAppPage(), ); } } class SampleAppPage extends StatefulWidget { SampleAppPage({Key key}) : super(key: key); @override _SampleAppPageState createState() =\u003e _SampleAppPageState(); } class _SampleAppPageState extends State\u003cSampleAppPage\u003e { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Sample App\"), ), body: ListView(children: _getListData()), ); } List\u003cWidget\u003e _getListData() { List\u003cWidget\u003e widgets = []; for (int i = 0; i \u003c 100; i++) { widgets.add(Padding( padding: EdgeInsets.all(10.0), child: Text(\"Row $i\"), )); } return widgets; } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:8:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Which item is clicked Use the touch handling provided by the passed-in widgets: import 'package:flutter/material.dart'; void main() { runApp(SampleApp()); } class SampleApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Sample App', theme: ThemeData( primarySwatch: Colors.blue, ), home: SampleAppPage(), ); } } class SampleAppPage extends StatefulWidget { SampleAppPage({Key key}) : super(key: key); @override _SampleAppPageState createState() =\u003e _SampleAppPageState(); } class _SampleAppPageState extends State\u003cSampleAppPage\u003e { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Sample App\"), ), body: ListView(children: _getListData()), ); } List\u003cWidget\u003e _getListData() { List\u003cWidget\u003e widgets = []; for (int i = 0; i \u003c 100; i++) { widgets.add(GestureDetector( child: Padding( padding: EdgeInsets.all(10.0), child: Text(\"Row $i\"), ), onTap: () { print('row tapped'); }, )); } return widgets; } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:8:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Update ListView dynamically Build a list with ListView.Build when we have a dynamic List or a List with very large amounts of data. It’s essentially equivalent to RecyclerView on Android, which automatically recycles list elements. import 'package:flutter/material.dart'; void main() { runApp(SampleApp()); } class SampleApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Sample App', theme: ThemeData( primarySwatch: Colors.blue, ), home: SampleAppPage(), ); } } class SampleAppPage extends StatefulWidget { SampleAppPage({Key key}) : super(key: key); @override _SampleAppPageState createState() =\u003e _SampleAppPageState(); } class _SampleAppPageState extends State\u003cSampleAppPage\u003e { List widgets = \u003cWidget\u003e[]; @override void initState() { super.initState(); for (int i = 0; i \u003c 100; i++) { widgets.add(getRow(i)); } } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Sample App\"), ), body: ListView.builder( itemCount: widgets.length, itemBuilder: (BuildContext context, int position) { return getRow(position); })); } Widget getRow(int i) { return GestureDetector( child: Padding( padding: EdgeInsets.all(10.0), child: Text(\"Row $i\"), ), onTap: () { setState(() { widgets.add(getRow(widgets.length + 1)); print('row $i'); }); }, ); } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:8:3","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Text ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:9:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Form input Equivalent of a hint The equivalent is InputDecoration: body: Center( child: TextField( decoration: InputDecoration(hintText: \"This is a hint\"), ) ) Show validation errors Pass an InputDecoration: import 'package:flutter/material.dart'; void main() { runApp(SampleApp()); } class SampleApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'Sample App', theme: ThemeData( primarySwatch: Colors.blue, ), home: SampleAppPage(), ); } } class SampleAppPage extends StatefulWidget { SampleAppPage({Key key}) : super(key: key); @override _SampleAppPageState createState() =\u003e _SampleAppPageState(); } class _SampleAppPageState extends State\u003cSampleAppPage\u003e { String _errorText; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Sample App\"), ), body: Center( child: TextField( onSubmitted: (String text) { setState(() { if (!isEmail(text)) { _errorText = 'Error: This is not an email'; } else { _errorText = null; } }); }, decoration: InputDecoration( hintText: \"This is a hint\", errorText: _getErrorText(), ), ), ), ); } _getErrorText() { return _errorText; } bool isEmail(String em) { String emailRegexp = r'^(([^\u003c\u003e()[\\]\\\\.,;:\\s@\\\"]+(\\.[^\u003c\u003e()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$'; RegExp regExp = RegExp(emailRegexp); return regExp.hasMatch(em); } } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:9:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Databases and local storage ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:10:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Shared Preferences Use the Shared_Preferences plugin, which wraps the functionality of both Shared Preferences and NSUserDefaults. import 'package:flutter/material.dart'; import 'package:shared_preferences/shared_preferences.dart'; void main() { runApp( MaterialApp( home: Scaffold( body: Center( child: RaisedButton( onPressed: _incrementCounter, child: Text('Increment Counter'), ), ), ), ), ); } _incrementCounter() async { SharedPreferences prefs = await SharedPreferences.getInstance(); int counter = (prefs.getInt('counter') ?? 0) + 1; print('Pressed $counter times.'); prefs.setInt('counter', counter); } ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:10:1","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"SQLite Use the SQFlite plugin. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:10:2","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Notifications Use the firebase_messaging plugin. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:11:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Widget Lifecycles The lifecycles: initState() is the method that initializes any data needed before Flutter paints it to the screen. For example, we can format a string in it. ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:12:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"References Flutter for Android Developers Introduction to Declarative UI Basic Flutter Layout Concepts Flutter in Action ","date":"June 16, 2020","objectID":"/posts/2020-06-16-Flutter-Notes/:13:0","tags":["Mobile Development","Frameworks"],"title":"Flutter Notes","uri":"/posts/2020-06-16-Flutter-Notes/"},{"categories":null,"content":"Some notes for the Dart programming language.","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":" Introduction Variables Built-in Types Numbers Strings Booleans Lists Sets Maps Runes and Grapheme Clusters Symbols Functions Optional Parameters Named Parameters Positional parameters Anonymous Functions Operators Exceptions Classes Enum Asynchrony Functional Programming References ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:0:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Introduction A basic Dart program: printInteger(int aNumber) { print('The number is $aNumber'); } main() { var number = 42; printInteger(number); } Everything that can be placed in a variable is an object. Even numbers, function, and null are objects. All objects inherit from the Object class. Dart is strongly typed. But type annotations are optional thanks to type inference. When we want to say explicitly that no type is expected, use the type dynamic. Dart supports generic types like List\u003cint\u003e or List\u003cdynamic\u003e (a list of objects of any type). Unlike Java, Dart doesn’t have public, protected, and private. Prefix an underscore _ makes it private to the library. It generally means that the identifier is visible only inside the file (not just the class). ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:1:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Variables Use var for local variables instead of type annotations. The default value for uninitialized variables is null. int lineCount; assert(lineCount == null); final and const: A final variable can be set only once. Use final if we don’t know the value at compile time. final name = 'Bob'; // Without a type annotation final String nickname = 'Bobby'; // Or this Use const for variables that are compile-time constants. If it’s at the class level, make it static const. We can also use const for constant values. We can change the value of a non-final, non-const variable, even if it used to have a const value. var foo = const []; final bar = const []; const baz = []; // Equivalent to `const []` foo = [1, 2, 3]; // Was const [] ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:2:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Built-in Types ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Numbers Both int and double are subtypes of num. Conversion between a string and a number: int one = int.parse('1'); double onePointOne = double.parse('1.1'); String oneAsString = 1.toString(); String piAsString = 3.14159.toStringAsFixed(2); // 3.14 ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:1","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Strings Both single or double quotes are fine. It’s easy to escape the delimiter: 'It\\'s easy.' String interpolation: ${expression}. If the expression is an identifier, we can skip {}. var s = 'string interpolation'; print('Dart has $s'); Like in Python, create a multi-line string using triple quote ''' or \"\"\". Strings use UTF-16. ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:2","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Booleans Only true and false have the type bool, which means we have to check the values explicitly (unlike Python). var fullName = ''; assert(fullName.isEmpty); ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:3","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Lists Example: var list = [1, 2, 3]; assert(list.length == 3); var constantList = const [1, 2, 3]; // constantList[1] = 1; // Uncommenting this causes an error. Spread operator (...) and null-aware spread operator (....?) provide a concise way to insert all elements into a collection: var list = [1, 2, 3]; var list2 = [0, ...list]; // [0, 1, 2, 3] var list3; var list4 = [0, ...?list3]; // list3 might be null. Avoid exceptions. Collection if and collection for (similar to list comprehension in Python): var nav = [ 'Home', 'Furniture', 'Plants', if (promoActive) 'Outlet' ]; var listOfInts = [1, 2, 3]; var listOfStrings = [ '#0', for (var i in listOfInts) `#$i` ]; forEach() can replace a for loop; where() can be used to filter: candidates .where((c) =\u003e c.yearsOfExperience \u003e= 5) .forEach((c) =\u003e c.interview()); ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:4","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Sets Example: var halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'}; var names = \u003cString\u003e{}; // Empty set // Set\u003cString\u003e names = {}; // Works too // var names = {}; // Creates a map, not a set. var elements = \u003cString\u003e{}; elements.add('flourine'); elements.addAll(halogens); ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:5","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Maps Example: var nobleGases = { 2: 'helium', 10: 'neon', 18: 'argon' }; // Or we can use the constructor var nobleGases = Map(); // The new keyword is optional nobleGases[2] = 'helium'; nobleGases[10] = 'neon'; nobleGases[18] = 'argon'; The map returns a null if the key doesn’t exist. ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:6","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Runes and Grapheme Clusters In Dart, runes expose the Unicode code points of a string. Because a Dart string is a sequence of UTF-16 code units, the usual way to express a code point is \\uXXXX, where XXXX is a 4-digit hexadecimal value. For more or less than 4 hex digits, place the value in curly brackets. import 'package:characters/characters.dart'; var hi = 'Hi 🇩🇰'; print('The las character: ${hi.characters.last}'); ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:7","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Symbols A Symbol object represents an operator or identifier declared in a Dart program. We might never need to use symbols, but they’re invaluable for APIs that refer to identifiers by name, because minification changes identifier names but not identifier symbols. #radix #bar ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:3:8","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Functions Dart is a true object-oriented language. Even functions are objects and have a type. Although Effective Dart recommends type annotations for public APIs, the function still works if you omit the types. bool isNoble(int atomicNumber) { return _nobleGases[atomicNumber] != null; } // Or the below isNoble(atomicNumber) { return _nobleGases[atomicNumber] != null; } // Or the arrow syntax bool isNoble(int atomicNumber) =\u003e _nobleGases[atomicNumber] != null; .. is a cascade, which enables us to perform multiple operations on the members of a single object: querySelector('id') ..text = 'Click me!' ..onClick.listen(reverseText); All functions return a value. If no return value is specified, it returns null. ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:4:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Optional Parameters Optional parameters can be either named or positional, but not both. Named Parameters Example: void enableFlags({bool bold, bool hidden}) {...} enableFlags(bold: true, hidden: false); Although named parameters are a kind of optional parameter, we can used @required to make it mandatory: const Scrollbar({Key key, @required Widget child}) Positional parameters Wrapping a set of parameters in [] makes them optional positional: String say(String from, String msg, [String device]) {...} ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:4:1","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Anonymous Functions Example: var list = ['apples', 'bananas', 'oranges']; list.forEach((item) { print('${list.indexOf(item)}: $item'); }); // Or the arrow notation list.forEach( (item) =\u003e print('${list.indexOf(item)}: $item')); ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:4:2","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Operators ~/ is the floor division. The rest are the same as the ones in Java. as, is, and is!: as: Typecast. Use it iff we are sure the object is of that type: (emp as Person).firstName = 'Bob' is True if the object has the type. is! False if the object has the type. b ??= value assigns if b is null; otherwise b stays the same. String playerName(String name) =\u003e name ?? 'Guest'; gives name 'Guest' if name is null. ?. conditional access like in Swift/Kotlin. foo?.bar is null if foo is null. ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:5:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Exceptions Example: throw FormatException('Expected at least 1 section'); try { breadMoreLlamas(); } on OutOfLlamasException { buyMoreLlamas(); } on Exception catch (e, s) { print('Unknown exception: $e'); print('Stack trace $s'); } catch (e) { // handles all print('Something really unknown: $e'); rethrow; // Allow callers to see the exception. } finally { // Always executes. } ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:6:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Classes All instance variables generate an implicit getter method. Non-final instance variables also generate an implicit setter. Just do foo.x. Constructor syntactic sugar: class Point { double x, y; Point(this.x, this.y); } Named constructors for extra clarity: Point.origin() { x = 0; y = 0; } Invoke the super constructor almost like in C++: Employee.fromJson(Map data) : super.fromJson(data) { ... } Redirecting constructors: Point.alongXAxis(double x) : this(x, 0) delegates to the main constructor. Use factory for a constructor that doesn’t always create a new instance of the class. It may return an instance from a cache or return an instance of a subtype. abstract class Shape { factory Shape(String type) { if (type == 'circle') return Circle(2); if (type == 'square') return Square(2); throw \"Can't create $type.\"; } num get area; } class Circle implements Shape { final num radius; Circle(this.radius); num get area =\u003e pi * pow(radius, 2); } class Square implements Shape { final num side; Square(this.side); num get area =\u003e pow(side, 2); } final circle = Shape('circle'); final square = Shape('square'); Getters and setters: // We can define explicit getters and setters using get and set int _speed = 0; get speed =\u003e _speed; // Read-only double get right =\u003e left + width; set right(double value) =\u003e left = value - width Abstract classes and methods: abstract class AbstractContainer { void updateChildren(); // Abstract method } Every class implicitly defines an interface containing all instance members of the class and of any interfaces it implements. Like in Java, we have extends, implements, and @override. (But Dart doesn’t have the interface keyword.) Liked in C++, operators can be overriden: Vector operator +(Vector v) =\u003e Vector(x + v.x, y + v.y); Mixins: a way of reusing a class’s code in multiple class hierarchies. Use with: class Musician extends Performer with Musical { ... } // To implement, declare no constructors mixin Musical { // mixin Musical on Musician to restrict the types that can use the mixin ... } ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:7:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Enum Example: enum Color {red, green, blue} assert(Color.red.index == 0); List\u003cColor\u003e colors = Color.values; ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:8:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Asynchrony To use await, code must be in an async function: Future checkVersion() async { // It returns a Future object var version = await lookUpVersion(); } // Future is then-able, so can always say checkVersion().then((returnValue) =\u003e foo()); Use await for () to handle a Stream (wait for all of the streams results). But we should not use this for UI event listeners, because UI frameworks send endless streams of events. ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:9:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Functional Programming Example: String scream(int length) =\u003e \"A${'a' * length}h!\"; main() { final values = [1, 2, 3, 5, 10, 50]; for (var length in values) { print(scream(length)); } // Is the same as values.map(scream).forEach(print); // More values.skip(1).take(3).map(scream).forEach(print); } ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:10:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"References A tour of the Dart language ","date":"June 13, 2020","objectID":"/posts/2020-06-13-Dart-Notes/:11:0","tags":["Programming Languages"],"title":"Dart Notes","uri":"/posts/2020-06-13-Dart-Notes/"},{"categories":null,"content":"Course notes for Secure and Dependable Systems at Jacobs University Bremen","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":" Introduction Recent Computing Disasters Dependability Concepts and Terminology Dependability Metrics Software Engineering Aspects General Aspects Software Testing Software Specification Software Verification Software Vulnerabilities and Exploits Control Flow Exploits Cryptography Cryptography Primer Symmetric Encryption Algorithms and Block Ciphers Asymmetric Encryption Algorithms Cryptographic Hash Functions Digital Signatures and Certificates Key Exchange Schemes Secure Communication Protocols Pretty Good Privacy Transport Layer Security Secure Shell Information Hiding and Privacy Steganography and Watermarks Covert Channels Anonymization Terminology Mixes and Onion Routing System Security Trusted Computing Authentication Authorization Auditing References ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:0:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Introduction This is the course notes for Secure and Dependable Systems by Dr. Jürgen Schönwälder at Jacobs University Bremen. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:1:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Recent Computing Disasters Main memory and CPU memory caches: when the data need is in the main memory but not in the caches, the CPU has to wait quite a while. Side channel attack: an attack where info is gained from the physical implementation of a computer system (e.g., timing, power consumption, radiation) rather than weaknesses in an implemented algorithm itself. Speculative execution: in a situation where a CPU would have to wait for slow memory, simply guess a value and continue execution speculatively. Reading arbitrary memory ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:1:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Dependability Concepts and Terminology System, environment and system boundary: System: an entity that interacts with other entities (e.g. OS kernel) Environment: the other systems. (e.g. hardware) System boundary: the common frontier between the system and its environment. (e.g. the set of OS calls) Systems almost never exist in isolation. Components and state: Components: the structure of a system is composed of a set of components, where each component is another system. The recursion stops when a component is considered atomic. Total state: the set of the following states: computation, communication, stored info, interconnection, and physical condition. Function and behavior: Function: what the system is intended to do, which is described by the function specification. Behavior: what the system does to implement its function and is described by a sequence of states. Service and correct service: Service: the behavior perceived by users; a user is another system that receives service from the service provider. Correct service: the service that implements the system function. Failure, error, and fault: (Threats) Failure: service failure, when the delivered service deviates from correct service. Error: the part of the total state that may lead to subsequent failure. Fault: the adjudged or hypothesized cause of an error. A fault is active when it produces an error, otherwise it’s dormant. Fault -\u003e Error -\u003e Failure. Dependability: The ability of a system to deliver service than can justifiably be trusted. The ability to avoid service failures that are more frequent and more severe than is acceptable. Dependability attributes: Availability: readiness to deliver Reliability: continuity Safety: no catastrophic consequences Integrity: no improper alterations Maintainability: undergo modifications Confidentiality: no disclosure of info Security - confidentiality, integrity, and availability. Means: Prevention: preventing the occurence or introduction of faults. Tolerance: avoiding service failures in the presence of faults. Removal: reducing the number and severity of faults. Forecasting: estimating the present number, the future incidence, and the likely consequences of faults. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:1:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Dependability Metrics Reliability and MTTF/MTBF/MTTR: Reliability: the probability that the system is delivering correct service in the time interval. MTTF (Mean Time To Failure): non repairable. MTBF (Mean Time Between Failure): repairable. MTTR (Mean Time To Repair). Availability: the probability that the system is delivering correct service at time t. For a repairable system, A = MTBF/(MTBF + MTTR). 5 nine availability means 99.999%. Safety: the probability that the system is delivering correct service or has failed in the manner that does not cause harm in the interval. Mean Time To Catastrophic Failure. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:1:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Software Engineering Aspects ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:2:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"General Aspects Defensive programming: requires the preconditions to be checked when a function is called ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:2:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Software Testing Unit and regression testing: Regression testing: testing of an entire program to ensure that a modified version of a program still handles all input correctly that an older version did. A bug reported by a customer is primarily a weakness of the regression test suite. Test coverages: Function coverage Statement coverage Branch coverage Predicate coverage (condition coverage): Boolean sub-expression both true and false Mutation testing: Mutation testing involves modifying a program in small ways. It evaluates the effectiveness of a test suite. The source code is modified algorithmically by applying mutation operations in order to produce mutants. A mutant is killed by the test suite if tests fail for the mutant. Mutants that are not killed indicate that the test suite is incomplete. The mutation score is the number of mutants killed normalized by the number of mutants. Fuzzing or fuzz testing feeds invalid, unexpected, or simply random data into computer programs. Fault injection inject faults by: modifying source code (very similar to mutation testing) or injecting faults at runtime (often via modified library calls) It’s highly effective to test whether software deals with rare failure situations, e.g. the injection of system calls failures that usually work. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:2:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Software Specification Formal specification: uses a formal (mathematical) notation to provide a precise definition of what a program should do. Formal verification uses logical rules to mathematically prove that a program satisfies a formal specification. Hoare triple: {P}C{Q} (precondition, program, postcondition) Partial correctness and total correctness: Partially correct: the results satisfy the postcondition Q Totally correct: partially correct + always terminates [P]C[Q] Notations: V: variable E: expression S: statement (either true or false) C: command x,y: auxiliary variables Conditionals and while loop: IF S THEN $C_1$ ELSE $C_2$ FI WHILE S DO C OD ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:2:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Software Verification $\\vdash S$ means S has a proof. $\\frac{\\vdash S_1, …, \\vdash S_n}{\\vdash S}$ means S may be deduced from the above. Precondition strengthening: (it’s stronger when the set is smaller) $$\\frac{\\vdash P \\rightarrow P’, \\vdash \\{P’\\} C \\{Q\\} }{\\vdash \\{P\\} C \\{Q\\} }$$ Postcondition weakening: (it’s weaker when the set is bigger) $$\\frac{\\vdash \\{P’\\} C \\{Q’\\}, \\vdash Q’ \\rightarrow Q, }{\\vdash \\{P\\} C \\{Q\\} }$$ Weakest precondition: the largest set of states for which C terminates. Weakest liberal precondition: (doesn’t have to terminate) Strongest postcondition: the smallest set of states. Assignment axiom: $\\vdash \\{P[E/V]\\} V := E \\{P\\}$ (replace V with E in P) (backwards) Conditional rule: $$\\frac{\\vdash\\{P \\wedge S \\}C_1 \\{Q\\}, \\vdash\\{P \\wedge \\neg S \\}C_2 \\{Q\\}}{\\vdash \\{P\\} \\text{ IF S THEN } C_1 ELSE \\ C_2 \\ FI \\{Q\\} }$$ While rule: (P is an invariant) $$\\frac{\\vdash\\{P \\wedge S \\}C \\{P\\}}{\\vdash \\{P\\} \\text{ WHILE S DO C OD } \\{ P \\wedge \\neg S \\} }$$ Annotations are required: before each command in a sequence where it’s not an assignment after the keyword Do in a WHILE command (loop invariant) Generation of verification conditions (VCs) Assignment ($\\{P\\} V := E \\{Q\\}$): $P \\rightarrow Q[E/V]$ Conditions: VCs generated by it Sequences: VC generated by it While loops ({P} WHILE S DO {R} OD {Q}): $P \\rightarrow R$ and $R \\wedge \\neg S \\rightarrow Q$ VCs generated by $\\{R \\wedge S\\} C \\{R\\}$ For total correctness, we need to modify the VCs for WHILE: Show that a non-negative integer, a variant, decreases on each iteration. Add $R \\wedge S \\rightarrow E \\geq 0$ Add VCs generated by $\\vdash[P \\wedge S \\wedge E = n]C [P \\wedge (E \u003c n)]$ While for total correctness: $$\\frac{\\vdash[P \\wedge S \\wedge E = n]C [P \\wedge (E \u003c n)], \\vdash P \\wedge S \\rightarrow E \\geq 0}{\\vdash [P] \\text{ WHILE S DO C OD } [ P \\wedge \\neg S ] }$$ Partial correctness and termination implies total correctness. Total correctness implies partial correctness and termination. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:2:4","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Software Vulnerabilities and Exploits Malware: Virus: replicates by modifying other programs Worm: replicates itself to spread to other computers Trojan horse: misleads user of its true intent Ransomware: blocks access until a ransom is paid Spyware: gathers info Social engineering: the psychological manipulation of people into performing actions or divulging confidential information. Phishing Impersonation USB drop Backdoor: a method of bypassing normal authentication systems to gain access. They might be created by malicious developers, tools such as compilers, or other malware. Rootkit: a collection of software, typically malicious, designed to enable access that’s not otherwise allowed and often masks its existence. Advanced persistent threat: a stealthy computer network threat actor which gains unauthorized access and remains undetected for an extended period. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:3:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Control Flow Exploits Registers: ebp (rbp): base pointer esp (rsp): stack pointer eip (rip): instruction pointer Shellcode: a small piece of code used as the payload in the exploitation. (It’s called shellcode because it typically starts a command shell.) Stack buffer overflow: a program writes to a memory address on the call stack outside of the intended data structure, which is usually a fixed-length buffer. Stack smashing: inject executable code into the program. Return-oriented programming: allows an attack to execute code in the presence of security defenses. An attacker gains control of the call stack to hijack the control flow and executes carefully chosen machine instruction sequences that are already present in the memory. Format string attack: format strings can be used to crash a program or to execute harmful code. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:3:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Cryptography ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Cryptography Primer Terminology: Cryptology: cryptography (secret writing) + cryptanalysis (break ciphers) Ciper: an algorithm for encryption and decryption Key: some secret info used as a parameter of a cipher and customizes the encryption algorithm. The security rests on the secrecy of the keys not the algorithms. Crptosystem: $D_k(E_k(m)) = m$ Cryptographic hash function: Efficient to compute for arbitrary input. Given a hash value h, difficult to find an input m such that h = H(m) (preimage resistance). Given an input m, difficult to find another input $m’ \\neq m$ such that H(m) = H(m’) (2nd-preimage resistance). Difficult to find two different inputs such that H(m) = H(m’) (collision resistance). Digital signatures are used to prove the authenticity and integrity of a message. Authentication: verify the identity Non-repudiation: cant deny that it sent the message Integrity: verify it’s not tampered with ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Symmetric Encryption Algorithms and Block Ciphers Substitution cipher: easier to attack via frequency analysis Monoaphlaetic: bijection on the set of symbols of an alphabet. Polyalphabetic: multiple bijections, i.e. a collection of monoalphabeic ciphers. Permutation (transposition) cipher: maps a plaintext $m_0, … ,m_{l-1}$ to $m_{\\tau(0)}, … , m_{\\tau(l-1)}$ where $\\tau$ is a bijection of the positions in the message. Product cipher: combines two or more ciphers Multiple substitution cipher gives another substitution cipher -\u003e little value. Multiple permutation cipher gives another permutation cipher -\u003e little value. Substitution + permutation -\u003e harder to break. Chosen plaintext attack and chosen ciphertext attack: Choose arbitrary cleartext/ciphertext and feed them into E/D to obtain the corresponding ciphertext/cleartext. Polynomial and negligible functions: Polynomial: $f \\in O(p)$ for some polynomial p Super-polynomial: $f \\notin O(p)$ for every polynomial p Negligible: $f \\in O(1/|p|)$ for every polynomial p A security scheme is secure if the probability of security failure is negligible in terms of the cryptographic key length n. Polynomial time and probabilistic algorithms: Polynomial time: worst-case time complexity is a polynomial function Probabilistic algorithm: may return different results when called multiple times for the same input. Probabilistic polynomial algorithm. One-way function: f can be computed by a polynomial time algorithm, but any polynomial time randomized algorithm F that attempts to compute a pseudo-inverse for f succeeds with negligible probability. They are super-polynomial hard to invert. Security of ciphers: Pick two plaintexts $m_0$ and $m_1$ and randomly receives either $E(m_0)$ or $E(m_1)$. Secure if we can’t distinguish between the two situations with a probability that’s non-negligibly better than 1/2. Block cipher: a cipher that operates on fixed-length groups of bits called a block. The last block may need to be padded. Electronic codebook (ECB): simply slices the input into a sequence of blocks that are encrypted in isolation. Parallelizable for encryption and decryption; Random access; Lack of diffusion (doesn’t hide data pattern) Cipher block chaining (CBC): feeds the ciphertext of the previous block to the subsequent block. Parallelizable for decryption but not for encryption; Random access. Output feedback (OFB): the encryption and decryption work exactly the same. No parallelization nor random access. Counter (CTR): improves OFB (sequential and doesn’t support random access). Parallelizable for both encryption and decryption; Random access. Substitution-permutation network: a block cipher whose bijections arise as products of substitution and permutation ciphers. Substitution step (S-box) Permutation step (P-box) Key step (xor) Advanced encryption standard (AES): Characteristics: Overall blocksize: 128 bits Number of parallel S-boxes: 16 Bitsize of an S-box: 8 10 rounds with 128 bit keys; 12 with 192; 14 with 256 ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Asymmetric Encryption Algorithms Encrypt using the receiver’s public key. Decrypt using the receiver’s private key. When signing, encrypt using the sender’s private key. Decrypt using the sender’s public key. Rivest-Shamir-Adleman (RSA): Key gen: Gen two large prime numbers p and q of roughly the same length Compute n = pq and $\\phi (n) = (p-1)(q-1)$ Choose e satisfying $1 \u003c e \u003c \\phi (n)$ and $gcd(e, \\phi (n)) = 1$ Compute d satisfying $1 \u003c d \u003c \\phi (n)$ and $ed \\ mod \\ \\phi(n)= 1$ Public key: (n,e); private key: (n,d) Encryption: compute $c_i = m_{i}^e \\ mod \\ n$ for all $m_i$ Decryption: compute $m_i = c_{i}^d \\ mod \\ n$ for all $c_i$ It’s computationally intensive and hence used only on small cleartexts. Elliptic curve cryptography (ECC): Elliptic curve: $E = \\{(x,y)|y^2 = x^3 + ax + b\\} \\cup \\{\\infty \\}$ ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Cryptographic Hash Functions Purposes: Integrity verification Authentication Fingerprints for digital signatures Adjustable proof of work mechanisms MD (Message Digest); SHA (Secure Hash Algorithm). Merkle-Damgard construction: the message is padded and postfixed with a length value. Hashed message authentication code (HMAC): a type of message authentication code (MAC) involving a cryptographic hash function and secret cryptographic key. HMAC can be used to verify both data integrity and authenticity. HMAC doesn’t encrypt the message. The message must be send with the HMAC hash. The receiver will hash it again with the key and match the hash. Computation: $HMAC_H(k,m) = H((k’ \\bigoplus opad) || H((k’ \\bigoplus ipad) || m))$ k’ is derived by padding k with 0s or hashing k. opad is the outer padding: 0x5c5c5c5c…5c ipad is the inner padding: 0x36363636 … 36 xor and concatenation Authenticated encryption with associated data: It’s often necessary to combine encryption with authentication. MAC protects the data against modifications. Encrypt-then-Mac (EtM): $E_k(M) || H_k(E_k(M))$ Encrypt-and-Mac (EaM): $E_k(M) || H_k(M)$ Mac-then-Encrypt (MtE): $E_k(M || H_k(M))$ EtM is preferred since it protects against chosen ciphertext attacks and avoids ay confidentiality issues from the MAC of the cleartext. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:4","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Digital Signatures and Certificates Direct signature: Signer: $S = E_{k^{-1}}(m)$ Verifier: $D_k(S) \\stackrel{?}{=} m$ Indirect signature of a hash: (faster and more common, but it requires the signature to be sent with the document) Signer: $S = E_{k^{-1}}(H(m))$ Verifier: $D_k(S) \\stackrel{?}{=} H(m)$ Public key certificate: an electronic document to prove the ownership of a public key. It contains: Info about the public key. Info about the identity of the owner (subject). The digital signature of an entity that has verified the certificate’s content (issuer). Public key infrastructure (PKI): a set of roles, policies, and procedures. A central element is the certificate authority (CA) CAs are hierarchically organized. A root CS may delegate some work to trusted secondary CAs. A key function of a CA is to verify the identity of the subject. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:5","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Key Exchange Schemes Key exchange (key establishment) is any method by which cryptographic keys are exchanged between two parties. Ephemeral key: it’s generated for each execution of a key establishment process. Ephemeral keys provide perfect forward secrecy: the ephemeral keys will not be compromised even if long-term keys are compromised in the future. Keys are easier to break the more they are used. Diffie-Hellman Key Exchange: Define a prime number p and a primitive root g with g \u003c p. A randomly picks $x_A \\in Z_p$ and computes $y_A = g^{x_a} \\ mod \\ p$ and sends it to B. B randomly picks $x_B \\in Z_p$ and computes $y_B = g^{x_B} \\ mod \\ p$ and sends it to A. A computes: $K_{AB} = y_{B}^{x_A} \\ mod \\ p = g^{x_Ax_B} \\ mod \\ P$ B computes: $K_{AB} = y_{A}^{x_B} \\ mod \\ p = = g^{x_Ax_B} \\ mod \\ P$ g is a primitive root of $Z_p = \\{0,…,p-1\\}$ if $g^1 \\ mod \\ p$, …, $g^{p-1} \\ mod \\ p$ produces 1, …, p-1 in any permutation. It suffers from Man in the Middle. Needham-Schroeder Protocol and Kerberos Protocol. The former uses 5 messages The latter uses 4 messages. It uses time stamps to address the flaw of the former. BAN (Burrows-Abadi-Needham) logic: a first attempt to provide formalism for authentication protocol analysis. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:4:6","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Secure Communication Protocols ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:5:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Pretty Good Privacy PGP key management: Key rings: one key ring for public keys and one key ring for private keys. Keys are identified by fingerprints. Key gen utilizes various sources of random info (/dev/random) and symmetric encryption algorithms to generate good key material. Web of trust: avoid centralized certification authorities. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:5:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Transport Layer Security TLS, formerly known as SSL (Secure Socket Layer) was made to enable e-commerce. TPS uses X.509 certificates to authenticate servers and clients. TLS protocols: Handshake Protocol: authenticates, negotiates cryptographic modes and parameters, and establishes shared keying material. Alert Protocol: communicates alters like closure alters and error alters. Record Protocol: uses the parameters established by the handshake protocol to protect traffic between the communicating peers. Record Protocol is the lowest internal layer and carries the handshake + alert protocol messages + app data. Record Protocol: Fragments the data Optionally compresses the data Adds MAC Encrypts and transmits the result Handshake Protocol: Agree on algorithms, exchange random numbers, and check for session resumption Agree on a premaster secret (parameters) Exchange certificates and cryptographic info to authenticate Gen a master secret Provide security parameters to the record layer Allow client and server to verify that the peer has calculated the same security parameters and the handshake completed without being tampered. A full TLS 1.2 handshake requires two round-trips. Full handshakes are expensive. A seesion resumption requires only one round-trip. TLS 1.3 supports a 0-rtt (zero round-trip) mode. Change Cipher Spec Protocol: signals transitions in ciphering strategies. (No longer in TLS 1.3) Alert Protocol: signals exceptions (warnings, errors) occured during the processing of TLS protocol messages. Used to properly close a TLS connection by exchanging close_notify alert messages. In order to scale servers, it’s the best if the clients init the TCP connection teardown and end up in TIME_WAIT. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:5:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Secure Shell SSH provides a secure connection through which user authentication and several inner protocols can be run. SSH Protocol layers: Transport Layer Protocol: server authentication, confidentiality, and integrity with perfect forward secrecy. User Authentication Protocol: can auth by user’s keys and also other means like passwords. Connection Protocol: multiplexes the encrypted data stream into several logical channels. SSH keys, passwords, and passphrases: Host key: Every server must have a public/private host key pair Used for server authentication Identified by their fingerprint User key: Every user must have their own public/private key pairs, optionally used to authenticate users. User password: remote accounts may use passwords to authenticate users. Passphrase: user’s private key may be protected by a passphrase. In reality, users often blindly accept the host key offered at the first connection time. TCP forwarding: tunnel unencrypted traffic through an encrypted SSH connection, ssh -f joe@example.com -L 2000:example.com:25 -N creates a tunnel connecting a client to port 25 on example.com and provides a listening endpoint on Joe’s localhost on port 2000. If a program connects to the lcoal port 2000, it’s talking to example.com using port 25. X11 forwarding: a special application of TCP forwarding allowing X11 clients on remote machines to access the local X11 server (managing the display and the keyboard/mouse) (run graphical apps remotely) Connection sharing: new SSH connections hook as new channel into an existing SSH connection, reducing session startup times. IP tunneling: tunnel IP packets over an SSH connection by inserting tunnel interfaces into kernels and by configuring IP forwarding. Essentially a simple VPN over which you can securely send arbitrary IP traffic. SSH agent: maintains client credentials during a login session so that credentials can be reused by different SSH invocations without user interaction. SSh agent forwarding: an SSH server emulates an SSh agent and forwards requests to the SSH agent, creating a chain of SSH agent delegations. It enables users to access a remote system and from there to access further systems, always accessing the local SSH agent. SSH connections can go over multiple hops in a very convenient way without having to store any user keys on intermediate systems. OpenSSh privilege separation: two processes (special and normal privileges). ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:5:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Information Hiding and Privacy ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:6:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Steganography and Watermarks Information hiding: conceal the very existence of some kind of info for some specific purpose. Often used together with encryption. Steganography: the embedding of some info (hidden-text) within digital media (cover-text) so that the resulting digital media (stego-text) looks unchanged (imperceptible) to a human/machine. Unused or redundant bits. Robust steganographic methods may survive some typical modifications of stego-texts (cropping/recoding or images). Media types of large size usually make it easier to hide info. Watermarking: the hidden info itself is not important; the watermark says something about the cover-text. Steganography: the cover-text is not important; the hidden text is the valuable info and is independent of cover-text. Digital watermarks are widely used for copyright protection and source tracking purposes. Classification of steganographic algorithms: Fragile vs robust (survive modifications) Blind vs semi-blind (blind needs the original cover-text for detection/extraction) Pure vs symmetric (secret key) vs asymmetric (public key) (pure needs no key) (asymmetric needs a secret key for embedding and a public key for extraction) LSB-based image steganography: changes the least-significant bits are difficult for humans to see (three 8-bit color values) Use a key to select some LSBs to embed info Encode the info multiple times to achieve robustness against noise. Problems: Existence of hidden info may be revealed if the statistical properties of LSBs change. Fragile against noise such as compression, resizing, cropping, rotating, or additive white Gaussian noise. DCT-based image steganography: image formats like JPEG use discrete cosine transforms (DCT) to encode image data. The manipulation happens in the frequency domain instead of the spatial domain, which reduces visual attacks. Replace the LSBs of some of the DCT coefficients. Use a key to select some DCT coefficients. Problem: Existence of hidden info may be revealed if the statistical properties of the DCT coefficients are changed. The risk may be reduced by using a pseudo-random number generator to select coefficients. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:6:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Covert Channels Covert channels represent unforeseen communication methods that break security policies. They hid the fact that communication takes place. Cover channels embed info in: header fields of protocol data units (protocol messages) the timing of protocol data units (inter-arrival messages) Cover channel patterns: Size modulation: size of a head field or protocol message Sequence: the sequence of head fields Add redundancy: new space in a header field or a message PDU (protocol data unit) corruption/loss: generates corrupted or unitizes packet loss Random value: in a head field containing a random value Value modulation: selects one of the values in a header Reserved/unused: into a reserved or unused header field Inter-arrival time: alters timing intervals Rate: alters the data rate Protocol message order: synthetic protocol message order Re-transmission: retransmits sent or received messages. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:6:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Anonymization Terminology Anonymity: the attacker can’t sufficiently identify the subject within a set of subjects, the anonymity set. Larger anonymity set \u0026 more evenly distributed -\u003e stronger anonymity Robustness: how stable the quantity of anonymity is against changes Unlinkability Unlinkability of items of interest (IOIs), the attacker can’t sufficiently distinguish whether these IOIs are related. Sender anonymity means each message is unlinkable. Undetectability: can’t sufficiently distinguish whether an IOI exists Unobservability: undetectability of the IOI against all subjects uninvolved. anonymity of the subjects involved in the IOI against others involved. Sender unobservability: undetectable whether any sender within the unobservability set sends. Relaitonship unobservability: undetectable whether anything is sent out of a set of could-be senders to a set of could-be recipients. Relationships: unobservability $\\Rightarrow$ anonymity sender/recipient anonymity/unobservability $\\Rightarrow$ send/recipient anonymity/unobservability Pseudonymity: the use of pseudonyms as identifiers. Pseudonym: the identifier other than the real names. A public key certificate bides the public key to another pseudonym. In case the pseudonym is the real name, it’s called an identity certificate. Identifiability: sufficiently identify the subject within the identifiability set. Identity: any subset of attribute values which sufficiently identifies the person. Identity management: managing various partial identities. A partial identity is a subset of attribute values of a complete identity (the union of all attribute values of all identities) A pseudonym might be an identifier for a partial identity. It’s privacy-enhancing if it sufficiently preserves unlinkability ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:6:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Mixes and Onion Routing Mix networks: It uses special proxies called mixes. The mixes can filter, collect, recode, and reorder messages to hide conversations. Removal or duplicate messages Collection to create an ideally large anonymity set. Recoding so that incoming and outgoing messages can’t be linked. Reordering so that the order can’t be used to link. Padding so that the message sizes do not reveal info to link. Onion routing: A message is sent via an overlay network of intermediate routers called a circuit. A message is cryptographically wrapped multiple itemss that every router unwraps one layer and learns to which router the message needs to be forwarded No node in the circuit can tell whether the node before is the originator or another intermediary. Only the final node (exit node) can determine its own location in the chain. Choose routes difficult to observe. Can provide real-time services. Tor: Every Tor router has a long-term identity key (sign TLS cert) and a short-term onion key (decrypt to set up circuits and ephemeral keys). Crucial to use end-to-end encryption to protect against compromised exit node. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:6:4","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"System Security Lamspson model: subject authenticates guard, which authorizes object. Audit trail audits guard. Isolation: design and deployment. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:7:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Trusted Computing Trusted computing base: the set of hard and software components crititcial to achvieve the systems’ security properties. When other parts are attacked, the device will not misbehave. Small to veify the correctness. Tamper-resistant. Spcial hardware components. It’s hard to design software that can be trusted. Goals: Isolation: separate essentail from general Attestation: prove a component is in a certain state Sealing: wrapping of code and data that can only be unwrapped under certain cicumstances. Code confidentiality: sensitive code and static data can’t be obtained by untrusted. Side-channel resistence: unstructed can’t deduce info about the internal state of a trusted component. Memory protection: protects the integrity and authenticity of data. The first candidates of functions to place into trusted hardware are cryptographic algorithms and key gen and storage. Attestation may be local or remote. Trusted platform module (TPM) is a dedicated microcontroller to secure hardware through integrated cryptographic operations and key storage. RNG, Endorsement Key (EK), Attestation Identity Keys (AIKs) Trusted and rich execution envrionment: Trusted Execution Environment (TEE): secure Rich Execution Environment (REE): non-secure REE resources are acccessbile from TEE TrustZone Cortex-A/M (ARM) The non-secure (NS) bit conveys whether the processor works in secure or normal mode. To perform a context switch, it transits through a monitor mode, which saves and restores the state. Cotex-M repalces the monitor mode with a faster mechanism to call secure code via multiple secure fucntion entry points. Cortex-A is for resoruce rich systems like mobile phones. Cortex-M is for limited systems like embedded. Secuity Guard Extension (SGE, Intel) Protected parts - enclaves. Non-enclave code can’t access enclave code. The content of enclaves is loaded when the enclaves are created. Creation and deletion of enclaves is using the highest privilege. Entering and leaving is using the lowest privilege. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:7:1","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Authentication Authentication: verify that it ahs a certain attribute value. Identificaiotn step: presenting the claimed attribute value (user identifier) Verification step: presetning or genreating authentication info (e.g. a value singed with a private key) as evidence to prove the binding. Authentication factors: Knowledge: passowrd, PIN Possesion: mobile phone, token Static biometrics: fingerpirnt Dynamic biometrics: voice, signature, typing rhythm Password authentication: store H(s||p), s is the salt that ensures that the same passwords don’t havve the same hash value. Challegne-response authentication: require correct auth info to be provided in reposnse to a challenge. Password is a special case. One-time password authentication: The user computes $q = H^n(s||p)$ The server verifies: $H(q) = H(H^n(s||p)) = H^{n+1}(s||p)$ and checks if it matches. If it does, set k = 1 and decrement n. If n becomes 0, a new ini must be performed. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:7:2","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Authorization Lampson’s access control matrix: greate in theory by difficult in practice (huge.) Subjects are row headings and objects are column headings. (S X O) Access control list: the column of the matrix. Given an object, have a list of subjects X rights. Example: Unix inode. Capabliteies: the row of the matrix. Given a subject, have a list of obejcts X rights. Example: Unix file descriptor. ACL and capabilties are theorically equivalent. Discreiotnary vs mandatory access control: Deiscriotnary: subjects can define (Unix filesystem permissions) Mandatory: system controls ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:7:3","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Auditing Auditing: keep a log (audit trail) of decisions. For debugging and forensics. ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:7:4","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"References https://cnds.jacobs-university.de/courses/sads-2020/ ","date":"May 26, 2020","objectID":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/:8:0","tags":["Computer Science"],"title":"Secure and Dependable Systems Notes","uri":"/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/"},{"categories":null,"content":"Course notes for Computability and Complexity at Jacobs University Bremen","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":" Introduction Computability Theory The Church-Turing Thesis Turing Machines Variants of Turing Machines Mutlitape TM Nondeterministic TM Random Access Machine Decidability Decidable Languages Undecidability of $A_{TM}$ A Turing-Unrecognizable Language Reducibility Complexity Theory Time Complexity Measuring Complexity The Class P The Class NP Polynomial Time Reducibility NP-completeness Hierarchy Theorems Space Complexity Measuring Space Complexity PSPACE and Related Classes References ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:0:0","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Introduction This is the course notes for Computability and Complexity by Prof. Dr. Peter Zaspel at Jacobs University Bremen. ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:1:0","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Computability Theory ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:2:0","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"The Church-Turing Thesis There exists an intuitive idea of an algorithm and a formalization via DTM/NTM/RAM The hypothesis that both are equal is called Church-Turing Thesis. Turing Machines Formal definition of a TM: A Turing machine is a 7-tuple, $M=(Q,\\Sigma,\\Gamma,\\delta,q_0,q_{accept},q_{reject})$, where $Q,\\Sigma,\\Gamma$ are all finite sets and $Q$ is the set of states $\\Sigma$ is the input alphabet not containing the blank symbol $\\sqcup$ $\\Gamma$ is the tape alphabet, where $\\sqcup \\in \\Gamma$ and $\\Sigma \\subseteq \\Gamma$ $\\delta :Q\\times \\Gamma \\rightarrow Q\\times \\Gamma \\times \\{L,R\\}$ is the transition function $q_0 \\in Q$ is the start state $q_{accept} \\in Q$ is the accept state, where $q_{accept} \\neq q_{reject}$ $q_{reject} \\in Q$ is the reject state. Configuration of a TM: Let M be a TM, $u,v \\in \\Gamma^*$ and $q \\in Q$. The setting $uqv$ is a configuration of the TM, where $u$ is the current tape content to the left of the head $q$ is the current state $v$ is the current tape content below ($v_1$) and to the right of the head (being terminated by blanks $\\sqcup$) A configuration $C_1$ yields a configuration $C_2$ if M can legally move from $C_1$ to $C_2$ in a single step. Leftward move: $uaq_i bv$ yields $uq_j acv$ iff $\\delta(q_i, b) = (q_j, c, L)$ Rightward move: $uaq_i bv$ yields $uacq_j v$ iff $\\delta(q_i, b) = (q_j, c, R)$ L-move, left tape end: $q_i bv$ yields $q_j cv$ iff $\\delta(q_i, b) = (q_j, c, L)$ R-move, left tape end: $q_i bv$ yields $cq_j v$ iff $\\delta(q_i, b) = (q_j, c, R)$ Characterization of configuration: Start configuration: $u = \\epsilon$, i.e. head is at leftmost end of tape Accepting configuration: $q=q_{accept}$ Rejecting configuration: $q=q_{reject}$ Halting configuration: accepting or rejecting configuration Remark: there’s exactly one accepting/rejecting state, but there can be many accepting/rejecting configurations. Accepted input and recognized language: M accepts $w$ if a sequence of configurations $C_1 , C_2 , …, C_k$ exists, such that $C_1$ is the start configuration $C_i$ yields $C_{i+1}$ $C_k$ is the accepting configuration The language of M is $L(M) = \\{w \\in \\Sigma^* | M \\ \\text{accepts} \\ w\\}$. We say L is recognized by M. Turing-recognizable or recursively enumerable language, if some TM recognizes it. M halts on $w$ if a sequence of configurations $C_1 , C_2 , …, C_k$ exists, such that $C_1$ is the start configuration $C_i$ yields $C_{i+1}$ $C_k$ is the halting configuration Decider: if it halts on all inputs $w \\in \\Sigma^*$. A decider M that recognizes L is said to decide L. Decidable/Recursive/Turing-decidable language: if there exists a TM (i.e. a decider) that decides it. Variants of Turing Machines All variants have the same power as a standard TM. Mutlitape TM The definition differs from the standard TM that: $\\delta :Q\\times \\Gamma^k \\rightarrow Q\\times \\Gamma^k \\times \\{L,R\\}^k$ For every multitape TM M, there exits a single-tape TM S that recognizes the same language. Turing-recognizable iff some multitape TM recognizes it. Nondeterministic TM The definition differs from the standard TM that: $\\delta :Q\\times \\Gamma \\rightarrow \\mathcal{P}(Q\\times \\Gamma \\times \\{L,R\\})$ For definition of yielding configurations, it differs from the standard TM that we need to change from $=$ to $\\in$. (One config can yield several or no config.) Exactly the same definition for accepted input and recognized language. For every NTM N, there exists a deterministic (single-tape) TM S that recognizes the same language. Turing-recognizable iff some NTM recognizes it. Nondeterministic decider: if all branches halt on all inputs. Random Access Machine k - command counter; a - accumulator; c - register; x - input; $h_r$ - position on input; y - output. Some commands: read: $a = x_{h_r}; \\ h_r = h_r + 1; k = k + 1$ print a: $y=ay; k = k + 1$ Input tape: read-only and read once, can only move to the right Program: finite sequence of commands. There exists a RAM that terminates and outpu","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:2:1","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Decidability Decidable Languages The language $A_{DFA}=\\{\\langle B,w \\rangle| \\text{B is a DFA that accepts input string } w \\}$ is decidable. (The problem of testing whether a given DFA accepts a given string is decidable.) The language $A_{NFA}=\\{\\langle B,w \\rangle| \\text{B is a NFA that accepts input string } w \\}$ is decidable. (Convert to NFA to DFA.) The language $A_{REX}=\\{\\langle B,w \\rangle| \\text{B is a regular expression that generates string } w \\}$ is decidable. (Convert R to DFA.) The language $E_{DFA}=\\{\\langle A \\rangle| \\text{A is a DFA and L(A) = } \\emptyset \\}$ is decidable. (No accept states are marked.) The language $EQ_{DFA}=\\{\\langle A,B \\rangle| \\text{A and B are DFAs and L(A)=L(B) } \\}$ is decidable. (Build C that’s empty iff A=B. Use $E_{DFA}$ on C.) The language $A_{CFG}=\\{\\langle G,w \\rangle| \\text{A is a CFG that generates string } w \\}$ is decidable. (Convert G to CFG in Chomsky Normal Form; enumerate all derivations within 2n-1 steps.) The language $E_{CFG}=\\{\\langle A \\rangle| \\text{A is a CFG and L(G) = } \\emptyset \\}$ is decidable. (Mark all terminal symbols. Follow the rules until no new variables are marked. If the start symbol is not marked, accept.) But $EQ_{CFG}$ is not decidable. Every context-free language L is decidable. (Build a TM with CFG G with $A_{CFG}$) Undecidability of $A_{TM}$ The language $A_{TM}=\\{\\langle M,w \\rangle| \\text{M is a TM and M accepts } w \\}$ is undecidable. (Proof by diagonalization. A TM D($\\langle M\\rangle$) that accept if M doesn’t accept $\\langle M\\rangle$, which leads to contradiction.) The language $A_{TM}=\\{\\langle M,w \\rangle| \\text{M is a TM and M accepts } w \\}$ is Turing-recognizable. (Build TM U. Simulate M on w. If M accepts, U accepts. If M rejects, U rejects.) (U is an instance of Universal TM) (U can run forever.) Sets: A and B have the same size/cardinality if there exists a bijective function f with $f: A \\rightarrow B$. A is countable if it’s either finite or has the same size as $\\mathbb{N}$. Otherwise it’s uncountable. The set $\\mathbb{Q}$ of rational numbers is countable. The set $\\mathbb{R}$ of real numbers is uncountable. (Proof by diagnolization.) There exist languages that are not Turing-recognizable. Fixing a non empty alphabet $\\Sigma$, the set of all TMs over $\\Sigma$ is countable. (M can be mapped to binary strings, which are countable (enumerate).) The set $\\mathcal{B}$ of all infinite binary sequences is uncountable. (Proof by diagnolization.) Fixing a non-empty alphabet $\\Sigma$, the set of all languages over $\\Sigma$ is uncountable. (Construct a bijection between the set of all languages of $\\Sigma$ and $\\mathcal{B}$ to have the characteristic string. The latter is uncountable, the former is also uncountable.) The set of TMs is countable but the set of languages is uncountable. So there are languages not described by TMs. A Turing-Unrecognizable Language L is co-Turing-recognizable if $\\overline L$ is Turing-recognizable. A language is decidable iff it’s Turing-recognizable and co-Turing-recognizable. (Run two TMs in parallel.) The language $\\overline{A_{TM}}$ is not Turing recognizable. (L is undecidable $\\Rightarrow$ L not Turing recognizable $\\vee$ $\\overline L$ not Turing recognizable $\\Rightarrow$ $\\overline L$ not Turing recognizable) ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:2:2","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Reducibility The language $HALT_{TM}=\\{\\langle M,w \\rangle| \\text{M is a TM and M halts on input } w \\}$ is undecidable. (Proof by contradiction. Assume there’s a decider R for $HALT_{TM}$. Construct a decider for $A_{TM}$ (“R rejects, reject” eliminates the loop case.)) A Computable function f $\\Rightarrow$ there exists some TM M, on every input w, halts with just f(w) on its tape. A is mapping reducible to B ($A \\leq_{m} B$) if there’s a computable function f between them. f is called a reduction from A to B. If $A \\leq_{m} B$ and B is decidable, A is decidable. If $A \\leq_{m} B$ and A is undecidable, B is undecidable. We can also prove $HALT_{TM}$ to be undecidable by finding a reduction from $A_{TM}$. ($w \\in A_{TM} \\Leftrightarrow f(w) \\in HALT_{TM}$) The language $REGULAR_{TM}=\\{\\langle M \\rangle| \\text{M is a TM and L(M) is a regular language} \\}$ is undecidable. If $A \\leq_{m} B$ and B is Turing-recognizable, A is Turing-recognizable. If $A \\leq_{m} B$ and A is not Turing-recognizable, B is not Turing-recognizable. The language $EQ_{TM}=\\{\\langle M_1, M_2 \\rangle| M_1 \\ M_2 \\text{ are TMs and } L(M_1) = L(M_2) \\}$ is not Turing-recognizable. (Proof by $A_{TM} \\leq_{m} \\overline{EQ_{TM}}$ ($M_1$ rejects everything and $M_2$ accepts if M accepts w.)) ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:2:3","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Complexity Theory ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:3:0","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Time Complexity Measuring Complexity The running time or time complexity of M is the function f(n)’s maximum number of steps that M uses on any input of length n. (Worst case.) Big O and small o: Big O - there exists a number c and $n_0$ Small o - for any c \u003e 0 there exists $n_0$ Polynomial bound and exponential bound: Polynomial bound - $f(n) = O(n^p)$ Exponential bound - $f(n) = 2^{(O(n^\\delta))}$ The time complexity class TIME(t(n)) is the set of all languages that are decidable by an O(t(n)) time single-tape DTM. For every t(n) time deterministic multi-tape TM there exists an equivalent $O(t^2(n))$ time deterministic single-tape TM. This only gives existence. But there can be better implementations. The running time of nondeterministic decider N is the maximum number of steps f(n) uses on any branch. For every t(n) NTM there exists an equivalent $2^{O(t(n))}$ time DTM. (By BFS.) The Class P $P = \\bigcup_{k \\in \\mathbb{N}_0} TIME(n^k)$ The PATH problem/language is The language $PATH=\\{\\langle G,s,t \\rangle| \\text{G is a directed graph that has a path from s to t} \\}$. $PATH \\in P$ (BFS) $RELPRIME =\\{\\langle x,y \\rangle| \\text{x and y are relatively prime} \\}$. $RELPRIME \\in P$ (Euclidean algorithm to find the gcd (log depth, unary -\u003e O(n)).) Every context-free language is in P. (DP.) The Class NP The nondeterministic time complexity class NTIME(t(n)) is the set of all languages that are decidable by an O(t(n)) time NTM. $NP = \\bigcup_{k \\in \\mathbb{N}_0} NTIME(n^k)$ $P \\subset NP$ A verifier for a language A is a deterministic decider $V_A$ that takes as input $\\langle w,c \\rangle$ such that it holds: $w \\in A$ iff there exists c such that $\\langle w,c \\rangle$ is accepted by $V_A$. c is called certificate. $V_A$ is a polynomial time verifier if it has a polynomial running time in the size of its input. A is called polynomially verifiable if there exists a polynomial time verifier for it. An alternative definition for NP: NP is the class of languages for which there exist polynomial time verifiers. There exists a polynomial time verifier for A iff there exists a nondeterministic polynomial time TM that recognizes A. A Hamiltonian path in G is a directed path that goes through each node exactly once. $HAMPATH \\in NP$. A clique is a subgraph such that there exist edges between all paris of nodes. A k-clique is a clique with k vertices. $CLIQUE \\in NP$ $SUBSETSUM \\in NP$ Polynomial Time Reducibility A is polynomial time (mapping) reducible to B ($A \\leq_P B$) if there’s a polynomial time computable function such that $w \\in A$ iff $f(w) \\in B$. If $A \\leq_P B$ and $B \\in P$, then $A \\in P$. NP-completeness A language B is NP-complete if: $B \\in NP$ and $A \\leq_P B$ for all $A \\in NP$ If B is NP-complete and $B \\in P$, then $P = NP$. If B is NP-complete and $B \\leq_P C$ for a $C \\in NP$, then C is also NP-complete. F is satisfiable if F has at least one model. Cook-Levin: $SAT =\\{\\langle F \\rangle| \\text{F is a satisfiable Boolean formula}\\}$ is NP-complete. The proof: $F = F_{cell} \\wedge F_{start} \\wedge F_{move} \\wedge F_{accept}$ $3SAT =\\{\\langle F \\rangle| \\text{F is in 3CNF and is satisfiable} \\}$ is NP-complete. For all boolean formulas F in CNF there exists a boolean formula $F’$ in 3CNF such that F is satisfiable iff $F’$ is satisfiable. $F’$ can be built from F in polynomial time. CLIQUE is NP-complete. (Proof $3SAT \\leq_P CLIQUE$) Hierarchy Theorems Time constructible: f(n) at least $O(n \\log n)$. f is time constructible if a computable function exists that maps the string $1^n$ (the unary representation) to the binary representation of f(n) in time $O(f(n))$. (output could also be unary.) (normal functions are all time constructible) Let f be a time-constructible function. There exists a language A that’s decidable in $O(f(n))$ but not decidable in time $o(f(n)/\\log f(n))$. (By increasing the time complexity by more than a logarithm of it, we increase the size of the time complexity class.) Let $f_1 \\ f_2$ be time-c","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:3:1","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Space Complexity Measuring Space Complexity Space complexity is the maximum number of tape cells that are scanned by M for an arbitrary input o length n. SPACE(f(n)) is the set of all languages decided by $O(f(n))$ DTM. $SAT \\in SPACE(n)$. NSAPCE is the set of all languages decided by $O(f(n))$ NTM. The language $ALL_{NFA}=\\{\\langle A \\rangle| \\text{A is a NFA and } L(A) = \\Sigma^*\\}$. $\\overline{ALL_{NFA}} \\in NSPACE(n)$ f(n) at least $O(\\log n)$. F is space constructible if a computable function exists that maps the string $1^n$ (the unary representation) to the binary representation of f(n) in space $O(f(n))$. Savitch’s Theorem: $NSPACE(f(n)) \\subseteq SPACE(f^2(n))$. Proof: Instead of calculating all branches, ask whether start config yields accepting config and check recursively, which leads to space reuse. PSPACE and Related Classes $PSPACE = \\bigcup_{k} SPACE(n^k)$ (deterministic) $NPSPACE = \\bigcup_{k} SPACE(n^k)$ (non-deterministic) $PSPACE = NPSPACE$ $P \\subseteq PSPACE$ and $NP \\subseteq NPSPACE$ and $NP \\subseteq PSPACE$. PSPACE-complete if: $B \\in PSPACE$ and $A \\leq_p B$ for all $A \\in PSPACE$ (only poly-time reduction; using poly-space would be as hard as the full class) The language $TQBF=\\{\\langle F \\rangle| \\text{F is a true fully quantified Boolean formula}\\}$ is PSPACE-complete. $P \\subseteq NP \\subseteq PSPACE = NPSPACE \\subseteq EXPTIME$ (one of this subsets have to be a proper subset due to $P \\subsetneq EXPTIME$) ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:3:2","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"References Introduction to the Theory of Computation by Michael Sipser Course slides/notes from Prof. Dr. Peter Zaspel at Jacobs University Bremen. ","date":"May 24, 2020","objectID":"/posts/2020-05-24-Computability-and-Complexity-Notes/:4:0","tags":["Computer Science"],"title":"Computability and Complexity Notes","uri":"/posts/2020-05-24-Computability-and-Complexity-Notes/"},{"categories":null,"content":"Course notes for Computer Networks at Jacobs University Bremen","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":" Introduction Internet Concepts and Design Principles Structure and Growth of the Internet Internet Programming with Sockets Fundamental Concepts Classification and Terminology Communication Channels and Transmission Media Media Access Control Transmission Error Detection Sequence Numbers, Acknowledgements, Timer Flow Control and Congestion Control Layering and the OSI Reference Model Local Area Networks Local Area Networks Overview Ethernet Bridges Virtual LAN Port Access Control Wireless LAN Internet Network Layer Concepts and Terminology IPv6 IPv4 Internet Routing Distance Vector Routing (RIP) Link State Routing (OSPF) Path Vector Policy Routing (BGP) Internet Transport Layer (UDP, TCP) Transport Layer Overview UDP TCP Firewalls and Network Address Translators Middleboxes Firewalls Network Address Translators Domain Name System (DNS) Overview and features Resource Records Message Formats Security and Dynamic Updates Creative Usage Augmented Backus Naur Form (ABNF) Basics, Rule Names, Terminal Symbols Operators Electronic Mail (SMTP, IMAP) Components and Terminology Simple Mail Transfer Protocol (SMTP) Multipurpose Internet Mail Extensions (MIME) Internet Message Access Protocol (IMAP) Filtering of Messages (SIEVE) HyperText Transfer Protocol (HTTP) URLs, URNs, URIs, IRIs HTTP 1.1 Methods HTTP 1.1 Features HTTP 2.0 Multimedia over the Internet Voice over IP Real-Time Transport Protocol (RTP) Session Initiation Protocol (SIP) References ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:0:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Introduction This is the course notes for Computer Networks at Jacobs University Bremen. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:1:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Concepts and Design Principles Internet Addresses: Leading nulls in IPv6 addresses can be omitted and two consecutive colons can represent a sequence of nulls: 2001:00db8:0000:0000:0000:0000:0000:0001 can be written as 2001:db8::1 IPv6 addresses have 16 bytes (4 x 8 groups); IPv4 addresses have 4 bytes. Autonomous Systems: An AS is a set of routers and networks under the same administration. IP packets are forwarded between ASs by EGP (Exterior Gateway Protocol); within an AS, it’s IGP (Interior Gateway Protocol) The Internet is a collection os ASs. There’s no central authority. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:1:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Structure and Growth of the Internet Internet Exchange Points (IXPs) are switching hubs where many Internet Service Providers (operating ASs) connect in order to exchange internet traffic. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:1:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Programming with Sockets Sockets are abstract communication endpoints with a rather small number of associated function calls. Connection-less vs connection-oriented communication Connection-oriented communication requires a establishment and a teardown. Most of the Internet traffic is using this. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:1:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Fundamental Concepts ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Classification and Terminology Communication modes: Unicast - 1:1 Multicast - 1:n Concast - n:1 Multipeer - m:n Anycast - 1: nearest receiver Broadcast - 1: all Geocast - 1: n in a region Communication protocols define the syntax and semantics of messages. Circuit vs packet switching: Circuit switching: create and remove (virtual) circuit (e.g. the telephone network) Packet switching: data is carried in packets (e.g. Internet) Connection-oriented vs connection-less: Connection-oriented: stateful (e.g. fetching a Web page) Connection-less: stateless (e.g. Internet name lookups) Data vs. control vs. management plane: Data plane: forwarding of data (hardware) Control plane: telling the data plane how to forward data (routers and switches) Management plane: configuration and monitoring of data and control planes (may involve humans) Topologies: Star; Ring; Meshed Network; Bus; Line. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Communication Channels and Transmission Media Signals are in general modified during transmission, leading to transmission errors. Data rate (bit rate) vs bit time: Bit time is the time needed to transmit a single bit (1 microsecond for 1 Mbit/s) Delay is the time needed to transmit a message from the source to the sink. It consists of transmission delay and propagation delay. Bit error rate is the probability of a bit being changed during transmission. Simple wires can easily experience crosstalk caused by capacitive coupling. Transmission impairments: Attenuation Delay distortion (different frequencies arrive at different time) Noise ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Media Access Control Media access control - shared transmission media require coordinated access to the medium. Frequency division multiplexing (FDM): simultaneous signals in different frequency bands. Wavelength division multiplexing (WDM): different wavelengths at the same time. Time division multiplexing (TDM): signals are assigned to specific time slots. Pure aloha - sends data as soon as data becomes available (not very efficient) Slotted aloha - sends do not send immediately but wait for the beginning of a time slot - (slightly more efficient) Carrier sense multiple access (CSMA) - sense the media whether it’s unused before starting a transmission. CSMA with collision detection (CSMA-CD) - terminates the transmission as soon as a collision has been detected (and retries after some random delay). Multiple access with collision avoidance (MACA) - sends RTS (ready to send) and CTS (clear to send) Token passing - a token is a special bit pattern circulating between stations (only the station holding the token is allowed to send data). ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Transmission Error Detection Simple parity bits can be added to code words to detect bit errors. Cyclic redundancy check (CRC) uses polynomials (1101 = $x^3+x^2+1$) Divide the message with the generator, if the remainder is 0, we assume no transmission error. Otherwise, add the remainder to the message to get the real bit sequence. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:4","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Sequence Numbers, Acknowledgements, Timer Errors: Bit errors Loss of complete data frames Duplication of complete data frames Receipt of data frames that were never sent Reordering of data frames during transmission End-to-end flow control - the sender must adapt its speed to the speed of the receiver. Congestion control - the sender must react to congestions. The sender assigns growing sequence numbers to all data frames to deal with the errors above. The receiver sends ACK to handle errors. ACK: positive acknowledgement NACK: negative acknowledgement Stop-and-wait protocol - a frame is only transmitted if the previous frame was acknowledged. A send can also use a timer to retransmit a frame if no ACK has been received in time. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:5","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Flow Control and Congestion Control Flow control - allows the sender to send multiple frames before waiting for ACKs. Sliding window flow control - the size of the window and the speed of the sender must match the buffer capacity of the receiver. For the send: LFS - LAR + 1 \u003c= SWS (last frame sent, last ACK received, send window size) For the receiver: LFA - NFE + 1 \u003c= RWS (last frame acceptable, next frame expected, receive window size) Congestions control is used to adapt the speed of the sender to the speed of the network. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:6","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Layering and the OSI Reference Model Protocol data units (PDUs) are exchanged between peer entities; service data units (SDUs) are exchanged between layers (services). The Open systems interconnection model (OSI model): (layer 7 -\u003e layer 1) Application Presentation - data compression/integrity services etc. Session - security services Transport - communication channels Network - determination of paths Data link - transmission of bit sequences in so called frames Physical - transmission of an unstructured bit stream ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:2:7","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Local Area Networks ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Local Area Networks Overview IEEE 802 addresses (MAC addresses) are 6 octets (48 bits) long. It’s usually separated using colons or hyphens (00:D0:59:5C:03:8A) The highest bit indicates whether it’s unicast (0) or multicast (1) The broadcast address is FF-FF-FF-FF-FF ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Ethernet Classic Ethernet usd CSMA/CD and shared bus. Today’s Ethernet uses a star topology with full duplex links. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Bridges Source routing bridges - sender routes the frame through the bridged network. Transparent bridges - bridges are transparent to senders and receivers. Look up an entry in the forwarding DB (entry added when a frame is received) and forward the frame to the port. If not matching entry exists, do flooding - forward the frame to all outgoing ports except the port from which the frame was received. Port states: Blocking Listening Learning Forwarding Disabled A bridged LAN has a single broadcast domain - frames sent to this address will be forwarded on all links. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Virtual LAN VLANs provide a separation of logical LAN topologies from physical LAN topologies, which separates the traffic and reduces the network load. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:4","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Port Access Control Port-based network access control grants access to a switch port based on the identity of the connected machine. Components: Supplicant - on a machine Authenticator - on a bridge Authentication server ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:5","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Wireless LAN Data frames - “useful” payloads Control frames - facilitates the exchange of data frames RTS \u0026 CTS ACK Management frames - maintenance of the network ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:3:6","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Network Layer The Internet network layer provides a packet-oriented connection-less data exchange function. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:4:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Concepts and Terminology Terminology: Node - a device which implements an Internet Protocol. Router - a node that forwards IP packets not addressed to itself. Host - any node that’s not a router. Link - a communication channel. Neighbors - the set of all nodes attached to the same link. Interface - a node’s attachment to a link. IP address - identifies an interface or set of interfaces. IP prefix - the initial part of an IP address identifying an IP network. IP packet - a bit sequence of an IP header and the payload. Link MTU - maximum transmission unit (max packet size) on a link. Path MTU - min link MTU of all the links in a path. Calculate the available addresses: IPv4 - $2^{32-prefix} - 2$ IPv6 - $2^{128-prefix} - 2$ we use longest prefix match for IP forwarding in a forwarding table. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:4:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"IPv6 Error handling - ICMPv6 (Internet Control Message Protocol Version 6). ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:4:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"IPv4 Error handling - ICMPv4. IPv4 fragmentation - IPv4 packets that do not fit the link MTU will get fragmented into smaller packets. It is considered harmful. Dynamic Host Configuration Protocol (DHCP) allows nodes to retrieve configuration parameters from a central configuration server. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:4:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Routing ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:5:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Distance Vector Routing (RIP) Routing Information Protocol (RIP) is a simple distance vector routing protocol that uses Bellman-Ford. Count-to-infinity will cause the costs to reach infinity. (A – B – C, A–B breaks, B -\u003e C -\u003e A, C updates the hop count) Split horizon - nodes never announce the reachability. Doesn’t solve count-to-infinity. Split horizon with poisoned reverse - nodes announce the unreachablility to neighbors. - Doesn’t solve count-to-infinity for all cases since the exchange of distance vectors is not synchronized to a global clock. RIP runs on UDP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:5:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Link State Routing (OSPF) Open Shortest Path First (OSPF) is a link state routing protocol that uses Dijstra. It’s used for IS-IS (intermediate system to intermediate system). Router classification: Internal Area Border Backbone AS Boundary Stub areas are areas with a single area boarder router. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:5:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Path Vector Policy Routing (BGP) Border Gateway Protocol (BGP) is a path vector policy routing protocol that propagates reachability info between ASs. AS categories: Stub - only one peering relationship with one other AS. It only carries local traffic. Multihomed - peering relationships with more than one other ASs. It refuses to carry transit traffic. Transit - peering relationships with more than one other ASs. It’s designed to carry both local and transit traffic. BGP doesn’t suffer from count-to-infinity. The AS path info allows to detect loops. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:5:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Transport Layer (UDP, TCP) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:6:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Transport Layer Overview The transport layer provides communication services for apps running on hosts. Network layer addresses identify interfaces on nodes (node-to-node significance); Transport layer addresses identify communicating app processes (end-to-end significance). UDP provides a simple unreliable best-effort datagram service. TCP provides a bidirectional, connection-oriented and reliable data stream. Stream Control Transmission Protocol (SCTP) and Datagram Congestion Control Protocol (DCCP). ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:6:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"UDP UDP datagrams can be multicasted to a group of receivers. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:6:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"TCP Header fields: Sequence Number: the sequence number of the first data byte in the segment. ACK: the next sequence number which the sender of the ACK expects. Window: the number of data bytes the sender is willing to receive (the window starts with the ACK). Flags: ACK - indicates the ACK number filed is significant SYN - synchronization of sequence numbers FIN - no more data from sender Connection establishment: Handshake protocol establishes the connection Guarantees correct connection. even if packets are lost or duplicated. Connection Tear-down - bidirectional Flow control - both TCP engines advertise the buffer sizes during connection establishment. TCP congestion control: Fundamentally important to avoid a collapse of the Internet. Congestion window (cwnd) defines how much data can be in transit. It’s maintained by a TCP sender in addition to the flow control receiver window (rwnd). The sender uses the two windows to limit the flightsize (the data sent but not yet received) to the minimum of the windows. Retransmission timer controls when a segment is resent if no ACK has been received. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:6:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Firewalls and Network Address Translators ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:7:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Middleboxes A middlebox ia any intermediary device performing functions other than the normal standard functions of an IP router. It challenges the End-to-End principle. Types of middleboxes: Network Address Translators (NAT): a function that dynamically assigns a globally unique address to a host. IP Firewalls Proxies … ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:7:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Firewalls Firewall is a system that enforces access control policies between networks. Conservative firewalls allow known desired traffic and reject everything else. Optimistic firewalls reject known unwanted traffic and allow the rest. Firewalls typically consist of packet filters, transport gateways, and application level gateways. Firewall architectures: Screening router: the simplest - with a packet filter. Bastion host: a multihomed host which doesn’t forward IP datagrams. but instead provide suitable gateways. - prevents direction host communication. Two packet filters which create a demilitarized zone (DMZ) - most common. Externally visible servers and gateways are in the DMZ. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:7:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Network Address Translators Basic NAT: translates private IP address to public IP address. Network Address Port Translation (NAPT): translates transport endpoint identifiers. It allows to share a single public address among many private addresses (masquerading). Full cone NAT is a NAT where all requests from the same internal IP address and port are mapped to the same external IP address and port. Any external host can send a packet to the internal host by sending a packet to the mapped external address. Restrict cone NAT: unlike full cone, an external host (with IP address X) can send a packet to the internal post only if the internal host had previously sent a packet to IP address X. Port restricted cone NAT also includes the restriction for the port number. Symmetric NAT: only the external host that receives a packet can send a UDP packet back to the internal host. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:7:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Domain Name System (DNS) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Overview and features DNS provides a global infrastructure to map human friendly domain names into addresses. - name resolution. The resolver is typically tightly integrated into the OS or more precisely the standard libraries. Most hosts do not resolve names themselves but instead the resolver is sending recursive queries to a domain name resolver. Administration of the name space can be delegated. The original DNS protocol doesn’t provide sufficient security. There’s no reason to trust DNS responses. DNS labels are case-insensitive. The absolute paths ending at the virtual root node end with a trailing dot. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Resource Records Resource Records (RRs) hold typed info for a given name with the components: Owner - domain name Type - A(IPv4 address)/AAAA(IPv6 address)/CNAME(Canonical Name)/HINFO(Host Info)/MX(Mail Exchanger)/NS(authoritative server)/PTR(pointer to another part of the name space)/SOA(Start Of zone of Authority) Class - IN for Internet Time to Life (TTL) - how many second info can be stored in a local cache (how long the response record is valid) Data Format (RDATA) - depends on the type ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Message Formats Protocol header + questions + answers (RRs) + pointers to authorities + additional info. Simple DNS queries usually use UDP - low overhead, which is important for resolvers that may need to contact many DNS servers. For large data transfers, DNS may utilize TCP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Security and Dynamic Updates Resource Record Signature (RRSIG) RR stores digital signatures. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:4","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Creative Usage DNS Blacklists (email spam with A and TXT) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:8:5","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Augmented Backus Naur Form (ABNF) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:9:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Basics, Rule Names, Terminal Symbols A text-based encoding of protocol messages are programmer readable byt less efficient. ABNF is used to formally specify textual protocol messages. It consists of set of rules (productions) Comments start with ;. The name of a rule must start with an alphabetic character. Terminal symbols are non-negative numbers. We can use . as concatenation and - as a value range operator. They can also be defined by ASCII characters in double quotes. %s - case sensitive; %i - case insensitive (the default). ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:9:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Operators Concatenation: empty word Alternatives: / Grouping: () Repetitions: n*m (n and m are optional) n is the min (default 0) and m (default inf) is the max for repetitions Optional: [] [ab] = *1(ab) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:9:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Electronic Mail (SMTP, IMAP) ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Components and Terminology Terminology: Mail User Agent (MUA) - source or target Mail Transfer Agent (MTA) - server and clients that transport Mail Delivery Agent (MDA) - delivers to the mailbox ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Simple Mail Transfer Protocol (SMTP) It’s running over TCP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Multipurpose Internet Mail Extensions (MIME) MIME supports multiple different char sets, different media types, etc. MIME is widely implemented and not only for mail. MIME boundaries: a delimiter consist of two dashes followed by the boundary. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Internet Message Access Protocol (IMAP) IMAP allows a client to access and manipulate mail messages stored on a server. It’s on TCP. It’s strongly suggested to use TLS to encrypt. IMAP supports asynchronous, concurrent operations. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:4","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Filtering of Messages (SIEVE) SIEVE can either be implemented on the client or the server. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:10:5","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"HyperText Transfer Protocol (HTTP) HTTP runs on TCP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:11:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"URLs, URNs, URIs, IRIs URI - Uniform Resource Identifier URL - Uniform Resource Locator A subset of URIs URN - Uniform Resource Name A subset of URIs wih globally unique and persistent name. IRI - Internationalized Resource Identifier ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:11:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"HTTP 1.1 Methods Methods: GET - retrieve a resource HEAD - retrieve meta-info POST - annotate an existing resource by passing info to it PUT - store info (may create a new resource) DELETE - delete the resource OPTIONS - request info about methods supported TRACE - loopback for testing CONNECT - init a TLS/SSL tunnel Safe methods Safe methods are intended only for information retrieval and should not change the state of the server. They should have no side effects beyond logging GET, HEAD, OPTIONS, TRACE Idempotent methods Idempotent methods can be executed multiple times without producing results that are different from a single execution. PUT, DELETE POST, CONNECT are not idempotent. Supporting caches well is a fundamental goal of HTTP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:11:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"HTTP 1.1 Features Persistent connections and pipelining. (Make multiple requests without waiting for each response.) Chunked transfer encoding. Caching and proxies - most interesting and complex part of HTTP. Negotiation Conditional requests Entity tags (ETag) is an opaque identifier assigned by a web server to a specific version of resource found at a URL. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:11:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"HTTP 2.0 HTTP/1.0 - separate TCP connection for every resource request HTTP/1.1 - persistent connections and pipelining \u0026 conditional requests HTTP/2 - header compression \u0026 multiplexing \u0026 server push into client caches ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:11:4","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Multimedia over the Internet ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:12:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Voice over IP UDP can be used. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:12:1","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Real-Time Transport Protocol (RTP) End-to-end real-time data. Commonly used over UDP. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:12:2","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"Session Initiation Protocol (SIP) Create, modify, and terminate sessions with one or more participants. ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:12:3","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"References https://cnds.jacobs-university.de/courses/cn-2019/ ","date":"May 22, 2020","objectID":"/posts/2020-05-22-Computer-Networks-Notes/:13:0","tags":["Computer Science"],"title":"Computer Networks Notes","uri":"/posts/2020-05-22-Computer-Networks-Notes/"},{"categories":null,"content":"This is the course notes for Software Engineering at Jacobs University Bremen.","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":" Introduction Intro Socio-Technical Systems The Software Lifecycle Software Lifecycle Requirements Engineering UML Design Patterns Compiling and Linking Defensive Programming Configuration, Version, and Release Management Software Testing Web and Other Applications Application Architectures GUI Technology Web-Enabled Information Systems UI Design Web Design Project and Process Management Project Management Software Process Models Security ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:0:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Introduction This is the course notes for Software Engineering at Jacobs University Bremen. ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:1:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Intro The code-and-fix cycle: Maintainability and reliability decrease continuously (entropy). If the programmer leaves, all know-how leaves. If the developer is not the user, we get frequent dissent about expectations vs implementations. Common problems: Complexity Integration requirements Quality requirements Flexibility requirements Portability and internationalization requirements Organizational requirements Communication problems/ bad project management Software engineering is multi-person construction of multi-version software Software = programs + documentation System engineering = hardware + software + process engineering Good software delivers functionality and performance that is (MEDA) Maintainable Efficient Dependable Acceptable ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:1:1","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Socio-Technical Systems System = software + hardware + people System categories: Technical = software + hardware Socio-technical = technical systems + operational processes \u0026 people Socio-technical system characteristics: Emergent properties Non-deterministic Partially dependent on human operators + a time-varying environment Complex relationships with organizational objectives ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:1:2","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"The Software Lifecycle ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Software Lifecycle Requirements Engineering Design Coding Verification \u0026 Testing Deployment \u0026 Maintenance ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:1","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Requirements Engineering Requirements engineering = services + constraints Types of requirements: User requirements - understandable by users (UML) System requirements Another way of classification: Functional requirements Non-functional requirements - properties + constraints Domain requirements ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:2","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"UML Use case diagrams Use case = a chunk of functionality Actor = someone/something that interacts with the system Activity diagrams Represents the overall flow of control User-perceived actions Class diagrams: https://creately.com/blog/diagrams/class-diagram-relationships/ Relationships: Association - connection Aggregation - stronger: HAS-A Dependency - weaker Arrow head means it’s traversable only this direction Sequence diagrams: object interactions in a time sequence Actors + system components (unlike activity diagrams) State transition diagrams: lifecycle of a given class Alternative: DSLs (domain specific modelling languages) Better used for embedded systems ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:3","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Design Patterns Pattern = description + essence of its solution Design pattern = re-using abstract knowledge; generic, reusable design templates for OOP Singleton: ensure a class has only one instance and provide a global access point Observer: separate the display of object state from the object itself Mediator: define an object that encapsulates how a set of objects interact Loose coupling Facade: a unified interface to a set of interfaces in a subsystem Loose coupling Proxy: a surrogate or placeholder for another object to control access to it Adapter: let classes work together that could not otherwise because of incompatible interfaces Composite: compose objects into tree structures to represent part-whole hierarchies Types: Creational Structural Behavioral ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:4","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Compiling and Linking source + header files -\u003e Preprocessor -\u003e source -\u003e compiler -\u003e object code -\u003e linker -\u003e executable Preprocessor: textual substitution (with directives #) Object files contain code for a program fragment. Name mangling (name decoration): compiler modifies names to make them unique Linker generates one executable from several object and library files. Strip: By default, executables contain symbol tables which allows reverse engineering and makes the code files substantially larger. Strip executables before shipping Library = archive file containing a collection of object files Object files are linked in completely, from library only what is actually needed ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:5","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Defensive Programming Defensive programming intends to ensure the continuing function of the software despite the unforeseeable usage. - Defend against errors (avoid bugs) Invariants: Loop invariants Class invariants: true before and after each method call Method invariants: meet the pre and post conditions - part of design-by-contract (methods are contracts with the user) Ways of enforcing invariants Assertions Exceptions Return codes Structured programming: only use a small set of programming constructs Good: sequence, condition, repetition Bad: goto, break, continue Code guide = uniform style + best practice ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:6","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Configuration, Version, and Release Management Software configuration management (SCM) is the discipline of controlling the evolution of software systems. Three classic problems: The double maintenance problem The shared data problem The simultaneous update problem A delta is a difference between two revisions. Terminology: Release: a version that’s available to user/client Configuration: combination of components into a system according to case-specific criteria Baseline: a static reference point Configuration models: Composition model = set of objects – module oriented Change set model = bundle of changes – dynamic Long transaction model = all changes all isolated into transactions – collaborative ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:7","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Software Testing Software testing: find errors before delivering to the end user. Unit testing: (code) Test driver = dummy environment Test stub = dummy methods Equivalence class testing: build equivalence classes and test one candidate per class. Integration testing: (design) Test interactions among units (e.g. type compatibility) System testing: (requirements) Determine whether system meets requirements Focus on use \u0026 interaction Alpha \u0026 Beta testing Acceptance testing: (users’ need) Get approval from customers Testing methods: Static testing - without executing the software Static analysis = control flow + data flow analysis Formal verification Dynamic testing - with executing the software Black-box testing: spec based White-box testing: look inside to check all statements \u0026 conditions have been executed at least once Coverage analysis: measures how much of the code has been exercised Statement vs decision vs path coverage Independent paths V(G) = number of simple decisions + 1 or number of enclosed areas + 1 C0 = every instruction; C1 = every branch; C2, C3 - every condition once true once false; C4 path coverage; Rule of thumb: 95% C0, 70% C1 Memory leaks: Stack: automatic management Heap: explicit allocation and deallocation Performance profiling: benchmark execution to understand where time is being spent Regression testing: run tests and compare the output to same tests on the previous code version ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:2:8","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Web and Other Applications ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Application Architectures Application Types Data processing Transaction processing Event processing Language processing ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:1","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"GUI Technology Sequential programs Modern GUI: Event-driven: the program waits on the user instead of the other way around All events go to a single event queue Widgets (window gadget): reusable interactive object Handle events Update appearance Generate new events Send to listeners (custom code) Interactor Tree: decompose interactive objects into a tree Model-View-Controller: Model = information the app is manipulating (representation of real world objects) View = a visual representation of the model View will be notified if there are changes for the model Controller: Receives input events Decides what to do Communicates with the view to select the objects Calls model methods to make changes Why? Combining MVC into one class will not scale Separation eases maintenance ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:2","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Web-Enabled Information Systems Three-Tier Architecture: Presentation tier Middle tier Data management tier ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:3","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"UI Design UI should match skills, experience, and expectations of its anticipated users. The human factors;: Limited short-term memory People make mistakes People are different People have different interaction preferences Pressman’s Golden Rules: Place user in control Reduce user’s memory load Make interface consistent UI design involves: User analysis System prototyping Prototype evaluation ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:4","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Web Design Principles: Anticipation Communication Consistency Controlled autonomy Efficiency ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:3:5","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Project and Process Management ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:4:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Project Management Activity organization: Activities should produce tangible outputs at well-defined points Milestones: end-point of a process activity Deliverables: projects results Rules: Design tasks as self-contained units with clear goals Concurrent tasks Minimize dependencies Task \u0026 Activity Flow Chart = Project Evaluation and Review Technique (PERT chart) - shows relationships between activities. PMs do planning, estimating, and scheduling. ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:4:1","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Software Process Models Waterfall Model: Partitioning into distinct stages - inflexible Few business systems have stable requirements Only appropriate when requirements are well-understood and fairly stable Incremental Methods: Break into increments User requirements are prioritized The requirements are frozen once the increment is started Early increments act as a prototype which helps elicit requirements for later increments Lower risk of failure Agile/XP Methods, Scrum The agile manifesto: value individuals and interactions over processes and tools working software over comprehensive documentation customer collaboration over contract negotiation responding to change over following a plan Principles: (CIPCS) Customer involvement Incremental delivery People, not process Embrace change Maintain simplicity Extreme programming: very small increments (constant code improvement (refactoring)) Iterative/Spiral Methods: Loop = one phase No fixed phases Evolutionary Development: Evolve final system from initial outline spec Throw-away prototyping - start with poorly understood requirements Good for well isolated parts (UI) Lack of process visibility Often poorly structured Use incremental dev for best understood requirements and throw-away prototyping for poorly understood. Capability Maturity Model Integration: CMM Levels: Initial Managed Defined Quantitatively Managed Optimizing CMMI Components: 24 process areas Goals Practices ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:4:2","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Security Motivation (objectives): Secrecy - users should not be able to see things they are not supposed to Integrity - users should not be able to modify things they are not supposed to Availability - users should be able to see and modify things they are allowed to 3P security management: process; people; probing your defences ","date":"May 21, 2020","objectID":"/posts/2020-05-21-Software-Engineering-Notes/:5:0","tags":["Software Engineering"],"title":"Software Engineering Notes","uri":"/posts/2020-05-21-Software-Engineering-Notes/"},{"categories":null,"content":"Some notes for basic machine learning concepts.","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":" Introduction Types of Learning Supervised learning Unsupervised learning Semi-supervised learning Reinforcement learning Notations and Definitions Statistical Decision Theory Fundamental Algorithms Linear Regression Logistic Regression Decision Tree Learning Support Vector Machine Dealing With Noise Dealing with Inherent Non-Linearity (Kernels) k-Nearest Neighbors (kNN) Anatomy of a Learning Algorithm Building blocks Gradient Descent Particularities Basic Practice Feature Engineering One-Hot Encoding (Categorical -\u003e Numerical) Binning (Bucketing) (Numerical -\u003e Categorical) Normalization Standardization (Z-score Normalization) Dealing with Missing Features Learning Algorithm Selection Three Sets Underfitting and Overfitting Regularization Shrinkage: Ridge Regression Model Performance Assessment Confusion Matrix Precision/Recall Accuracy Cost-Sensitive Accuracy Area under the ROC Curve (AUC) Hyperparameter Tuning Training Error Generalization/Test Error Validation Set Error Estimation Cross-Validation Neural Networks and Deep Learning Neural Networks Multilayer Perceptron (Vanilla Neural Network) Feed-Forward Neural Network Architecture Deep Learning Convolutional Neural Network Recurrent Neural Network Problems and Solutions Basis Expansions Regression with Gaussian Kernel Kernel Regression Classification Linear Discriminant Analysis Ensemble Learning Boosting and Bagging Random Forest Unsupervised Learning Density Estimation Clustering K-Means Dimensionality Reduction Principal Component Analysis (PCA) References ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:0:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Introduction This post is about some basic machine learning concepts. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:1:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Types of Learning Supervised learning In a feature vector $x_i$ (i=1…N), a single feature is denoted by $x^j$ (j=1…D). And $y_i$ is the label. The goal is to produce a model that takes a feature vector x as input and outputs the label. Unsupervised learning The goal is either to transform the input feature vector into another vector (dimensionality reduction) or into a value (clustering, outlier detection). Semi-supervised learning The dataset has both labeled and unlabeled (much higher quantity) data. The same goal as supervised learning. The hope is that the unlabeled data can help produce a better model. This is because a larger sample reflects better the probability distribution of the source of the labeled data. Reinforcement learning It perceives the state of the environment as a feature vector and then execute actions in every state, which bring rewards and move the machine to another state. The goal is to learn a policy: a function that takes the feature vector as input and outputs an optimal action that maximizes the expected average reward. It’s suited for problems whose decision making is sequential and the goal is long-term. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:1:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Notations and Definitions $x_{l,u}^{(j)}$ in a neural net means the feature j of unit u in layer l. $x$ is by default a column vector and $x^T$ a row vector. When vector is on the left side of a matrix, we usually do $x^TA$. $argmax_{a \\in A}f(a)$ returns the element a of the set A that maximizes f(a). $\\mathbb{E}[\\hat\\theta(S_X) = \\theta]$, where $\\hat\\theta(S_X)$ is the unbiased estimator of some statistic $\\theta$ (e.g. $\\mu$) calculated using a sample $S_X$. A hyperparameter is a parameter whose value is set before the learning process begins. By contrast, the values of other parameters are derived via training. Model-based learning vs instance-based learning: Model-based: creates a model with parameters learned from the data. (Most supervised learning algorithms) Instance-based: uses the whole dataset as the model. Instead of performing explicit generalization, it compares new problem instances with instances seen in training (e.g. kNN). Shallow vs deep learning: Shallow learning: learns the parameters of the model directly from the features of the training examples. Deep (neural network) learning: uses neural nets with more than one layer and learns the parameters from the outputs of the preceding layers instead. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:2:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Statistical Decision Theory Quantitative outputs are called $Y$ with $Y = (Y_1,…,Y_K)^T$; and qualitative outputs are called $G$ with $G = (G_1,…,G_K)^T$ (group). Loss functions: $$L_2(y, y’) = (y-y’)^2$$ $$L_{0-1}(g, g’) = 0 \\ (g=g’) \\ or \\ 1 \\ (g\\neq g’)$$ $$L_1(y,y’) = |y-y’|$$ Expected prediction error (EPE): $$EPE(f)=E(L_2(Y,f(X)))$$ $$EPE(f)=E(L_{0-1}(G,f(X)))$$ The function f that minimizes EPE is give by: ($E(Y|X=x)$ is called a regressor/regression function) $$f(x)=E(Y|X=x)$$ Bayes classifier: $$f(x)=argmin_{g \\in R_G}[1-p(g|x)] \\Rightarrow$$ $$f(x)=\\mathbf{g} \\ if \\ p(\\mathbf{g}|x) = \\max_{g \\in R_G}p(g|x)$$ Expected squared prediction error of $\\hat f$ at location $x_0$: $$EPE(\\hat f, x_0)=E(L_2(Y,f(X))|X=x_0)$$ Error = Irreducible Error + $\\text{Bias}^2$ + Variance ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:2:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Fundamental Algorithms ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Linear Regression We want a model as a linear combination of features of example x ($w$ is a D-dimensional vector of parameters and b is a real number.): $$f_{w,b}(x) = wx+b$$ We find the optimal values $w^{*}$ and $b^{*}$ by minimizing the cost function below (the empirical risk - the average loss): $$\\frac{1}{N}\\sum_{i=1…N}(f_{w,b}(x_i)-y_i)^2$$ Overfitting: a model that predicts well for the training data but not for data unseen during training. Linear regression rarely overfits. The squared loss is used since it’s convinent. The absolute loss function doesn’t have a continuous derivative, which makes it not smooth. Unsmooth functions create difficulties for optimization problems in linear algebra. To find the extrema (minima or maxima), we can simply set the gradient to zero. The linear model is an approximation for the regressor $E(Y|X)$ of the form: ($\\beta_0$ is the intercept or bias) $$f_{\\beta}(X) = \\beta_0+\\sum_{j=1}^DX_j\\beta_j$$ By using $\\beta = (\\beta_0,…,\\beta_D)^T$ and $Z=(1,X_1,…,X_D)^T$, we can rewrite the model to: $$f_{\\beta}(Z)=Z^T\\beta$$ The least squares estimator (parameter estimator $\\gamma$): $$\\gamma = argmin_{\\gamma}\\sum_{i=1}^N(y_i-f_{\\gamma}(x_i))^2$$ Solution for the estimator: The algorithm: Find local minimum/maximum: $$M \\ \\text{positive definite} \\Leftrightarrow x^TMx\u003e0 \\ \\text{for all }x \\in \\mathbb{R}^n \\backslash \\mathbf{0}$$ $$M \\ \\text{negative definite} \\Leftrightarrow x^TMx\u003c0 \\ \\text{for all }x \\in \\mathbb{R}^n \\backslash \\mathbf{0}$$ Statistical analysis with the additive noise: For a K-dimensional output: ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Logistic Regression Logistic regression is not a regression, but a classification learning algorithm. The names is because the mathematical formulation is similar to linear regression. The standard logistic function or the sigmoid function: $$f(x)=\\frac{1}{1+e^{-x}}$$ The logistic regression model: $$f(x)=\\frac{1}{1+e^{-(wx+b)}}$$ For binary classification, we can say the label is positive if the probability is higher than or equal to 0.5. We optimize by using the maximum likelihood (the goodness of fit) ($y_i$ is either 0 or 1): $$L_{w,b}=\\prod_{i=1…N}f_{w,b}(x_i)^{y_i}(1-f_{w,b}(x_i))^{1-y_i}$$ In practice, it’s more convenient to maximize the log-likelihood (since ln is a strictly increasing function, maximizing this is the same as maximizing its argument): $$LogL_{w,b}=ln(L_{w,b})=\\sum_{i=1}^Ny_iln(f_{w,b}(x_i)) + (1-y_i)ln(1-f_{w,b}(x_i))$$ Unlike linear regression, there’s no closed form solution. A typical numerical optimization procedure is gradient descent. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Decision Tree Learning If the value is below a specific threshold, the left branch is followed. Otherwise, the right branch is followed. The decision is made about the class when the leaf node is reached. We consider ID3 (Iterative Dichotomiser 3), which also optimizes the average log-likelihood like logistic regression. It does some approximately by constructing a nonparametric model $f_{ID3} = Pr(y=1|\\mathbf{x})$. Entropy is a measure of uncertainty about a random variable. We find a split that minimizes the entropy. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:3","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Support Vector Machine The model $f(\\mathbf{x}) = sign(\\mathbf{w^{*}x} - b^{*})$ (sign returns +1 if it’s positive and -1 if it’s negative) (The sign * means the optimal value.) We prefer the hyperplane with the largest margin, which is the distance between the closest examples of two classes. A large margin contributes to a better generalization. We achieve this by minimizing the norm of $\\mathbf{w}$: $||\\mathbf{w}||$. Dealing With Noise We can use the hinge loss function: $\\max (0, 1 - y_i(\\mathbf{wx}_i - b))$ for data that’s not linearly separable. Dealing with Inherent Non-Linearity (Kernels) The kernel trick: use a function to implicitly transform the original space into a higher dimensional space during the cost function optimization. (We hope that data will be linearly separable in the transformed space). We use kernel functions or simply kernels to efficiently work in higher-dimensional spaces without doing this transformation explicitly. By using the kernel trick, we get rid of a costly transformation to the higher dimension and avoid computing their dot-product. We can use the quadratic kernel $k(x_i, x_k) = (x_ix_k)^2$ here. Another widely used kernel is the RBF (radial basis function) kernel: $k(x, x^{’}) = exp(-\\frac{||x-x^{’}||^2}{2\\sigma^2})$. It has infinite dimensions. We can vary the hyperparameter $\\sigma$ and choose wether to get a smooth of curvy decision boundary. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:4","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"k-Nearest Neighbors (kNN) kNN is a non-parametric learning algorithm. Contrary to other learning algorithms that allow discarding the training data after the model is built, kNN keeps all training examples in memory. The closeness of two examples is given by a distance function. Other than the Euclidean distance, we could also use the cosine similarity function ($0^{\\circ}: 1; 90^{\\circ}: 0; 180^{\\circ}: -1$). Algorithms The bias-variance decomposition: The bias-variance trade-off: k=1: if $x_0$ is in the training data, the bias = 0; the largest variance. (similar to overfitting) k=N: the largest bias (the predictor is constant); the smallest variance. (similar to underfitting) ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:3:5","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Anatomy of a Learning Algorithm ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:4:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Building blocks A loss function An optimization criterion based on the loss function (e.g. a cost function) An optimization routine leveraging training data to find a solution to the optimization criterion. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:4:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Gradient Descent To find a local minimum, start at some random point and takes step proportional (learning rate) to the negative of the gradient. The gradient is calculated by taking the partial derivative for every parameter in the loss function: (take linear regression as an example) $$l = \\frac{1}{N}\\sum_{i=1}^{N}(y_i-(wx_i+b))^2$$ $$\\frac{\\partial l}{\\partial w} = \\frac{1}{N}\\sum_{i=1}^{N}-2x_i(y_i-(wx_i+b))$$ $$\\frac{\\partial l}{\\partial b} = \\frac{1}{N}\\sum_{i=1}^{N}-2(y_i-(wx_i+b))$$ An epoch consists of using the training set entirely to update each parameter. (One sweep through full training data.) At each epoch, we update $w$ and $b$ ($\\alpha$ is the learning rate): $$w \\leftarrow w - \\alpha\\frac{\\partial l}{\\partial w}$$ $$b \\leftarrow b - \\alpha\\frac{\\partial l}{\\partial b}$$ Minibatch stochastic gradient descent is a version that speed up the computation by approximating the gradient using smaller batches. Issues with batch GD: Might get stuck in local minimum. One update, very expensive for large N. Stochastic gradient descent: use only one training sample to do update. (In each step, pick randomly and update) Each step is cheap. Can easily escape local minima. Many more steps necessary. Jumping around the solution. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:4:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Particularities Some algorithms, like decision tree learning, can accept categorical features while others expect numerical values. All algorithms in scikit-learn expect numerical features. Some algorithms, like SVM, allow weightings for each class. If the weighting is higher, the algorithm tries not to make errors in predicting training examples of this class. Some classification models, like SVM and kNN, only output the class. Others, like logistic regression or decision trees, can also return the score between 0 and 1 (can be used as a confidence score). Some classification algorithms - like decision trees, logistic regression, or SVM - build the model using the whole dataset at once. Others can be trained iteratively, one batch at a time. Some algorithms, like decision trees/SVM/kNN, can be used for both classification and regression, while others can only solve one type of problem. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:4:3","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Basic Practice ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Feature Engineering Feature engineering: the problem of transforming raw data into a dataset. The role of the data analyst is to create informative features with high predictive power. We say a model has a low bias when it predicts the training data well. One-Hot Encoding (Categorical -\u003e Numerical) One-hot is a group of bits among which the legal combinations of values are only those with a single high (1) bit and all the others low (0). It transforms a categorical feature into several binary ones. Example: red = [1,0,0]; yellow = [0,1,0]; green = [0,0,1]. When the ordering matters, we can just do: {poor, decent, good, excellent} -\u003e {1, 2, 3, 4}. Binning (Bucketing) (Numerical -\u003e Categorical) Binning converts a continuous feature in to multiple binary features called bins, typically based on value range. Normalization Normalization converts a numerical value into a value typically in the interval [-1,1] or [0,1], which increases the speed of learning: $$\\bar x^{(j)} = \\frac{x^{(j)}-min^{(j)}}{max^{(j)}-min^{(j)}}$$ Standardization (Z-score Normalization) Standardization rescales the feature values so that they have the properties of a standard normal distribution with $\\mu = 0$ and $\\sigma = 1$. Standard scores or z-scores can be calculated as follows: $$\\hat x^{(j)} = \\frac{x^{(j)} - \\mu^{(j)}}{\\sigma^{(j)}}$$ Normalization vs Standardization: Unsupervised learning - standardization. The distribution is close to a normal distribution - standardization. Have outliers - standardization (normalization will squeeze the normal values into a very small range). Other cases - normalization. Dealing with Missing Features Remove the examples with missing features Use a learning algorithm that can deal with missing feature values. Use Data imputation (the process of replacing missing data with substituted values) Replace the missing value with an average value. Replace the missing value with a value outside the normal range. Replace the missing value with a value in the middle of the range. Use the missing value as the target for a regression problem. Increase the dimensionality by adding a binary indicator feature. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Learning Algorithm Selection Explainability In-memory vs. out-of-memory (batch or incremental/online) Number of features and examples (neural networks for a huge number of features) Categorical vs. numerical features Nonlinearity of the data (SVM/linear regression/linear kernel/logistic regression of lineraly separable data) Training speed (neural networks are slow to train) Prediction speed ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Three Sets Three sets: Training set (95%) Validation set (2.5%): choose the learning algorithm and find the best values of hyperparameters. Test set (2.5%): assess the model before delivery and production. The last two are also called holdout sets, which are not used to build the model. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:3","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Underfitting and Overfitting Underfitting: the model makes many mistakes on the training data - high bias. The model is too simple. The features are not informative enough. Overfitting: the model predicts very well the training data but poorly the data from the holdout sets. - high variance (the error due to the sensitivity to small fluctuations in the training set) (variance is the difference in fits between data sets - consistency) (large generalization error) The model is too complex. Too many features but a small number of training examples. The overfitting model learns the idiosyncrasies of the training set: the noise the sampling imperfection due to the small dataset size other artifacts extrinsic to the decision problem Solutions for overfitting: Try a simply model Reduce the dimensionality Add more training data Regularization - the most widely used approach ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:4","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Regularization Regularization forces the learning algorithm to build a less complex model, which leads to a slightly higher bias but a much lower variance - the bias-variance tradeoff. The two most widely used are L1 and L2 regularization, which add a penalizing term whose value is higher when the model is more complex. For linear regression, L1 looks like this ($|\\mathbf{w}| = \\sum_{i=1}^D|w^{(j)}|$ and C is a hyperparameter), which tries to set most $w^{(j)}$ to value small values or zero (|| means abs here): $$\\min_{\\mathbf{w},b} \\left[C|\\mathbf{w}| + \\frac{1}{N}\\sum_{i=1…N}(f_{\\mathbf{w},b}(\\mathbf{x}_i)-y_i)^2\\right]$$ For linear regression, L2 looks like this (($||\\mathbf{w}||^2 = \\sum_{i=1}^D(w^{(j)})^2$): $$\\min_{\\mathbf{w},b} \\left[C||\\mathbf{w}||^2 + \\frac{1}{N}\\sum_{i=1…N}(f_{\\mathbf{w},b}(\\mathbf{x}_i)-y_i)^2\\right]$$ L1 produces a sparse model with most parameters equal to zero if C is large enough, which makes feature selection that decides which features are essential and increases explainability. L2 gives better results if our only goal is to maximize the performance on holdout sets. Plus L2 is differentiable - graident descent. L1 and L2 are the special cases for elastic net regularization. L1 - lasso; L2 - ridge regularization. Shrinkage: Ridge Regression Motivation: linear and basis expansion regression can lead to “non-full” column rank. So we limit the size of coefficients (shrinkage) (a larger $\\lambda$ means stronger shrinkage. The value is optimized by cross validation.): ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:5","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Model Performance Assessment For regression, we first compare our model with the mean model, which always predicts the average of the labels in the training data. If the fit or our model is better than the mean model, we compare the MSE (mean squared error) for the training and test data. If the MSE for the test data is substantially higher, it is a sign of overfitting. For classification, we have the following metrics and tools: Confusion Matrix The confusion matrix is a table that summarizes how successful the classification model at predicting examples belonging to various classes. Take a binary classification problem as an example: spam (predicted) not_spam (predicted) spam (actual) 23 (TP) 1 (FN) not_spam (actual) 12 (FP) 556 (TN) TP - True Positive; FN - False Negative; FP - False Positive; TN - True Negative; Precision/Recall Precision = $\\frac{TP}{TP+FP}$ (TP/Positive Predictions) Recall = $\\frac{TP}{TP+FN}$ (TP/Positive Examples) Accuracy Accuracy = $\\frac{TP+TN}{TP+TN+FP+FN}$ Cost-Sensitive Accuracy When the classes have different importance, assign cost for FP and FN then multiply before calculating the accuracy. Area under the ROC Curve (AUC) ROC (Receiver Operating Characteristic) curve uses TPR (True Positive Rate – recall) and FPR (False Positive Rate – FP/FP+TN). The higher the area under the ROC curve (AUC), the better the classifier. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:6","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Hyperparameter Tuning Grid search: use continuous parameters in the logarithmic scale to generate all the combinations. Some other techniques are Random Search (provide statistical distribution) and Bayesian (based on past evaluations). Training Error Definition ($\\tau$ is the training set): $$TE(\\hat f, \\tau) = \\frac{1}{N}\\sum_{i=1}^NL(y_i,\\hat f(x_i))$$ Generalization/Test Error Definition ($\\tau$ is a sample of the random variable T): $$ \\begin{aligned} GE(\\hat f, \\tau) \u0026= E_{X,Y}(L(Y, \\hat f_T(X))|T=\\tau) \\\\ \u0026= \\int_{R_Y}\\int_{R_X}L(y, \\hat f_T(x))\\rho(x,y|\\tau)dxdy \\\\ \u0026= \\int_{R_Y}\\int_{R_X}L(y, \\hat f_T(x))\\frac{\\rho(x,y,\\tau)}{\\rho_\\tau\\tau}dxdy \\end{aligned} $$ Expected generalization/test error $$ \\begin{aligned} EGE(\\hat f, \\tau) \u0026= E_T(E_{X,Y}(L(Y, \\hat f_T(X))|T=\\tau)) \\\\ \u0026= \\int_{R_T}(\\int_{R_Y}\\int_{R_X}L(y, \\hat f_T(x))\\rho(x,y|\\tau)dxdy)\\rho(\\tau)d\\tau \\\\ \u0026= \\int_{R_T}\\int_{R_Y}\\int_{R_X}L(y, \\hat f_T(x))\\rho(x,y,\\tau) dxdyd\\tau \\end{aligned} $$ Validation Set Error Estimation Cross-Validation When we have few training examples, it could be prohibitive to have both validation and test set. So we can split the data into a training and a test set and use cross-validation on the training set to simulate a validation set. Each subset of the training set is called a fold. Typically, a five-fold cross-validation is used in practice. We would train five models (use $F_2 F_3 F_4 F_5$ for model 1 and so on) and compute the value of the metric of interest on each validation set, from $F_1$ to $F_5$ and get the average score. Leave-one-out cross validation: ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:5:7","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Neural Networks and Deep Learning ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:6:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Neural Networks The function $f_{NN}$ is a nested function. So for a 3-layer neural network that returns a scalar: $$y=f_{NN}(\\mathbf{x}) = f_3(\\mathbf{f}_2(\\mathbf{f}_1(\\mathbf{x})))$$ $\\mathbf{f}_1$ and $\\mathbf{f}_2$ are vector functions of the following form ($\\mathbf{g}_l$ is the activation function - a fixed and chosen nonlinear function; $\\mathbf{W}_l$ (a matrix) and $\\mathbf{b}_l$ (a vector) are learned using gradient descent): $$\\mathbf{f}_l(\\mathbf{z}) = \\mathbf{g}_l(\\mathbf{W}_l\\mathbf{z} + \\mathbf{b}_l)$$ Multilayer Perceptron (Vanilla Neural Network) A multiplayer perceptron (MLP) is a class of a feed-forward neural network (FFNN). It has a fully-connected architecture. In each rectangle unit: All inputs of the unit are joined together to form an input vector. The unit applies a linear transformation. The unit applies an activation function. An example (each unit’s parameters $w_{l,u}$ and $b_{l,u}$): A more rigorous definition: We can do regression/classification by optimizing the weight $\\omega \\ \\alpha$. Highly non-linear, non-convex -\u003e many local minima. $\\omega \\ \\alpha$ often strongly underdetermined. No closed form formula -\u003e use gradient descent. Feed-Forward Neural Network Architecture If we want to solve a regression or a classification problem, the last layer usually contains only one unit. If $g_{last}$ is linear, then the neural net is a regression model. If $g_{last}$ is a logistic function, it’s a binary classification model. Any differentiable function can be chosen as $g_{l,u}$. And primary reason of such a nonlinear component is to allow the neural net to approximate nonlinear functions. Popular choices for $g$ are the logistic function, TanH, and ReLU (rectified linear unit function): $$tanh(z) = \\frac{e^z - e^{-z}}{e^z + e^{-z}}$$ $$relu(z) = 0 \\ \\ if \\ z \u003c 0$$ $$relu(z)= z \\ \\ otherwise$$ ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:6:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Deep Learning Deep learning refers to training neural networks with more than two non-ouput layers. The two biggest challenges: Exploding gradient - use gradient clipping or $L_1$ $L_2$ regularization Vanishing gradient - use ReLU, LSTM, and skip connections (in residual neural networks) Backpropagation is an efficient algorithm for computing gradients on neural networks using the chain rule. (It’s used to update the parameters.) For overfitting: Early stopping in training. $L_2$ regularization. Add dropout layer. Convolutional Neural Network When our training examples are images, the input is very high-dimensional (each picture is a feature). If we use MLP, the optimization problem is likely to become intractable. A convolutional neural network (CNN) is a special kind of FFNN that significantly reduces the number of parameters. Convolutional networks are simply neural networks that use convolution in place of general matrix multiplication in at least one of their layers. We use the moving window approach and then train multiple smaller regression models at once, each small regression model receiving a square patch as input. The goal of each small regression model is to detect a specific kind of pattern in the input patch. To detect some pattern, a small regression model has to learn the parameters of a matrix $\\mathbf{F}$ (filter). For example, if we have the following matrix $\\mathbf{P}$ (patch) and $\\mathbf{F}$, we can calculate the convolution of them. And the value is higher the more similar $\\mathbf{F}$ is to $\\mathbf{P}$. (The patch represents a pattern that looks like a cross.) For convenience, there’s also a bias parameter b associated with each filter which is added to the result to a convolution. One layer of a CNN consists of multiple convolution filters. Each filter of the first layer slides - or convolves - across the input image, left to right, top to bottom. The filters and bias values are trainable parameters and are optimized using gradient descent with backpropagation. The subsequent layer treats the output of the preceding layer as a collection of image matrices. Such a collection is called a volume. Stride is the step size of the moving window. We can also use paddings. Pooling is a layer that applies a fixed operator, usually either max or average instead of applying a trainable filter. It increases the accuracy and improves the training speed by reducing the number of parameters. (The one below uses max.) Recurrent Neural Network RNN is the neural network whose connections between nodes form a directed graph along a temporal sequence. This allows it to exhibit temporal dynamic behavior. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:6:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Problems and Solutions ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:7:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Basis Expansions Basis expansion extends the linear model to a non-linear model. We achieve this by introducing basis functions $\\phi_m (X)$. Definition: For quadratic polynomial regression, our basis functions will be: $\\phi_1(x)=1, \\ \\phi_2(x)=x, \\ \\phi_3(x)=x^2$ Regression with Gaussian Kernel The Gaussian kernel ($\\sigma^2$ is a scaler parameter, i.e. the variance or kernel width): $$k(x,x’)=e^{-\\frac{||x-x’||^2}{\\sigma^2}}$$ Regression for kernel-based model: ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:7:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Kernel Regression Kernel regression is a non-parametric method, which means there are no parameters to learn. The model is based on the data itself (like in kNN). The simplest kernel regression looks like this (the function $k(\\cdot)$ is called a kernel, which plays the role of a similarity function - $w_i$ is higher when x is similar to $x_i$): $$f(x)=\\frac{1}{N}\\sum_{i=1}^{N}w_iy_i, \\ where \\ w_i = \\frac{Nk(\\frac{x_i - x}{b})}{\\sum_{l=1}^Nk(\\frac{x_l - x}{b})}$$ Kernels can have different forms, the most frequently used is the Gaussian kernel: $$k(z)=\\frac{1}{\\sqrt{2\\pi}}exp(\\frac{-z^2}{2})$$ ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:7:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Classification Decision boundary: the set of points at which the probability of x to be in either of the classes is equal: $$\\{x \\in \\mathbb{R}_X|p(1|x)=p(2|x)\\}$$ The classification is linear if the decision boundaries are linear. Classification by linear regression of indicator matrix: Linear Discriminant Analysis Linear Discriminant analysis (LDA) is a method used to find a linear combination of features that characterizes or separates two or more classes of objects or events. The resulting combination may be used as a linear classifier, or, more commonly, for dimensionality reduction before later classification. The mathematical definition and the algorithm: LDA ia linear predictor. A non-linear classification predictor can be obtained if we use $N(\\mu_g, \\Sigma_g)$ instead of $N(\\mu_g, \\Sigma)$, i.e. a class dependent covariance. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:7:3","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Ensemble Learning Ensemble learning trains a large number of low-accuracy models and then combine the predictions given by the weak models to obtain a high-accuracy meta-model. Boosting and Bagging Boosting: each new model would be different from the previous ones by trying to fix the errors of the previous models. Bagging: create many copies of the training data (each slightly different from others). Random forest is based on bagging. Random Forest Random forest avoids the correlation of the trees, which reduces the variance. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:7:4","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Unsupervised Learning Unsupervised learning deals with problems in which data doesn’t have labels. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:8:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Density Estimation To be filled. ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:8:1","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Clustering Clustering is a problem of learning to assign a label to examples by leveraging an unlabeled dataset. A dissimilarity function measures the difference / lack of affinity between two observations from X. It holds that $d(x,x) = 0$ and $d(x,x’)=d(x’,x)$. Some examples: Squared Euclidean Distance: $d(x,x’)=\\sum_{j=1}^D(x_j-x_{j}’)^2$ Componentwise Distance: $d(x,x’)=\\sum_{j=1}^D|x_j-x_{j}’|$ Weighted Squared Euclidean Distance: $d(x,x’)=\\sum_{j=1}^Dw_j(x_j-x_{j}’)^2$ In combinatorial clustering, we look for an encoder $C:\\{1,..,N\\} \\rightarrow \\{1,..,K\\}$ that assigns each sample $x_i$ a label or cluster $k = C(i)$ such that a given loss is minimized. The canonical loss for the encoder: $$L(C) = \\frac{1}{2}\\sum_{k=1}^K\\sum_{C(i)=k}\\sum_{C_(i’)=k}d(x_i,x_{i’})$$ We can use centroids ($\\bar x_k = \\frac{1}{N_k}\\sum_{C(i)=k}x_i$) to simplify the loss function $$L(C)=\\sum_{k=1}^KN_k\\sum_{C(i)=k}||x_i - \\bar x_k||^2$$ K-Means Choose k - the number of clusters (a hyperparameter which requires an educated guess). Randomly put k feature vectors, called centroids, to the feature space. (The initial positions influence the final positions.) Compute the distance from each example x to each centroid c using some metric, like the Euclidean distance. Assign the closest centroid to each example. For each centroid, calculate the average feature vector of the examples labeled with it. The average feature vectors become the new locations of the centroids. Recompute the distance from each example to each centroid, modify the assignment and repeat the procedure until the assignments don’t change after the centroid locations were recomputed. The algorithm (using iterative greedy descent): ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:8:2","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Dimensionality Reduction Since modern ML algorithms can handle very high-dimensional examples, dimensionality reduction techniques are used less in practice than in the past. The most frequent use case is data visualization: human can only interpret on a plot the maximum of three dimensions. Another situation is that we need to build an interpretable model and are limited in the choice of algorithms. Then it removes redundant or highly correlated features and also reduces the noise in the data, which all improve the interpretability of the model. Principal Component Analysis (PCA) Example: Principal components are vectors that define a new coordinate system in which the first axis goes in the direction of the highest variance in the data. The second axis is orthogonal to the first one and goes in the direction of the second highest variance in the data. The length of the arrow reflects the variance in the direction. They form the orthogonal basis. If we want to reduce the dimensionality to $D_{new} \u003c D$, we pick $D_{new}$ largest principal components and project our data points on them. For 2D, we can set $D_{new} = 1$ and get the projected orange points in the figure. To describe each orange point, we need only one coordinate instead of two: the coordinate with respect to the first principal component. For data compression/ dimensionality reduction, we aim to look for a lower-dimensional representation / compression of data (lossy compression, ${W}_d \\ {V}_d$ are matrices for compression and decompression respectively): $$z_i = comp_d (x_i)$$ $$x_i \\approx \\hat x_i = decomp_d (z_i)$$ $$(\\hat{V_d}, \\hat{W_d}) = argmin_{W_d, {V}d} \\sum{i=1}^N||x_i-V_d {W}_d x_i||^2$$ For the matrix above ($\\hat{V_d}$), it’s orthonormal and $\\hat{W_d} = \\hat{V_d^T}$. So we can rewrite our minimization problem (the columns of $\\hat {V}_d$ are called principle components, which are ordered by importance): $$\\hat {V_d} = argmin_{V_d} \\sum_{i=1}^N||x_i-V_d V_d^T x_i||^2$$ Algorithms (svd -\u003e singular value) ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:8:3","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"References The Hundred-Page Machine Learning Book The Elements of Statistical Learning: Data Mining, Inference, and Prediction An Introduction to Statistical Learning: With Applications in R Machine Learning course by Prof. Dr. Peter Zaspel at Jacobs University Bremen ","date":"May 1, 2020","objectID":"/posts/2020-05-01-Machine-Learning-Notes/:9:0","tags":["Machine Learning","AI"],"title":"Machine Learning Notes","uri":"/posts/2020-05-01-Machine-Learning-Notes/"},{"categories":null,"content":"Some notes for algorithms and data structures","date":"April 10, 2020","objectID":"/posts/2020-4-10-Algorithms-and-Data-Structures/","tags":["Computer Science"],"title":"Algorithms and Data Structures","uri":"/posts/2020-4-10-Algorithms-and-Data-Structures/"},{"categories":null,"content":" Dynamic Programming Greedy Algorithms References ","date":"April 10, 2020","objectID":"/posts/2020-4-10-Algorithms-and-Data-Structures/:0:0","tags":["Computer Science"],"title":"Algorithms and Data Structures","uri":"/posts/2020-4-10-Algorithms-and-Data-Structures/"},{"categories":null,"content":"Dynamic Programming The two key ingredients: optimal substructure: The optimal solution contains the optimal solutions to subproblems. The subproblems need to be independent, which means the solution to one subproblem does not affect the solution to another subproblem. overlapping subproblems The other two steps: Reconstruct an optimal solution Memoization: When the subproblem is first encountered as the recursive algorithm unfolds, its solution is computed and then stored in the stable. Each subsequent time that we encounter this subproblem, we simply look up the value and return it. ","date":"April 10, 2020","objectID":"/posts/2020-4-10-Algorithms-and-Data-Structures/:1:0","tags":["Computer Science"],"title":"Algorithms and Data Structures","uri":"/posts/2020-4-10-Algorithms-and-Data-Structures/"},{"categories":null,"content":"Greedy Algorithms For many optimization problems, using dynamic programming is overkill. Even though there is almost always a more cumbersome dynamic-programming solution beneath every greedy algorithm. A greedy algorithm always makes the choice that looks best at the moment. That is, it makes a locally optimal choice in the hope that this choice will lead to a globally optimal solution. The two key ingredients: greedy-choice property: we can assemble a globally optimal solution by making locally optimal (greedy) choices. Unlike dynamic programming, which solves the subproblems before making the first choice (bottom up), a greedy algorithm makes its first choice before solving any subproblems (top down.) optimal substructure ","date":"April 10, 2020","objectID":"/posts/2020-4-10-Algorithms-and-Data-Structures/:2:0","tags":["Computer Science"],"title":"Algorithms and Data Structures","uri":"/posts/2020-4-10-Algorithms-and-Data-Structures/"},{"categories":null,"content":"References Introduction to Algorithms ","date":"April 10, 2020","objectID":"/posts/2020-4-10-Algorithms-and-Data-Structures/:3:0","tags":["Computer Science"],"title":"Algorithms and Data Structures","uri":"/posts/2020-4-10-Algorithms-and-Data-Structures/"},{"categories":null,"content":"Some notes for design patterns","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":" Principles The Strategy Pattern The Observer Pattern The Decorator Pattern The Factory Pattern The Singleton Pattern The Command Pattern The Adapter Pattern The Facade Pattern The Template Method Pattern The State Pattern The Proxy Pattern Model-View-Controller Design Pattern Categories References ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:0:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"Principles Identify the varying parts and separate them from the invariant. Program to an interface (supertype), not an implementation. Animal animal = new Dog(); animal.makeSound(); List\u003cInteger\u003e list = new ArrayList\u003cInteger\u003e(); Favor composition over inheritance. HAS-A can be better than IS-A. SOLID: Single responsibility: a class should have only one reason to change. Open-closed: classes should be open for extension, but closed for modification. Liskov Substitution: objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program Interface Segregation: many client-specific interfaces are better than one general-purpose interface. Dependency inversion: depend upon abstractions. Do not depend upon concrete classes. High-level components should not depend on low-level components; rather, they should both depend on abstractions. No variables should hold a reference to a concrete class. No class should derive from a concrete class. Loose coupling: minimize the interdependency between objects. Design by contract: preconditions, postconditions, and invariants. Principle of Least Knowledge aka (Law of Demeter): talk only to your immediate friends. The Hollywood Principle (aka. Inversion of Control): (High-level components) Don’t call us, we’ll call you (low-level components). A form of IoC: Dependency injection - a technique in which an object receives other objects that it depends on. Tell-Don’t-Ask: A-\u003eB instead of B-\u003eA-\u003eB for data. Build end-to-end (incrementally) instead of top-down nor bottom-up. In a Test-driven development (TDD), there’s no need to do a big design up front. There’s no need to prefix m_ for private stuff. We shouldn’t always use patterns in today’s agile and XP trends. But if our specific solution is similar to a pattern, refactor it to make it more generic if needed. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:1:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Strategy Pattern The strategy pattern enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:2:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Observer Pattern Publishers (Subject) + Subscribers (Observers) = Observer Pattern. It defines a one-to-many dependency. When the subject changes, all dependents are notified. In Java, we can use the built-in Observable - Observer superclasses. // extends Observable setChanged(); notifyObservers(); // extends Observer // in the constructor observable.addObserver(this); In Java, Observable is a class, which means we have to subclass it. UML: Example: Used principles: Loose coupling. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:3:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Decorator Pattern Decorators have the same supertype as the object they decorate. You can use one or more decorators to wrap (HAS-A) an object. The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job. The decorator pattern attaches additional responsibilities to an object dynamically. UML: Example: java.io is mainly using the decorator pattern. Used principles: Open-closed. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:4:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Factory Pattern The factory method pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses. UML: Example: The abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. Used principles: Dependency inversion. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:5:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Singleton Pattern The singleton pattern restricts the instantiation of a class to one single instance, and provides a global point of access to it: public class Singleton { private static Singleton uniqueInstance; private Singleton() {} // PRIVATE constructor public static synchronized Singleton getInstance() { // remove synchronized if there's no multithreading if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } } ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:6:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Command Pattern The command pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests and support undoable operations. UML: ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:7:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Adapter Pattern The adapter pattern converts the interface of a class into another interface the clients expect. It lets classes work together that couldn’t otherwise because of incompatible interfaces. UML: ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:8:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Facade Pattern The facade pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Used principles: Least knowledge. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:9:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Template Method Pattern The template method pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure: abstract class AbstractClass { final void templateMethod() { primitiveOperation1(); primitiveOperation2(); concreteOperation(); } abstract void primitiveOperation1(); abstract void primitiveOperation2(); void concreteOperation() { // implementation here } } Used principles: Inversion of control. Single responsibility. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:10:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The State Pattern The state pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class. It’s close to the concept of finite-state machines. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:11:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"The Proxy Pattern A remote proxy acts as a local representative to a remote object. Java RMI’s (remote method invocation) client helper is a “stub” and the service helper is a “skeleton”. The stub is the proxy. The proxy pattern provides a surrogate or placeholder for another object to access it. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:12:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"Model-View-Controller The MVC is using: the strategy pattern: the view delegates to the controllers to handle user actions. (Swappable controllers.) the composite pattern: the view is a composite of GUI components. the observer pattern: the model is the observable, and the view \u0026 controller are observers. ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:13:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"Design Pattern Categories Creational: Factory, Singleton Behavioral (how classes communicate): State, Iterator, Command Structural: Adapter, Composite, Decorator, Facade, Proxy ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:14:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"References Head First Design Patterns: A Brain-Friendly Guide 1st Edition The Pragmatic Programmer Clean Code The Software Craftsman: Professionalism, Pragmatism, Pride ","date":"March 29, 2020","objectID":"/posts/2020-03-29-Design-Patterns/:15:0","tags":["Software Engineering"],"title":"Design Patterns","uri":"/posts/2020-03-29-Design-Patterns/"},{"categories":null,"content":"Some notes for Go","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":" Basics Data Structures Structs Errors and Failures Goroutines and Channels Testing ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:0:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Basics Hello World: package main import ( \"fmt\" \"strings\" \"math/rand\" \"time\" \"github.com/headfirstgo/keyboard\" // use go get to download the package ) func main() { fmt.Println(\"Hello Go!\") fmt.Println(strings.Title(\"head first go\")) rand.Seed(time.Now().Unix()) fmt.Println(rand.Intn(100)) // 0 - 99 } Use go fmt to format the code. (Go uses tabs instead of spaces.) Use go run to compile and run. Or go build and ./foo. go install generates the binary in the bin directory. Rune literals are surrounded by single quotes. (Just like C chars.) Initialization: var foobar bool // the zero (default) value is false // The zero values: 0 for int and float; false for bool foo := 42 // short variable declaration // ONLY ONE variable in the short variable declaration has to be new // This allows multiple err for definitions Go prefers the camelCase and no semicolons. Type conversions: Go uses the C-like style type conversion: length = float64(width) And similarly for string to int: foo, err := strconv.Atoi(\"123\") (ASCII to Int) Go doesn’t allow variable declarations unless we use these variables. We can use the blank identifier just like in Swift: reader := bufio.NewReader(os.Stdin) input, _ := reader.ReadString('\\n') // if we don't handle the err // or we handle it: // if err != nil { // log.Fatal(err) //} Like in Swift/Python, there’s no need to add parentheses for if and for. Since Go is syntactically similar to C, it also uses the formatting verbs: %f, %d, %s, %t (Boolean), %v (Any.) (%2d and %.2f are also used to round the numbers.) Like in Swift and Kotlin, the types are after the parameter names in a function: func foo(bar string, foobar int) string { return \"Hello Go!\" } func foofoo() (string, string) { return \"Hello\", \"Go!\" } Go is a “pass-by-value” language by default. And we have the C-style pointers and addresses. A shorter form: fooPointer := \u0026foo *fooPointer = 42 fmt.Println(*fooPointer). Use pointers to change the value for functions: func myFunc(foo *bar) { foo.foofoo ++ } myFunc(foofoofoo\u0026) const fooBar = 42 or const fooBar int = 42 Documentations: go doc strconv to see the documentation of strconv. go doc strconv Atoi to see the specific function. godoc -http=:6060 starts the local server at port 6060. Add ordinary comments before the package line and before functions to make them doc comments. A few conventions: Comments should be complete sentences. Package comments should begin with “Package + name”: // Package myPackage does nothing.. Function comments should begin with the function name: // MyFunction does nothing.. import (\"os\") and os.Args[1:] gives the command-line arguments (except the file name). Variadic functions: func myFunc (param1 int, param2 ...string) {} (unlimited string parameters stored as a alice in param2) Functions are first-class in go as well. func twice(theFunction func()) { theFunction() theFunction() } ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:1:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Data Structures Arrays: var myArray [4]string myArray := [2]int{3, 4} fmt.Println(myArray) (can be printed directly). Like in Python, use len(meArray) to check the length. For loops: for index, value := range myArray for index, note := range notes { fmt.Println(index, note) } // or for _, note := range notes { fmt.Println(note) } // or for index, _ := range notes { fmt.Println(index) } Slices: (similar to Python) var notes []string then notes = make([]string, 7) Or notes := []string{\"foo\", \"bar\"} myArray := [5]string{\"a\", \"b, \"c\", \"d\", \"e\"} mySlice := myArray[1:3] gives b, c. We can also do [1:] or [:3]. The modifications for the original array or the slice will affect each other. slice = append(slice, \"foo\", \"bar\", \"foobar\") Maps: var myMap map[string]int then myMap = make(map[string]int). Or myMap := make(map[string]int). myMap[\"newKey\"] = 1 to insert and myMap[\"newKey\"] to access. Map literals: ranks := map[string]int{\"bronze\": 3, \"silver\": 2, \"gold\": 1} // or multiline elements := map[string]string{ \"H\": \"Hydrogen\", \"Li\": \"Lithium\", } emptyMap := map[string]int{} // empty Use ok (a boolean value) to tell if it’s a zero value: grade, ok := grades[name] then if !go {}. Use delete(myMap, \"myKey\") to delete the pair. for loops: for key, value := range myMap {} for key := range myMap {} for _, value := myMap {} sort.Strings(names) and then loop to have the sorted map. ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:2:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Structs Example: (go fmt will format the spaces) // Capitalize if we want to export the package // Lowercase if we want to make it private in its own package var MyStruct struct { Number float64 Word string Toggle bool } MyStruct.number = 3.14 // or define a type type Car struct { Name string TopSpeed float64 } var myCar Car // or struct literal myCar := Car{Name: \"Tesla\", TopSpeed: 337} // Anonymous fields with just the type name is also allowed func (m *Car) myMethod() { fmt.Println(\"This is a method from Car %s\", m) *m.TopSpeed = 1 } func (m *Car) SetTopSpeed(speed float64) error { // must pass by reference if speed \u003c 0 { return errors.New(\"Invalid speed\") } m.TopSpeed = speed return nil } func (m *Car) TopSpeed() float64 { // Don't add Get to the name in the Getter return m.TopSpeed } Interfaces: Example: type MyInterface interface { Foo() Bar(float64) FooBar() string } func (m MyType) Foo() {} func (m MyType) Bar(f float64) {} func (m MyType) FooBar() string { return \"Now I'm complete\" } // No further stuff needed. MyType automatically matches the interface now, // if it has defined all the methods. Type assertion: robot, ok := noiseMaker.(Robot) (noiseMaker is the interface var). The empty interface can accept any type. func AcceptAnything(thing interface{}) ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:3:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Errors and Failures Add defer to make sure a function call takes place, even if the calling function exist early (returned or panicking). defer fmt.Println(\"I'm deferred to the end.\"). panic(\"I'm panicking\") to create a panic (crashing the program). recover takes the return value of panic and exits the program normally. func calmDown() { recover() } func freakOut() { defer calmDown() panic(\"Oh no\") fmt.Println(\"I won't be run!\") } func main() { freakout() } func calmDown() { p := recover() err, ok := p.(error) // assert that it's an error if ok { fmt.Println(err.Error()) } } func main() { defer calmDown() err := fmt.Errorf(\"There's an error\") panic(err) } This is intentionally designed in Go to be clumsy, which discourages its usage. Normally, we just need to do log.Fatal(err) and return in the functions. if err != nil { log.Fatal(err) } ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:4:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Goroutines and Channels Goroutines (go in front of function calls) enable parallelism (lightweight threads): func main() { go a() go b() // can't deal with the return value time.Sleep(time.Second) // sleep for 1 second to let the routines finish } Channels to enable the communication between goroutines. func greeting(myChannel chan string) { myChannel \u003c- \"hi\" // time.Sleep(time.Second) to synchronize } func main() { myChannel := make(chan string) go greeting(myChannel) fmt.Println(\u003c-myChannel) // receives \"hi\" } ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:5:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Testing Run go test func TestFoo(t *testing.T) { t.Error(\"test failed\") } ","date":"February 17, 2020","objectID":"/posts/2020-02-17-Go-Notes/:6:0","tags":["Programming Languages"],"title":"Go Notes","uri":"/posts/2020-02-17-Go-Notes/"},{"categories":null,"content":"Some notes for Kotlin","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Table of Contents Table of Contents Basics Collections OOP Nulls and Exceptions Lambdas and Higher-Order Functions References ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:1:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Basics Kotlin requires one main per app: fun main(args: Array\u003cString\u003e) { // the args part can be omitted println(\"Hello Kotlin!\") } Shorter if println(if (x \u003e y) \"x is greater\" else \"x is not greater\") return if (x \u003e y) x else y var vs val: When using var, we can assign another value to the variable. When using val, the reference to the object stays forever. However, if the variable is an array, the array itself can be updated. (Similar to let in Swift) Primitive types are also objects controlled by references. Similar to Swift, we can specify the type: var z: Int = 6 var x: Long = z.toLong() // similarly, toFloat(), to Byte(), etc. Arrays: var myArray = arrayOf(1, 2, 3) var myLength = myArray.size var explicitArray: Array\u003cInt\u003e = arrayOf(1, 2, 3) Strings: var x = 42 var myString = \"x is $x\" // When accessing a property or function of a object, use ${} var myArray = arrayOf(1, 2, 3) var arraySize = \"The size if ${myArray.size}\" var firstItem = \"The first item is ${myArray[0]}\" \"12.345-6.A\".split(\".\", \"-\") // splits at both . and - // We don't need to escape for triple quote strings for regular expressions. val regex = \"\"\"(.+)/(.+)\\.(.+)\"\"\".toRegex() // We can also use triple quotes for multiline strings like in Python. Functions; // We can have default values like in Python. fun foo(bar: Int = 1): Int { // Unit means no return value, or just omit it. // And Nothing means the function never returns. // stuff return 1 } var result = foo(1) fun max(a: Int, b: Int): Int = if (a \u003e b) a else b // also works fun listOf\u003cT\u003e (vararg values: T): List\u003cT\u003e {...} // vararg makes it variadic. // And we need to explicitly unpack the array when passing: listOf(\"args:\", *args) Loops: for (x in 1..100) println(x) // end inclusive for (x in 1 until 100) println(x) // not end inclusive for (x in 15 downTo 1) println(x) // end inclusive for (x in 1..100 step 2) println(x) for (item in items) println(item) Input: val userInput = readLine() when: when (x) { 0 -\u003e println(\"It's 0\") 1, 2 -\u003e println(\"It's 1 or 2\") else -\u003e { println(\"It's not 0.\") println(\"It's not 1 nor 2.\") } } // We can also use when without the argument, then each case needs to be a Boolean. We can use the qualified this to access the this from an outer scope: this@MainActivity. ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:2:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Collections List, Set, Map, MutableList, MutableSet, MutableMap. listOf(), mutableListOf(). mList.set(1, \"foo\"), .shuffle(), .last(), .max(). mapOf(0 to 'a', 1 to 'b', 2 to 'c') for ((key, value) in mMap). (to actually creates a Pair\u003cK, V\u003e). Add out (\u003cout E\u003e) to make the generics covariant (use a subtype instead of a supertype) - achieving polymorphism. Add in to make it contravariant - the opposite of covariance. We can use in to check existence just like in Python. Like enumerate() in Python, we have .withIndex(): for ((index, element) in collection.withIndex()) {...} ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:3:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"OOP Example class: class Dog(val name: String, var weight: int, val breed: String = \"default\") { var temperament: String = \"\" // All properties must be initialized. // Or: // lateinit var temperament = String fun bark() { println(\"Woof!\") } } Custom getters and setters: ... val weightInKgs: Double get() = weight / 2.2 var weight = weightParam set(value) { if (value \u003e 0) field = value // field is a keyword } ... In fact, the complier adds getters and setters automatically: var myProperty: String get() = field set(value) { field = value } Classes, variables, and methods are final by default. To enable inheritance and overriding, add open before them. We also need to add override to variables. The init {} blocks are called during initialization. If a property is defined using val in the superclass, we must override it in the subclass if we want to assign a new value to it. However, if it’s defined using var, we just need to reassign it in the init {} block without using override. abstract for classes, variables, and methods. These properties must all be overridden later. An interface lets us define common behavior OUTSIDE a superclass hierarchy. (Not IS-A, but share a property.) A class can have multiple interfaces, but can only inherit from a single direct superclass. class X: A, B {} (No parentheses. class X: A() means we are inheriting.) Use is to check the type: if (animal is Wolf). And use as for explicit casting. Any is the superclass of everything. Add data to the start of the class to make it behave like a struct in Swift. Then we can use == or .equals to test the equivalence. (Equal objects have the same .hashCode() value.) (And .toString() returns the value of each property.) (BTW, === is used for referential check (identity).) For data objects, we have destructuring declaration: val (title, number) = r // is equivalent to val title = r.component1 val number = r.component2 // And this can be used to return multiple values from a function, or we can use Pair. Named arguments (var r = Recipe(title = \"title\", foo = \"bar\")) are also available like in Swift. Secondary constructors: constructor(foo: Boolean) : this(0, foo) {} // Calls the primary constructor. enum class: enum class Color { RED, YELLOW, BLUE } fun foo(color: Color) = // Returns the value directly. when (color) { Color.RED -\u003e 1 Color.YELLOW -\u003e 2 Color.BLUE -\u003e 3 } Everything is public by default. We also have private, protected, and internal (for a module). Operator overloading: data class Point(val x: Int, val y: Int) { operator fun plus(other: Point): Point { return Point(x + other.x, y + other.y) } } ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:4:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Nulls and Exceptions Use ? for nullable objects just like in Swift. w?.eat() is a safe call. It’s only called when w is not null. Like optional binding in Swift, use let: w?.let { // executed when w is not null } The Elvis operator ?: w?.hunger ?: -1 // if null, return -1 !! is like ! in Swift. It throws a NullPointerException if the value is null: w!!.hunger. Like Java, the same try catch finally block for exception handling. And the same throw. But we ca use try as an expression, which returns the value to the variable: val number = try { Integer.parseInt(reader.readLine()) } catch (e: NumberFormatException) { return // Or null if we want the flow to continue. } println(number) as? is the conditional cast, which returns null is the casting is not possible: val foo = bar as? Person ?: return false .filterNotNull() returns a list with null filtered out. ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:5:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Lambdas and Higher-Order Functions We can assign a lambda to a variable: val addFive: (Int) -\u003e Int = {x: Int -\u003e x + 5} val result = addFive.invoke(1) // 6 // or val result = addFive(1) {it + 5} is equivalent to {x -\u003e x + 5}. Lambdas can also be passed to functions. fun convert(x: Double, converter: (Double) -\u003e Double) : Double { return converter(x) } println(convert(1, {c: Double -\u003e c * 1.8 + 32})) .min() and .max() work with basic types: val mMax = mList.max() minBy {} and maxBy {} work with all types: val mMaxQuantity = groceries.maxBy {it.quantity}. Also sumBy {} and sumByDouble {} : mMap.values.sumBy {it}. We can also use :: reference like in Java 8 (::foo calls the top-level function foo). filter {}: val pricesOver3 = groceries.filter {it.price \u003e 3.0}. Also filterNot {}. We can also use .count() instead of .filter().size. map {}: val doubleInts = ints.map {it * 2} forEach {}: groceries.forEach {println(it.name)} Closure means that a lambda can access any local variable that it captures. groupBy {} returns a Map\u003cKey, List\u003e (Key depends on the key’s type). fold {}: val sumOfInts = ints.fold(0) {mSum, item -\u003e mSum + item} all and any: listOf(Person(\"Alice\", 27), Person(\"Bob\", 31)).all {it.age \u003c 28} flatMap {} and flatten(): val books = listOf(Book(\"Thursday Next\", listOf(\"Jasper Fforde\")), Book(\"Mort\", listOf(\"Terry Pratchett\")), Book(\"Good Omens\", listOf(\"Terry Pratchett\",\"Neil Gaiman\"))) println(books.flatMap { it.authors }.toSet()) // [Jasper Fforde, Terry Pratchett, Neil Gaiman] // Or use .flatten() when we don't do any transformation: listOfLists.flatten() Like a Python generator or Java stream, Kotlin also has the lazy sequence: people.asSequence() .map(Person::name) .filter {it.startsWith(\"A\")} .toList() // Converts the sequence back. For SAM (Single Abstract Method) interface, we can pass a lambda instead of implementing a class: fun interface IntPredicate { fun accept(i: Int): Boolean } val isEven = IntPredicate {it % 2 == 0} // Instead of val isEven = object : IntPredicate { override fun accpet(i: Int): Boolean { return i % 2 == 0 } } println(isEven.accept(8)) // Another example: button.setOnClickListener { view -\u003e ... } ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:6:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"References Head First Kotlin: A Brain-Friendly Guide ","date":"September 4, 2019","objectID":"/posts/2019-09-04-Kotlin-Notes/:7:0","tags":["Programming Languages"],"title":"Kotlin Notes","uri":"/posts/2019-09-04-Kotlin-Notes/"},{"categories":null,"content":"Some notes for iOS development","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":" Basics View Controller Lifecycle: MVC Architecture Project Organization References ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:0:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"Basics Model-View-Controller is a design pattern in iOS. Unlike in Android Studio, the Interface Builder is not a graphical representation of code. A storyboard file is an archive of object instances. Outlets are references to objects: @IBOutlet var questionLabel: UILabel! (IB means interface builder.) (Right click the item and drag it to the assistant editor to create the outlet.) Actions: @IBAction func showNextQuestion(_ sender: UIButton) {} (Right click the item and drag it to the assistant editor to create the action.) Use View Controller to add new screens. Use Embed in \u003e Navigation Controller to add a nav controller. Use this to pass info between screens: override func prepare(for segue: UIStoryboardSegue, sender: Any?) { segue.destination.navigationItem.title = textField.text } Use performSegue to create a segue programmatically (could be used for conditional segue.) performSegue(withIdentifier: \"Foo\", sender: nil) Right click and drag to a view controller to add the new view controller to the Tab Bar Controller (select view controllers). Connect the new ViewController file by setting the custom class attribute in storyboard. ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:1:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"View Controller Lifecycle: Detailed methods: https://guides.codepath.com/ios/View-Controller-Lifecycle ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:2:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"MVC Architecture ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:3:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"Project Organization Example: ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:4:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"References iOS Programming: The Big Nerd Ranch Guide App Development With Swift ","date":"August 13, 2019","objectID":"/posts/2019-08-13-iOS-Development-Notes/:5:0","tags":["Mobile Development"],"title":"iOS Development Notes","uri":"/posts/2019-08-13-iOS-Development-Notes/"},{"categories":null,"content":"Some notes for Swift","date":"August 2, 2019","objectID":"/posts/2019-08-2-Swift-Notes/","tags":["Programming Languages"],"title":"Swift Notes","uri":"/posts/2019-08-2-Swift-Notes/"},{"categories":null,"content":" Basics OOP References ","date":"August 2, 2019","objectID":"/posts/2019-08-2-Swift-Notes/:0:0","tags":["Programming Languages"],"title":"Swift Notes","uri":"/posts/2019-08-2-Swift-Notes/"},{"categories":null,"content":"Basics How to compile and run: swift hello_world.swift No semicolons (though allowed) and no main functions. But semicolons must be used to write multiple statements in a single line. Use let to make a constant and var to make a variable. (Use let whenever possible) Plus, multiple variables can be declared in one line: var x = 0, y = 0. Types are inferred. If we need to make the type explicit, add the type after: (In practice, we rarely need to use the type annotations.) var implicitInt = 70 var explicitInt: Int = 70 Use \\() to include values in a string: var foo = 17 print(\"hello world \\(foo)\") var optionalString: String? = \"I exist\" print(\\(optionalString!)) // forced unwrapping, we are sure the value exists. And ! is required var assumedString: String! = \"I definitely exist\" print(\\(assumedString)) Use [] for both arrays and dictionaries. A comma is allowed after the last element. Use \"\"\" for multiple-line strings: let foo = \"\"\" Hello World \"\"\" Arrays, dictionaries and sets: var emptyArray = [String]() emptyArray.append(\"first\") emptyArray += [\"second\", \"third\"] emptyArray.insert(\"fourth\", at: 3) var emptyDictionary = [String: Float]() // Or below if the type can be inferred var emptyArray = [] var emptyDictionary = [:] var threeDoubles = Array(repeating: 0.0, count: 3) var shoppingList: [String] = [\"Eggs\", \"Milk\"] var shoppingListInferred = [\"Eggs\", \"Milk\"] var fooSet: Set\u003cInt\u003e The for loop: for foo in foos {}. for (foo, bar) in foobarDictionary {}. for i in 0..\u003c4 {} is equivalent to for i in range(0, 4): in python. for i in 0...4 {} is equivalent to for i in range(0, 5): in python. for (index, value) in shoppingList.enumerated() gives tuples: (0, foo), (1, bar) Optionals: add ? to indicate that the value might be missing: var optionalString: String? = \"foo\" (it can later be set to nil.) (The type is required to init a nil.) Use ?? to provide a default value for an optional: let foo: String? let bar: String = \"Default\" print(foo ?? bar) Optional binding if let constantName = someOptional { // if the value != nil // statements } ... if let theApartmentNumber = person.residence?.address?.apartmentNumber { // optional chaining } Functions: func foo(bar: String) -\u003e String { return \"hello \\(bar)\" } foo(bar: \"Till\") // A tuple can be used to return multiple values // Functions call also be returned (First-class functions) // _ bar: String means no argument label when being called String methods: .isEmpty and .count (no parentheses) (.count is for length). .lowercased() .hasPrefix(), .hasSuffix(), contains() By default, the switch in Swift doesn’t fall through, which means we don’t need break. (If needed, fallthrough can be added.) Multiple conditions are allowed: case \"a\", \"e\", \"i\", \"o\", \"u\". Range values are allowed: case 0...9. @discardableResult func foo() -\u003e String {} means the return is discardable. Double(x) converts the type to Double. .toggle() toggles boolean values. The default type for a char is String: let a = \"a\" // String let b : Character = \"b\" // Character Any and as?: var items: [Any] = [5, \"Bill\", 6.7, Dog()] if let firstItem = items[0] as? Int { // Any is generic. as? is used for conditional casting } enum: enum CompassPoint { case north, east, south, west } var compassHeading: CompassPoint = .west guard: guard let name = nameField.text else { show(\"No name to submit\") return } ","date":"August 2, 2019","objectID":"/posts/2019-08-2-Swift-Notes/:1:0","tags":["Programming Languages"],"title":"Swift Notes","uri":"/posts/2019-08-2-Swift-Notes/"},{"categories":null,"content":"OOP Use init() super.init and self to make a constructor (similar to python): class Foo: Bar { var foobar: String init(foobar: String, name: String) { super.init(name: name) self.foobar = foobar } override func fooFunc() } let foo = Foo(foobar: \"hello\", name: \"world\") In a setter, the new value has the implicit name newValue. Use === and !== to see if two references are referring to the same object. A convenience initializer is like a helper, which always calls another initializer in the same class. convenience init() mutating func changes a property. willSet and didSet are property observers. ","date":"August 2, 2019","objectID":"/posts/2019-08-2-Swift-Notes/:2:0","tags":["Programming Languages"],"title":"Swift Notes","uri":"/posts/2019-08-2-Swift-Notes/"},{"categories":null,"content":"References The Swift Programming Language iOS Programming: The Big Nerd Ranch Guide App Development with Swift ","date":"August 2, 2019","objectID":"/posts/2019-08-2-Swift-Notes/:3:0","tags":["Programming Languages"],"title":"Swift Notes","uri":"/posts/2019-08-2-Swift-Notes/"},{"categories":null,"content":"Some notes for SQL","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":" Basics SELECT DELETE UPDATE ALTER References ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:0:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"Basics Create and use the database (MySQL as an example) CREATE DATABASE gregs_list; USE gregs_list; CREATE TABLE doughnut_list ( doughnut_id INT NOT NULL AUTO_INCREMENT, doughnut_name VARCHAR(10) DEFAULT NULL, doughnut_type VARCHAR(8) DEFAULT NULL, PRIMARY KEY (doughnut_id), FOREIGN KEY (doughnut_type) REFERENCES foo(doughnut_type) ); -- Variable Char, up to 10 and 8 chars. DESC doughnut_list; -- Describe the table. -- DROP TABLE doughnut_list; -- Delete the table. INSERT INTO doughnut_list (doughnut_name, doughnut_type) VALUES ('hello', 'world'); -- The order doesn't matter, but they must match SELECT * FROM doughnut_list; -- Show the table. * means all columns. SELECT doughnut_name FROM doughnut_list; -- Just show the name column SELECT * FROM doughnut_list WHERE doughnut_name = 'hello' AND doughnut_type = 'world'; -- Show the table selectively. = instead of == For INSERT, there are three variations from above: Changing the order of the columns, as long as the values match them in the same order. Omitting column names altogether, as long as we add all the values in the same order. Leaving some columns out, as long as the values we’re adding match the columns. \\' or '' to insert data with the single quote. Single line comments: --; multi-line comments: /**/. In the terminal: mysql -u root -p ... show databases; use foo; show tables; ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:1:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"SELECT \u003c\u003e means not equal. Use IS NULL to select null ones: WHERE doughnut_name IS NULL;. WHERE location LIKE '%CA'; selects all the values that end with CA. % replaces anything while _ replaces one letter. WHERE value BETWEEN 1 AND 10;. WHERE language IN ('Java', 'Python', 'C', 'C++'); is equivalent to using OR. Plus, we have WHERE language NOT IN ('Java', 'Python', 'C', 'C++');. NOT goes right after WHERE when used with BETWEEN and LIKE : WHERE NOT location LIKE '%CA'; WHERE NOT value BETWEEN 1 AND 10;. ORDER BY foo DESC, bar; can be added to the end (DESC means descending.) Select from two tables: SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID; LIMIT 100 limits the number of rows to 100. We can also use AS like SELECT invoice - payment - credit AS balance_due and SELECT CONCAT(first_name, ' ', last_name) AS full_name. ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:2:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"DELETE DELETE FROM doughnut_list WHERE doughnut_type = 'bar';. DELETE FROM doughnut_list; deletes the entire table. Use SELECT first to make sure what we’re deleting is correct. ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:3:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"UPDATE UPDATE doughnut_list SET doughnut_type = 'barbar' WHERE doughnut_type = 'bar';. Without WHERE, every possible one will be updated. Use comma to seperate different columns after SET. It can do basic math: SET cost = cost + 1. ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:4:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"ALTER ALTER TABLE doughnut_list ADD COLUMN doughnut_id INT NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (doughnut_id); FIRST, SECOND, LAST, BEFORE foo, AFTER foo can be used. ALTER TABLE doughnut_list RENAME TO foo;. ALTER TABLE doughnut_list CHANGE COlUMN foo bar INT; changes foo to bar with int. ALTER TABLE doughnut_list MODIFY COLUMN foo VARCHAR(10); changes the data type. We can also do FIRST or LAST. ALTER TABLE doughnut_list DROP COLUMN foo; deletes a column. ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:5:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"References Head First SQL ","date":"July 27, 2019","objectID":"/posts/2019-7-27-SQL-Notes/:6:0","tags":["Programming Languages"],"title":"SQL Notes","uri":"/posts/2019-7-27-SQL-Notes/"},{"categories":null,"content":"Some handy tips for Bash","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":" Basics Writing Scripts Advanced Tricks Resources ","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/:0:0","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":"Basics cd alone goes to the home directory. ls -lt gives the long format and sorted by modification time. file foo.txt gives the file type. less foo.txt gives the content of the file. We can double click a filename to copy it. cp copies the files. mv moves the files or renames the files. ln creates links. Use | to combine commands. Control A goes to the beginning. Control R goes to revere searching in the history. zip -r foo.zip foo zips the file/directory. unzip foo.zip unzips. grep regex foo.txt searches in foo.txt . -i for case-insensitive -v for inversion find . -name \"foo*\" finds the files with the name foo* . exec zsh and exec bash switch between the two shells. Control N clears the current line. ","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/:1:0","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":"Writing Scripts Put #!/bin/bash at the beginning of the script. Use chmod 755 foo.sh to make the script executable for everyone. (700 for the owner only.) ","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/:2:0","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":"Advanced Tricks touch {a..z}{0001..0100}.txt creates multiple files at once. grep -r \"hello\" . searches for hello recursively in the current directory. wget --no-parent -r https://cnds.jacobs-university.de/courses/os-2019/src/ gets the content recursively. find . -name \"*html*\" -delete removes all files containing html. command \u0026 to run the command in the background. ","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/:3:0","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":"Resources The Linux Command Line: A Complete Introduction ","date":"July 24, 2019","objectID":"/posts/2019-7-24-Bash-Tips/:4:0","tags":["Programming Languages"],"title":"Bash Tips","uri":"/posts/2019-7-24-Bash-Tips/"},{"categories":null,"content":"Some notes for JavaScript","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":" Basics Numbers Functions OOP DOM (Document Object Model) Handling events Pitfalls JSON Asynchronicity References ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:0:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Basics Variables: Global variables live as long as the page. If we forget to declare a variable before using it, it’ll always be global even if we first use it in a function. let creates block-level variables. const creates constants. var is the traditional way of declaring variables. // i visible here (undefined). for (var i = 0; i \u003c 3; i++) { // i visible here. } // i visible here. // let i = 0 makes i only visible in the for loop. let a = 1, b = 2; // Possible to declare multiple variables in one line. undefined vs null vs isNaN(): undefined is used for: Unassigned/ Uninitiated variables; A missing property for an object; A missing value for an array; null is used for uncreated objects (like .getElementById()’s returned value;) NaN is a number that can’t be represented (0/0). === is the strict equality check (both the type and value) while == is not strict. === between two object references will be true only if they refer to the same object. Strings: // There's no character type in JS. 'hello'.length; // 5 'hello'.charAt(1); // 'e' 'hello'.toUpperCase(); // 'HELLO' '1' + 2 + 3; // '123' 1 + 2 + 3; // '33' '' + 2; // '2'. A useful way to convert to string. 'A' === '\\u0041'; // \\ is the escape character. const foo = 42; `The answer is ${foo}`; // Back ticks give us template literals. They also allow multiline strings. // JS uses UTF-16, which is not enough for all the symbols. So a single 16-bit code unit is used for common characters but two code units are used for rare ones. Like Python, JavaScript also has truthy and falsy booleans: false: false, 0, ‘’, NaN, null, undefined. true: all the others. Two other ways of for loops: let list = [4, 5, 6]; for (let i in list) { console.log(i); // \"0\", \"1\", \"2\". Indices only. } for (let i of list) { console.log(i); // \"4\", \"5\", \"6\". Values } Arrays are a special type of object: let array = ['dog', 'cat', 'panda']; array.length; // 3 array[100] = 'fox'; // Create a sparse array. array.length; // 101. typeof array[90]; // undefined. array.push('new_item'); let new_item = array.pop(); // new_item. array.forEach(element =\u003e console.log(element)); delete array[1]; // Because arrays are really objects. typeof array; // object. let foo = array.concat([1, 2, 3]); // ['dog', 'cat', 'panda', 1, 2, 3]. let bar = array.join('#'); array.reverse(); array.sort(function (a, b) { return a - b; }); array.slice(1, 3); // Like in Python. let squared = array.map(a =\u003e a * a); let filtered = array.filter(a =\u003e a.length \u003e 3); /**/ can also occur in regular expression literals, so it’s recommended to use // instead. regexp.test(string) returns true if the string matches. let re1 = /abc/; and let re1 = new RegExp('abc'); are equivalent. Destructuring (similar to Python and Kotlin): const x = [1, 2]; const [y, z] = x; // y = 1, z = 2. let a = 1, b = 2; [a, b] = [b, a]; // Swap like in Python. Exceptions: throw new Error('Foo.'); try { } catch (e) { } Maps are better than objects for key-value pairs, as prototype properties are also present in objects. And objects can only have strings as keys. let ages = new Map(); ages.set('Bob', 1); ages.set('Jack', 10); ages.set('Kate', 0); ages.get('Bob'); // 1. ages.has('Kate'); // True. 'use strict;' at the top of a file or a function body enables the strict mode to catch errors. import ordinal from \"ordinal\"; is the ES module syntax for importing. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:1:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Numbers Two built-in numeric types: Number and BigInt. Integers are implicitly floats (64-bit like Double): 3 / 2 = 1.5. This is good as short integer overflows are avoided. parseInt() and parseFloat(): parseInt('123'); // 123 parseInt('11', 2); // 3 parseInt('hi'); // NaN parseFloat('1.2'); // 1.2 parseFloat('123.2abc'); // 123.2. Parse until invalid char. NaN: Number.isNaN(NaN); // true. It's only true when the parameter is truly NaN. // The global isNaN gives unintuitive behavior, do not use! Infinity: 1 / 0; // Infinity - 1 / 0; // -Infinity isFinite(Infinity); // false isFinite(NaN); // false 1e2 is the same as 100. Math.floor() converts a number to an integer. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:2:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Functions JavaScript has first-class support for functions. Functions are linked to Function.prototype, which is self is linked to Object.prototype. The named parameters are more like guidelines: Calling a function without enough parameters gives undefined. Calling a function with more parameters than expected ignores the extra parameters. arguments is an array-like object holding all the values passed in. The rest parameter syntax ...args is preferred for ES6. We can also pass in an array with the spread operator ...numbers. function foo(...args) { for (let arg of args) {} } Anonymous functions: const foo = function() {}; // Equivalent to function foo(). // This is called a function expression, which is not hoisted (unlike function declaration). Arrow function expressions are compact alternatives to traditional functions, but they can’t be used in all situations. const animals = ['cat', 'dog', 'panda']; console.log(animals.map(animal =\u003e animal.length)); // Multiple arguments or no arguments require the parentheses. (a, b) =\u003e a + b; () =\u003e console.log('No arguments.'); // Multiline body requires braces and return. (a, b) =\u003e { let foo = 42; return a + b + foo; } let foo = a =\u003e a + 100; // Named function. JS has by default function scopes instead of block scopes, which means a variable defined anywhere in a function is visible everywhere in the function. This also causes it to be better to declare all the variables in a function at the top instead of as late as possible. (ONLY applicable to var instead of let.) function.apply(thisArg, argArray) sets this with the first parameter. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:3:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"OOP Objects are like Dictionaries in Python and HashMaps in Java. let obj = {}; is the preferred way to create an empty object. Classic prototype-based example: let foo = { name: \"bar\", coding: function() { this.name = \"coding bar\"; alert.log(\"I'm coding now.\"); }, age: 17 }; foo.height = 190; // This adds a new property. console.log(foo[\"name\"]); // Also works, though the dot notation is preferred. delete foo.age; // This deletes the property. for (let prop in foo) { // Print all properties. console.log(prop + \": \" + foo[prop]); } let bar = foo.bar || \"default\"; // || gives the default value, foo.bar.foobar; // Throw TypeError, as foo.bar is undefined. foo.bar \u0026\u0026 foo.bar.foobar; // Prevent TypeError. We use functions to define custom objects and prototypes to add methods. A prototype is an object shared by all instances of that class. This is similar to extension functions in Kotlin and Swift. We can do the same for built-in objects (augmenting types). function Person(first, last) { this.first = first; this.last = last; } Person.prototype.fullName = function() { return this.first + ' ' + this.last; }; let person = new Person('foo', 'bar'); Delegation is used for prototype chaining. A retrieval looks up the property in the object, then the prototype, then the prototype’s prototype, and eventually Object.prototype. typeof looks up the prototype chain. We can use hasOwnProperty() to check if the object has a property without looking up the chain: flight.hasOwnProperty('constructor'). Classes are built on prototypes, so they are also special functions. // Class declarations are not hoisted. class Rectangle { constructor(height, width) { this.height = height; this.width = width; } // Static can't be called with an instance. We must use the class name. static displayName = \"Foo\"; static bar() { console.log(\"I'm bar\"); } get area() { return this.calcArea(); } calcArea() { return this.height * this.width; } }; const square = new Rectangle(10, 10); console.log(square.area); square.displayName; // undefined. Rectangle.displayName; // Correct! // Class expressions are hoisted. let Rectangle = class { constructor(height, width) { this.height = height; this.width = width; } }; class Square extends Polygon { constructor(length) { super(length, length); // Note: In derived classes, super() must be called before you // can use 'this'. Leaving this out will cause a reference error. this.name = 'Square'; } get area() { return this.height * this.width; } } a instanceof b is the same as Python’s isinstance(a, b). ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:4:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"DOM (Document Object Model) document.getElementById(\"foo\").innerHTML gives the content of the html element with the id ‘foo’. JavaScript does this by interacting with the DOM. foo.setAttribute(\"class\", \"bar\") sets the attribute and var text = document.getElementById(\"bar\").getAttribute(\"alt\") gets the ‘alt’ attribute. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:5:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Handling events onclick: const image = document.getElementById(\"foo\"); image.onclick = bar(); function bar() { let img = document.getElementById(\"foo\"); img.src = \"new.png\"; // We can change the property when we have the element. } const images = document.getElementsByTagName(\"img\"); // Get a bunch for (let i = 0; i \u003c images.length; i++) { images[i].onclick = bar(); } ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:6:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Pitfalls typeof null gives object. A better null test is simply foo === null. typeof [] also gives object. typeof NaN gives number. parseInt('16 tons') returns 16 without warnings. NaN === NaN returns false. Always use === and !== to avoid surprises. Bitwise operations in JS are very slow and far from the hardware, as JS doesn’t have integers and have to to conversions. JS declarations are hoisted. This means a variable with var can be used before the declaration. Hoisting moves all declarations to the top of the scope. If we forget to use new, this is bound to the global object and the function will clobber global variables. Avoid void. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:7:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"JSON JSON strings use double quotes. All property names are strings. No functions or comments allowed. JSON.parse() converts JSON into a JS object. JSON.stringify() converts a JS object to a JSON string. ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:8:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Asynchronicity Promise is like Future in Java. const promise2 = doSomething().then(successCallback, failureCallback); // Chaining: doSomething() .then(result =\u003e doSomethingElse(result)) .then(newResult =\u003e doThirdThing(newResult)) .then(finalResult =\u003e { console.log(`Got the final result: ${finalResult}`); }) .catch(failureCallback); const myPromise = new Promise((resolve, reject) =\u003e { setTimeout(() =\u003e { resolve('foo'); }, 300); }); // Promise.all rejects immediately when any input rejects. var p1 = Promise.resolve(3); var p2 = 1337; var p3 = new Promise((resolve, reject) =\u003e { setTimeout(() =\u003e { resolve(\"foo\"); }, 100); }); Promise.all([p1, p2, p3]).then(values =\u003e { console.log(values); // [3, 1337, \"foo\"]. }); async and await are like in Dart. Async functions always return a promise. async function foo() { // This returns a different reference. return 1; } // is similar to function foo() { // This returns the same reference. return Promise.resolve(1); } async function foo() { await 1; } // is equivalent to function foo() { return Promise.resolve(1).then(() =\u003e undefined); } // Rewrite chaining: function getProcessedData(url) { return downloadData(url) // returns a promise .catch(e =\u003e { return downloadFallbackData(url); // returns a promise }) .then(v =\u003e { return processDataInWorker(v); // returns a promise }) } async function getProcessedData(url) { let v; try { v = await downloadData(url); } catch (e) { v = await downloadFallbackData(url); } return processDataInWorker(v); } ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:9:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"References A re-introduction to JavaScript (JS tutorial) Head First JavaScript Programming: A Brain-Friendly Guide, 1st Edition https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions JavaScript: The Good Parts by Douglas Crockford https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function ","date":"July 15, 2019","objectID":"/posts/2019-07-15-JavaScript-Notes/:10:0","tags":["Programming Languages"],"title":"JavaScript Notes","uri":"/posts/2019-07-15-JavaScript-Notes/"},{"categories":null,"content":"Some notes for Android Development","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Table of Contents Table of Contents Basics App Resources Permissions Gradle Layout Activities Fragments Notifications Android Studio Tips Miscellaneous Resources ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:1:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Basics Layout is typically defined in XML, whereas activities are in Java class. The Android operating system is a multi-user Linux system in which each app is a different user. ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:2:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"App Resources String array: android:entries=\"@array/foo\". \u003cstring-array name=\"foo\"\u003e \u003citem\u003ebar1\u003c/item\u003e \u003citem\u003ebar2\u003c/item\u003e \u003c/string-array\u003e Creating alias resources: \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003cdrawable name=\"icon\"\u003e@drawable/icon_ca\u003c/drawable\u003e \u003c/resources\u003e Styles and Themes Referencing style attributes: android:textColor=\"?android:textColorSecondary Support different pixel densities Declare restricted screen support ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:3:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Permissions Request App Permissions Use an intent instead ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:4:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Gradle compileSdkVersion vs targetSdkVersion vs minSdkVersion: compileSdkVersion: The app can use all the API features from this version and lower. targetSdkVersion: The version we’ve tested our app. minSdkVersion: The minimum version the app can support. ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:5:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Layout \u003cEditText\u003e is an editable text field: android:hint=\"@string/hint\": normally “Enter a message”, telling the user what to type; android:ems=\"10\": 10-M space. android:layout_weight=\"number\" makes a view stretch. If a has the weight of 1 and b has 2, a’ll have 1/3 and b’ll have 2/3 of the screen. We usually have android:layout_height=\"0dp\" (for vertical layout) above layout_weight. android:gravity=\"top\" moves the CONTENT of a view to the top of the view, whereas android:layout_gravity=\"end\" moves the placement of the VIEW itself to the end. \u003cFrameLayout\u003e\u003c/FrameLayout\u003e allows views to overlap. Ues it when we need to replace the fragments and add the changes to the back stack. Surround LinearLayout/FrameLayout with \u003cScrollView\u003e\u003c/ScrollView\u003e to get a vertical scrollbar. (HorizontalScrollView for the horizontal scrollbar.) A CoordinatorLayout allows the behavior of one view to affect the behavior of another. AdapterView: ArrayAdapter\u003cString\u003e adapter = new ArrayAdapter\u003cString\u003e(this, android.R.layout.simple_list_item_1, myStringArray); ListView listView = (ListView) findViewById(R.id.listview); listView.setAdapter(adapter) // Create a message handling object as an anonymous class. private OnItemClickListener messageClickedHandler = new OnItemClickListener() { public void onItemClick(AdapterView parent, View v, int position, long id) { // Do something in response to the click } }; listView.setOnItemClickListener(messageClickedHandler); Create a List with RecyclerView Re-using layouts with include: \u003cmerge\u003e\u003c/merge\u003e \u003cinclude layout=\"@layout/foo\"/\u003e Spinners: Spinner s1 = (Spinner) findViewById(R.id.spinner1); ArrayAdapter adapter = ArrayAdapter.createFromResource( this, R.array.colors, android.R.layout.simple_spinner_item); adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); s1.setAdapter(adapter); s1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView\u003c?\u003e parent, View view, int position, long id) { // TODO } @Override public void onNothingSelected(AdapterView\u003c?\u003e parent) { // sometimes you need nothing here } }); Buttons Set onClick programmatically: Button button = (Button) findViewById(R.id.button_send); button.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { // Do something in response to button click } }); findViewById(R.id.button_send).setOnClickListener { foo(it) } // or findViewById(R.id.button_send).setOnClickListener { view -\u003e //... } Checkboxes Radio Buttons Switch Buttons android:checked=\"true\" android:textOff=\"OFF\" android:textOn=\"ON Switch sw = (Switch) findViewById(R.id.switch1); sw.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked) { // The toggle is enabled } else { // The toggle is disabled } } }); Pickers (Time/Date Pickers) Centralized onClick events: public class ActivityA extends Activity implements View.OnClickListener { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); findViewById(R.id.first).setOnClickListener(this); findViewById(R.id.second).setOnClickListener(this); findViewById(R.id.third).setOnClickListener(this); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.first: // Manage click. break; case R.id.second: // Manage click. break; case R.id.third: // Manage click. break; } } } App bar: Set up the app bar (Use Toolbar instead of the native ActionBar) and Add an up action android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\" \u003candroid.support.v7.widget.Toolbar android:id=\"@+id/my_toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:background=\"?attr/colorPrimary\" android:elevation=\"4dp\" android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\" app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"/\u003e \u003c!-- A child of the main activity --\u003e \u003cactivity and","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:6:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Activities All activities have to extend the Activity class or its subclass. R is a special Java class that enables you to retrieve references to resources. TextView foo = findViewById(R.id.foo) Use Intent to call another activity (can be from other apps): Explicit intent: public void onSendMessage(View view) { Intent intent = new Intent(this, FooActivity.class); // explicit intent intent.putExtra(\"message\", value); // message is the name of the extra startActivity(intent); } ... Intent intent = getIntent(); String string = intent.getStringExtra(\"message\"); Implicit intent: (with actions to allow users to choose which app to run) Intent intent = new Intent(Intent.ACTION_SEND); // ACTION_DIAL/ACTION_WEB_SEARCH intent.setType(\"text/plain\"); intent.putExtra(Intent.EXTRA_TEXT, messageText); String chooserTitle = getString(R.string.chooser); // Ensure that the user always get the chance to choose an activity Intent chosenIntent = Intent.createChooser(intent, chooserTitle); // Start an activity if it's safe if (intent.resolveActivity(getPackageManager()) != null) { startActivity(chosenIntent); } Common Intents Save the instance state: // Either in onCreate savedInstanceState != null or use the method below public void onRestoreInstanceState(Bundle savedInstanceState) { super.onRestoreInstanceState(savedInstanceState); seconds = savedInstanceState.getInt(\"seconds\"); running = savedInstanceState.getBoolean(\"running\"); } @Override public void onSaveInstanceState(Bundle savedInstanceState) { super.onSaveInstanceState(savedInstanceState); savedInstanceState.putInt(\"seconds\", seconds); savedInstanceState.putBoolean(\"running\", running); } Activity lifecycle: When we implement them (onCreate(), onStart(), onResume(), onPause(), onStop(), onRestart(), onDestroy()), we must call the super class methods. onResume() is called when the activity is started OR resumed; onPause() is called when the activity is paused OR stopped. Defining launch modes (singleTop, singleTask, etc.) ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:7:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Fragments Fragment lifecycle: Example: public static class ExampleFragment extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // Inflate the layout for this fragment return inflater.inflate(R.layout.example_fragment, container, false); // In this case, this is false because the system is already inserting the inflated layout into the container } } Add the fragment programmatically: FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); ExampleFragment fragment = new ExampleFragment(); fragmentTransaction.add(R.id.fragment_container, fragment); fragmentTransaction.commit(); Fragment transactions: Example: // Create new fragment and transaction Fragment newFragment = new ExampleFragment(); FragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); // Replace whatever is in the fragment_container view with this fragment, // and add the transaction to the back stack transaction.replace(R.id.fragment_container, newFragment); transaction.addToBackStack(null); // Commit the transaction transaction.commit(); For dynamic fragments, use FrameLayout instead of Fragment and use FragmentTransaction. ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:8:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Notifications Create a Notification ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:9:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Android Studio Tips Improve code inspection with annotations (@Nullable, @NonNull…) Find sample code Tools attributes reference (tools:text=\"foo\", tools:itemCount=\"3\"...) Debug your app ( private static final String TAG = \"MyActivity\"; Log.d(TAG, \"foo\");) Write and View Logs with Logcat (e (error), w (warning), i (information), d (debug), v (verbose)) Debug Your layout with Layout Inspector Manage your app’s UI resources with Resource Manager Create app icons with Image Asset Studio Create resizable bitmaps (9-Patch files) Add Android App Links ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:10:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Miscellaneous Android builds the back stack to keep track of the activity/fragment transactions. Create Deep Links to App Content: \u003cintent-filter\u003e ... \u003cdata android:scheme=\"https\" android:host=\"www.example.com\" /\u003e \u003cdata android:scheme=\"app\" android:host=\"open.my.app\" /\u003e \u003c/intent-filter\u003e Verify Android App Links Adding Swipe-to-Refresh To Your App (Add SwipeRefreshLayout as the parent of a single ListView or GridView.) (android.support.v4.widget.SwipeRefreshLayout) Responding to Refresh Request mySwipeRefreshLayout.setOnRefreshListener( new SwipeRefreshLayout.OnRefreshListener() { @Override public void onRefresh() { Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\"); // This method performs the actual data-refresh operation. // The method calls setRefreshing(false) when it's finished. myUpdateOperation(); } } ); // For refreshing in the app bar @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { // Check if user triggered a refresh: case R.id.menu_refresh: Log.i(LOG_TAG, \"Refresh menu item selected\"); // Signal SwipeRefreshLayout to start the progress indicator mySwipeRefreshLayout.setRefreshing(true); // Start the refresh background task. // This method calls setRefreshing(false) when it's finished. myUpdateOperation(); return true; } // User didn't trigger a refresh, let the superclass handle this action return super.onOptionsItemSelected(item); } ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:11:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Resources Head First Android Development: A Brain-Friendly Guide 2nd Edition https://developer.android.com ","date":"July 10, 2019","objectID":"/posts/2019-07-10-Android-Development-Notes/:12:0","tags":["Mobile Development"],"title":"Android Development Notes","uri":"/posts/2019-07-10-Android-Development-Notes/"},{"categories":null,"content":"Some notes for Django","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":" Start the Django project (foo as the project name and bar as the app name) The admin site The Django shell (Control-d to exit) Making pages References ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:0:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"Start the Django project (foo as the project name and bar as the app name) Create a virtual environment (where we can install packages and isolate them from all other packages): (venv is the virtual environment module.) python3 -m venv foo Activate the virtual environment: (Packages inside will be available only when the environment is active.) (use deactivate to deactivate.) source foo/bin/activate Install Django (Note: use python and pip instead of python3 or pip3) in the virtual environment. pip install django Start the project. (The dot at the end creates the project with a directory structure, i.e. with __init__.py, settings.py, urls.py, and wsgi.py (web server gateway interface.)) django-admin startproject foo . Create the database (SQLite): (Run the command anytime we modify the database.) python manage.py migrate Start and view the project: python manage.py runserver A Django project is a group of individual apps that work together. Let’s start an app: （creating the following in the bar folder: __init__.py, admin.py, apps.py, migrations, models.py, test.py, and view.py.） python manage.py startapp bar Code-wise, a model is just a class. An example model: from django.db import models # Create your models here. class Topic(models.Model): \"\"\"The class that manages the topic the user is learning about.\"\"\" text = models.CharField(max_length=200) date_added = models.DateTimeField(auto_now_add=True) def __str__(self): \"\"\"The string representation of the model.\"\"\" return self.text Activate the models: Add the apps to INSTALLED_APPS in settings.py; INSTALLED_APPS = [ # My apps 'bar', # Default django apps 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] Migrate: python manage.py makemigrations bar python manage.py migrate ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:1:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"The admin site Add a superuser: (Django only stores the hash of the password) python manage.py createsuperuser Register the model with the admin site. Example admin.py: from django.contrib import admin # Register your models here. from .models import Topic, Entry # . means looking for the file in the same directory as admin.py admin.site.register(Topic) admin.site.register(Entry) ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:2:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"The Django shell (Control-d to exit) Example: python manage.py shell \u003e\u003e\u003e from bar.models import Topic \u003e\u003e\u003e Topic.objects.all() # returns a queryset ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:3:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"Making pages Defining URLs: Include the URLs in foo/urls.py: from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('bar.urls')), ] Create a new bar/urls.py file and add the following: from django.urls import path from . import views app_name = 'bar' urlpatterns = [ # a list of individual pages that can be requested. # Homepage path('', views.index, name='index'), # '' means the base URL; call the index() function in views.py ] Writing views: from django.shortcuts import render def index(request): \"\"\"The homepage.\"\"\" return render(request, 'bar/index.html') Writing templates: Make the directory bar/templates/bar Write the file index.html: \u003cp\u003eLearning Log\u003c/p\u003e \u003cp\u003eLearning Log helps you keep track of your learning, for any topic you're learning about.\u003c/p\u003e If we see the error: ModuleNotFoundError: No module named 'learning_logs.urls', just CTRL-C and rerun the server by python manage.py runserver. Template inheritance: Make a base.html file and include it on every page: (template tag:{percent percent}; bar is the namespace defined in bar/urls.py app_name) (in reality, use % instead of percent! here is just for avoiding the markdown error.) \u003cp\u003e \u003ca href=\"{percent url 'bar:index' percent}\"\u003eFoo\u003c/a\u003e \u003c/p\u003e {percent block content percent}{percent endblock content percent} Inherit the base.html: (index.html) {percent extends \"bar/base.html\" percent} {percent block content percent} \u003cp\u003eLearning Log helps you become a better learner by keeping track of the topic you're learning.\u003c/p\u003e {percent endblock content percent} ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:4:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"References Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming ","date":"June 9, 2019","objectID":"/posts/2019-06-09-Django-Notes/:5:0","tags":["Web Development","Frameworks"],"title":"Django Notes","uri":"/posts/2019-06-09-Django-Notes/"},{"categories":null,"content":"Some notes for Java","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":" Basics Java Data Structures References and Garbage Collection Static Exceptions I/O Constructors Polymorphism References ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:0:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Basics SourceCode.java -\u003e Compile (javac source_code.java) -\u003e Java bytecode (SourceCode.class) -\u003eRun by the Java Virtual Machine (java SouceCode) Write once, run anywhere! Every Java app must have at least one class and at least one main method (one main per app not per class.) public static void main (String[] args) { // code } int rand = (int) (Math.random() * 10) to get random integers in range [0, 9]. (Math is a Java class.) To use float, we need to append f to the value. This is because Java treats everything with a floating point as double: float f = 3.14f Instance variables always get a default value, even if we don’t initialize it: int 0; float 0.0; boolean false; reference null. Use == for primitive types and references; .equals() for different objects (for example string objects). (== checks the reference/address and .equals checks the content.) public class Test { public static void main(String[] args) { String s1 = new String(\"HELLO\"); String s2 = new String(\"HELLO\"); System.out.println(s1 == s2); // false System.out.println(s1.equals(s2)); // true } } Integer.parseInt(\"42\") converts a string to an int using the Java Integer class. The Stack and the Heap: The Stack: all method invocations and local variables (aka, stack variables) live here. The method on the top of the stack is always the currently executing method. When it’s removed from the stack, the method is executed, which the executing sequence for constructor chaining. The Heap: all objects live here. Also know as the garbage-collectible heap. Instance variables live inside the objects. If the local variable is a reference to an object, the variable (the reference) goes on the stack, and the object is still on the heap. Use String.valueOf() to convert nearly anything (including a char array) to String. C printf() like formatting: String s = String.format(%d, 1); System.out.println(s); .length for primitive types (e.g. int[], String[]), .length() for objects (e.g. String). And .size() for collections. Integer.MAX_VALUE and Integer.MIN_VALUE. ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:1:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Java Data Structures ArrayList: (inside the java.util (utility) class) (for primitive types, Java 5 and above enabled autoboxing: ArrayList\u003cInteger\u003e) import java.util.* class Foo { public static void main(String[] args) { List\u003cString\u003e A = new ArrayList\u003cString\u003e(); A.add(\"hello\"); A.add(\"world\"); System.out.println(\"Size is: \" + A.size()); System.out.println(\"Contains hello? \" + A.contains(\"hello\")); System.out.println(\"Index of hello? \" + A.indexOf(\"hello\")); A.remove(\"hello\"); // by value A.remove(0); // by index System.out.println(\"Empty? \" + A.isEmpty()); } } Arrays.asList(foo) and .toArray(new int[0]) Comparator: Arrays.sort(intervals, new Comparator\u003cint[]\u003e() { @Override public int compare(int[] interval1, int[] interval2) { return interval1[0] - interval2[0]; // negative, smaller; 0, equal; positive, bigger } }); When using an interface, we usually use implementations like: List\u003cT\u003e = new ArrayList\u003cT\u003e(), Queue\u003cT\u003e = new LinkedList\u003cT\u003e() Array: int[] array = new int[]{1,2,3}; Array static methods: binarySearch(A, 42), copyOf(A), sort(A). String: Methods: charAt(1), indexOf('A'), replace('a', 'A'), replace(\"a\", \"abc\"), substring(1,4), toCharArray(), toLowerCase(), String[] words = s.split(\" \") if (string == null || string.isEmpty()) StringBuilder: String reversed = new StringBuilder(s).reverse().toString(), .trim() (removes leading and trailing spaces) Map: Initialize a map: Map\u003cCharacter, Integer\u003e map = new HashMap\u003cCharacter, Integer\u003e() { { put('I', 1); put('V', 5); put('X', 10); } }; for (int i : map.keySet()); or for (Map.Entry\u003cString, Object\u003e entry : map.entrySet()) { String key = entry.getKey(); Object value = entry.getValue(); // ... } map.put(i, map.get(i)+1); map.containsKey(); A TreeMap is a binary search tree (SortedMap) implementation. It’s naturally sorted by keys. SortedMap\u003cInteger, String\u003e sm = new TreeMap\u003cInteger, String\u003e(); ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:2:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"References and Garbage Collection Garbage collection: Book b = new Book(); Book c = new Book(); // By far, 2 references and 2 objects. Book d = c; // d and c refer to the same object // 3 references and 2 objects. c = b; // c refers to b's object now // 3 references and 2 objects. Book b = new Book(); Book c = new Book(); b = c; // b and c refer to the same object // 2 references, 1 reachable object, 1 abandoned object. // b's original object eligible for garbage collection c = null; //null reference // 1 active reference, 1 reachable object Array of objects: Book[] books; books = new Book[10]; // By far, only an array of references, no objects created. // To create the objects: for (int i = 0; i \u003c 10; i++) { Book[i] = new Book(); } ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:3:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Static All static variables are initialized before any object can be created. public class foo { static int count = 0; public increment() { count++; } } Static final variables are constants: public static final double PI = 3.141592653589793; (In uppercase by convention.) Or we can use the static initializer which runs before any code in the class: public class foo { static { // code`` } } ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:4:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Exceptions The method that throws must declare throws Exception: public class Solution { public static void main(String args[] ) throws Exception { throw new IllegalArgumentException(\"Invalid Input\"); } } The finally block always runs no matter what: try { // code } catch (//some exception) { // code } finally { // code } ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:5:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"I/O Example: import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = scanner.nextLine(); // Numerical input int age = scanner.nextInt(); double salary = scanner.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } } ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:6:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Constructors Invoking an overloaded constructor: call this();. However, we can only call this() OR super(), never both inside a constructor. public class Bar extends Foo { String name; public Bar() { this(\"Hello\"); // MUST BE THE FIRST STATEMENT!!! // code } public Bar(name) { // code } } ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:7:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Polymorphism With polymorphism, the reference type can be a superclass of the object type. Animal[] animals = new Animal[2]; animals[0] = new Dog(); animals[1] = new Cat(); for (Animal animal : animals) { animal.make_sound(); // mew and bark } We can also have polymorphic arguments and return types. (When a superclass type is requested, a subclass is sufficient to use.) Rules for overriding: Arguments must be the same, and return types must be compatible. The method can’t be less accessible. Abstract: Use abstract to make the base class abstract. public abstract class animal {} (can’t be instantiated.) Use abstract to make a method abstract public abstract void eat(); (also no method body!) Abstract methods must be put in abstract classes. We must implement abstract methods by overriding. Every class in Java extends the Object class which has the methods like: .equals(), .hashCode(), .getClass(). ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:8:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"References Head First Java, 2nd Edition https://www.geeksforgeeks.org/difference-equals-method-java/ ","date":"June 5, 2019","objectID":"/posts/2019-06-05-Java-Notes/:9:0","tags":["Programming Languages","Java"],"title":"Java Notes","uri":"/posts/2019-06-05-Java-Notes/"},{"categories":null,"content":"Some handy tips for Git","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":" Basics .gitignore Log Compare Reverting Remotes Tags Branching Deleting a repository Submodules References ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:0:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Basics Git - more like a mini filesystem - thinks about its data more like a stream of snapshots, unlike other delta-based version control systems (Subversion.) Unlike CVCS, nearly every operation in Git is local. Git has integrity. Everything is checksummed. It uses SHA-1 to store everything in it’s DB. Git generally only adds data. Git has three stages: modified, staged, and committed. And it has three main sections: The working tree: a single checkout of one version of the project. Files are pulled out of the compressed DB in the Git directory and placed on the disk for modifications. The staging area: - aka index - a file that stores info about what will go into the next commit. The Git directory: - .git - stores the metadata and object DB. git commit --amend: git commit -m \"Initial commit\" git add forgotten_file git commit --amend Then we’ll have one single commit. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:1:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":".gitignore When we want to ignore certain files or folders, create a .gitignore file and add the file/folder name inside: file.txt # a single file folder/ # a folder named `folder` *.txt # all txt files If a file is already tracked, use git rm --cached foo.txt to remove it first from the git repo. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:2:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Log When we want to get a simpler version of the log, use git log --pretty=oneline. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:3:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Compare Compare the diff between two branches: git diff branch_1..branch_2 # Or if already in branch_1: git diff ..branch_2 Compare the commits between two branches: git log master..branch-X # Or if already in branch-X: git log master.. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:4:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Reverting Use git checkout . to revert to the last commit before adding the new changes. Use git checkout plus the first 6 characters of the reference ID to check out the old commits. This enters the detached HEAD state. And it’s best not to make changes when checking out old commits. Use git checkout master to go back the master branch. Use git reset --hard plus the first 6 character of the reference ID to reset the project to the old commit. git reset HEAD README.md to unstage the file. git checkout -- README.md to discard the changes for the file. git checkout ffffff -- foo.txt bar.txt reverts the two files back to commit ffffff. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:5:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Remotes git remote -v to see all the remotes verbosely with URLs. origin is the default name. git pull = git fetch + git merge. git push \u003cremote\u003e \u003cbranch\u003e: git push origin master. git remote show \u003cremote\u003e to see details of a remote. git remote rename \u003cold_remote\u003e \u003cnew_remote\u003e and git remote remove \u003cremote\u003e. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:6:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Tags Annotated tags: git tag -a v1.0 -m \"my first tag\". git tag to see the tags git show v1.0 to show the details. Lightweight tags: git tag v1.0-lw (just provide a tag name only). It’s a commit checksum - no other info is kept. Add tags for previous commits: git tag -a v1.0 \u003clog_number\u003e. git push doesn’t push tags to the remote servers. We need git push origin \u003ctag_name\u003e or git push origin --tags for all tags. git tag -d \u003ctag_name\u003e and git push origin --delete \u003ctag_name\u003e for deletion. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:7:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Branching git branch \u003cbranch_name\u003e creates a new branch. git checkout \u003cbranch_name\u003e moves HEAD to the branch. The shorter version is git checkout -b \u003cbranch_name\u003e to do both at the same time. git log --oneline --decorate shows the branch pointers. git log --oneline --decorate --graph --all shows the divergence. Branches are cheap since they are essentially a file that has the 40-character checksum of the commit pointed to. git checkout master + git merge hotfix will fast-forward (or use the recursive strategy) the master branch to the match the hotfix branch. Then git branch -d hotfix deletes it. In case of merge conflict, we need to choose one side or merge the contents ourselves. Then add and commit the file again. git branch -v shows the last commit of each branch. git branch --merged and git branch --no-merged shows the branched that are already merged to the current branch or not yet respectively. Or git branch --no-merged master. git checkout experiment + git rebase master + git checkout master + git merge experiment gives a fast-forward merge. git stash is a convenience tool. But since branching is cheap, we can always branch and then delete it. git branch -a to see all the branches. git fetch and git checkout -b test remotes/origin/test creates a local test branch and connects it with the remote branch. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:8:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Deleting a repository We can either delete the .git directory in a file browser or use rm -rf .git. ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:9:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Submodules Update all: git submodule foreach git pull ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:10:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"References Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming Pro Git, 2nd Edition ","date":"May 25, 2019","objectID":"/posts/2019-05-25-Git-Tips/:11:0","tags":["Tools","Version Control"],"title":"Git Tips","uri":"/posts/2019-05-25-Git-Tips/"},{"categories":null,"content":"Some notes for Python","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":" Basics Strings Numbers Lists Tuples Dictionaries Sets Input Functions OOP Random Files Exceptions Testing Install Packages PEP8 Virtual Environments Decorators Generators Miscellaneous References ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:0:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Basics If-elif-else dir(random) prints all the attributes of the random module. help(random.randint) gives the help. Everything in Python is an object. Python is object-based. type() gives the type of the object. bool() returns False if it’s False/0/empty/None; it returns True if it’s not empty. Generator is surrounded by parentheses: (it produces one item at a time, unlike listcomp that produces all data at once). for i in (x * 3 for x in [1,2,3,4,5]): print(i) is checks if the two variables refer to the same object. if a is None: ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:1:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Strings Change Case:.title() .upper() .lower() f-strings are preferred. name = 'foo' print(f'The name is {name}.') Stripping Whitespace: .lstrip() .rstrip() .strip() join: joins the elements of an iterable (list/tuple/dictionary) into a single string: A = ['A', 'B', 'C'] x = '#'.join(A) # A#B#C Multiline string (’ and ’ are equivalent): a = ''' First line second line third line ''' string to list: string.split('delimiter') my_string = 'Hello World' my_list = my_string.split(' ') # ['Hello', 'World'] Be consistent with single and double quotes. For triple-quoted strings, always use double quotes. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:2:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Numbers We can group digits using underscores to make large numbers more readable: universe_age = 14_000_000_000 print(universe_age) # Output: 14000000000 Multiple Assignment: x, y, z = 1, 2, 3 Constants: no-built in constants, use uppercase as a convention (like in C/C++): MAX = 100 Exponential: Use **: a = 2 ** 3 range(): range(1, 11, 2) is 1, 3, 5, 7, 9 ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:3:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Lists Adding: Insert: A.insert(0, foo) Append: A.append(foo) Concatenate: A += B Removing: By index del: del A[0] pop(): last = A.pop() first = A.pop(0) By value remove(): A.remove('foo') Organizing: Sorting (Alphabetically): A.sort() A.sort(reverse=True) print(sorted(A)) Reversing (Chronologically): A.reverse() min(A) max(A) sum(A) List Comprehensions: A = [a ** 2 for a in range(1,3)] A = [1,4] foo = [k for k,v in foo_dictionary.items()] Slicing (not end-inclusive): A = [0, 1, 2, 3, 4] print(A[1:4]) gives 1,2,3 print(A[:4]) is equivalent to print (A[0:4]) print(A[1:]) is equivalent to print (A[1:5]) print(A[-3:]) is equivalent to print (A[2:]) print(A[0:5:2]) or print(A[::2]) gives every second letter. print(A[::-1]) prints backwards. Slicing is nondestructive, while list methods change the state of a list. Copying: B = A[:] (full slicing) instead of B = A. Or B = A.copy(). Checking existence: A = [1,2,3,4,5] if 1 in A: print('1 in A') if 6 not in A: print('6 not in A') With while loops: while A: # while A is not empty while 1 in A: # while there is 1 in A enumerate(): for i, item in enumerate(a): print(f'{i} - {item}') ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:4:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Tuples Tuples can’t be modified: A = (1, 2) A[0] = 3 doesn’t work. (Immutable list) But tuples can be reassigned: A = (1, 2) A = (3, 2) works. For a single-object tuple like t = ('Python'), it becomes a string. But if we add a comma, it becomes a tuple t = ('Python',) ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:5:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Dictionaries Basic usage: A = {'language': 'python', 'age': 19} print(A['language']) A['height'] = 190 # adding a new pair A['language'] = 'C++' # modifying get() (When not sure if the key exists): print (A.get('weight', 'no weight assigned')) (preferred) Looping through: for k, v in A.items(): # keys and values for k in A.keys(): # equivalent to the line below for k in A: # since looping through the keys is default for k in sorted(A.keys()) # sorted for v in A.values(): # just values for v in set(A.values()): # unique values Lists and dictionaries can be nested into each other or themselves. Check for membership with in and not in: if 'bananas' in fruits: fruits['bananas'] += 1 else: # not in fruits['bananas'] = 1 setdefault() to avoid KeyError: x = fruits.setdefault(fruit, 0) (it returns the value. If it doesn’t exist, insert the key with the specified value.) import pprint pprint.pprint() pretty-print for complex data structures. Dictionary comprehension: flights = {k: v.title() for k, v in flights.items() if v == 'foo'} # optional filter ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:6:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Sets Basic usage: empty_set = set() languages = {'python', 'C++', 'C', 'python'} print(languages) # Output {'python', 'C++', 'C'} word = 'hello' wordSet = set(word) .union(), .difference(), .intersection() Set comprehension: foo = {v for v in vowels} ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:7:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Input Reading an int: n = int(input('Please input a number: ')) ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:8:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Functions Optional keyword arguments that avoid confusion: def minus(a, b): return (a - b) print(minus(a=1, b=2)) # is equivalent to the line below print(minus(b=2, a=1)) Default values for the parameters can be added: def minus(a, b = 0): return (a - b) print(minus(1)) We can make an argument optional by using None: def build_person(first, last, age=None): person = {'first_name': first, 'last_name': last} if age: person['age'] = age return person To prevent a function from modifying a list, pass the list with full slicing: foo(A[:]) Variadic functions: def print_languages(*languages): # The * makes an empty tuple and packs any value it receives for language in languages: print(f'- {language}') # more generically, *args # **kwargs for key-value pairs # * works on the way in as well: *foo expands the list foo to individual arguments Importing: from module_name import func_1, func_2, func_3 # importing multiple functions from module_name import func_1 as f # alias import module_name as m # alias from module_name import * # all functions # We must import everything at the beginning of each file # Searching in 1. wd 2. site-packages 3. standard library locations Add docstrings for functions: def foo(): \"\"\"This is a docstring.\"\"\" return 'bar' Use annotations/type hints to improve the docs: (optional and informational only) def foo(word: str) -\u003e str: \"\"\"Take a string and return a string.\"\"\" return word Python supports both pass-by-value and pass-by-reference. Variables in Python are object references. If there’s only assignment, the original object won’t change. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:9:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"OOP Example: class Person: def __init__(self, name, age): self.name = name self.age = age Default value: class foo: def __init__(self, value): self.value = 0 Inheritance: from foo import Foo class Foo(Bar): # Bar is the parent class def __init__(self, value): super().__init__(value) # superclass # we can also override a method by redefining it in the child class. Conventions: Capitalize the first letter of each word, without underscores. Instances and module names use underscores and are in lowercase. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:10:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Random randint: from random import randint print(randint(1,6)) choice: from random import choice A = [1,2,3,4,5,6] print(choice(A)) ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:11:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Files Reading an entire file: with open('file.txt') as file_obj: # 'r' is the default mode contents = file_obj.read() # lines = file_obj.readlines() -\u003e a list of lines # for line in lines: #print(line.rstrip()) print(contents.rstrip()) # Removing the additional \\n # no need to close, python will do it automatically Reading line by line: with open('file.txt') as file_obj: for line in file_obj: print(line.rstrip()) Writing: # python only writes strings, use str() if necessary with open('file.txt', 'w') as file_obj: # 'a', 'r+' file_obj.write('Python.') ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:12:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Exceptions Basic try-except-else: try: print(1/0) except ZeroDivisionError as err: print('Can't divide by 0.', str(err)) else: # optional print('Success') Failing silently using pass: try: with open('file.txt') as file_obj: content = file_obj.read() except FileNotFoundError: pass else: print(len(content.split())) # word count Raise an error: raise FileNotFoundError('foo') ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:13:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Testing Basic unit testing: import unittest from file import function_1: class Func1Test(unittest.TestCase): def test(self): result = function_1(value) self.assertEqual(result, foo) if __name__ = '__main__': unittest.main() setUp() method can be used to test a class ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:14:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Install Packages sudo python3 -m pip install foo (foo could also be a tar.gz) installs to our site-packages. We can generate a distribution package by using setuptools. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:15:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"PEP8 pip3 install pycodestyle pycodestyle --show-source --show-pep8 foo.py tests for PEP8 compliance. For multiline with binary operators, break before the operators: income = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) Surround functions and classes with two blank lines. Methods in a class are surrounded by a single blank line. Imports should be on separate lines. Be consistent with returns. return None if any return statement returns an expression. def foo(x): if x \u003e= 0: return math.sqrt(x) else: return None def bar(x): if x \u003c 0: return None return math.sqrt(x) Use methods instead of modules: if foo.startswith('bar'): # or endswith # is better than if foo[:3] == 'bar' if isinstance(obj, int): # is better than if type(obj) is type(1): Use the fact that empty sequences (strings/lists/sets/etc.) are false: if not seq: if seq: # are better than if len(seq): if not len(seq): pip3 install autopep8 autopep8 --in-place foo.py auto-formats the code. Prefix with an underscore for ‘private’ properties/methods. (As a convention but not a protection.) Add parentheses for continuing a long line of code. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:16:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Virtual Environments Create and activate with virtualenv: cd foo virtualenv --python python3 my_venv source my_venv/bin/activate pip install numpy pip freeze \u003e requirements.txt pip install -r requirements.txt deactivate ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:17:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Decorators A decorator is a function that takes another function as an argument and replaces it with a new modified function. Creation: def identity(f): return f @identity def foo(): return 'bar' # This same as foo = identity(foo) Static methods: class Pizza: @staticmethod def mix_ingredients(x, y): return x + y three = Pizza.mix_ingredients(1, 2) Class methods (used for factory methods. which instantiate objects using a different signature other than __init__): class Pizza: def __init__(self, ingredients): self.ingredients = ingredients @classmethod def from_fridge(cls, fridge): return cls(fridge.get_cheese() + fridge.get_vegetables()) Abstract methods: class Pizza: @staticmethod def get_radius(): raise NotImplementedError # Or make the class abstract (abc: abstract base class) from abc import ABC, abstractmethod class BasePizza(ABC): @abstractmethod def get_radius(self): \"\"\"Method that should do something.\"\"\" ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:18:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Generators Generators return the value but save the stack reference, which will be used to resume the execution when next() is called. Example: def my_generator(): yield 1 yield 2 yield 'a' g = my_generator() next(g) # 1 next(g) # 2 next(g) # a range() returns a generator, which generates the values on the fly. It’s good for handling large data set. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:19:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Miscellaneous We can’t use mutable types as dictionary keys since their hash will change. Strings are not mutable. And use tuples over lists when they are meant to be immutable. Use list comprehensions over loops. Python requires an __init__.py file for the directory to be considered a submodule. ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:20:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"References Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming Head First Python Serious Python: Black-Belt Advice on Deployment, Scalability, Testing, and More ","date":"May 12, 2019","objectID":"/posts/2019-05-12-Python-Notes/:21:0","tags":["Programming Languages","Python"],"title":"Python Notes","uri":"/posts/2019-05-12-Python-Notes/"},{"categories":null,"content":"Some notes for C and C++","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":" Basics Dynamic Memory Allocation Makefiles Templates STL Miscellaneous ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:0:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Basics How to compile: gcc -Wall -o foo foo.c Input in C: char foo[100]; int bar; fgets(foo, sizeof(foo), stdin); scanf(\"%d\", \u0026bar); getchar(); // must be added after scanf. It handels /n Input in C++: string foo; getline(cin, foo); When two types sum, a promotion happens. When a type is passed to a function, a demotion happens. Prefix and postfix ++ -- differ when used in an assignment: int a = 1; int b = ++a; // a = 2, b = 2 int b = a++; // a = 3, b = 2 0 is false. Everything else is true. In argv, the first name is the program’s name. puts() will append \\n to the end of the string and print. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:1:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Dynamic Memory Allocation In C: int* foo; foo = (int*) malloc(sizeof(int) * 10); if (foo == NULL) { // blah blah } free(foo); In C++: T* ptr = new T(value) is equivalent to T* ptr = new T[1] {value} ((value) and {value} can be omitted.) (delete [] ptr for arrays; delete ptr for single values.) ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:2:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Makefiles How to run: make // if no extension make -f Mymakefile.txt make ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:3:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Templates Generic Functions: template \u003cclass T\u003e T array_sum(T arr[], int size) { int i; T sum = arr[0]; for (i = 1; i \u003c size; i ++) { sum = sum + arr[i]; } return sum; } Generic Classes: template \u003cclass T\u003e class BoundedArray { T array[size]; public: BoundedArray(){}; T\u0026 operator[](int); // overloaded access operator }; template\u003cclass T\u003e T\u0026 BoundedArray\u003cT\u003e::operator[](int pos) { if ((pos \u003c 0) || (pos \u003e= size)) { exit(1); } return array[pos]; } // ... BoundedArray\u003cint\u003e intArray; ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:4:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"STL Vectors: #include \u003cvector\u003e // ... vector\u003cint\u003e vInt(5); vInt.push_back(1); // .clear, .size, .pop_back Deques: (Double Ended Queues) #include \u003cdeque\u003e // .push_front, .pop_front Lists: (Doubly Linked Lists) (No random access.) Iterators: vector\u003cint\u003e vInt; vector\u003cint\u003e::iterator vIterator; for (vIterator = vInt.begin(); vIterator != vInt.end(); vIterator++) {} Set: (insert, erase, clear, empty, size, find, count) Maps: (find, clear, erase, insert) map\u003cconst char*, int, LessThanStr\u003e months; months[\"january\"] = 31; ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:5:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Miscellaneous When we initialize an int vector, int array, etc., they are filled with 0s. The public interface is inherited to the inherited class. (The interface of the base class is a subset of the derived class.) We must initialize static data members outside of the class: class foo { static int var; } int foo::var = 0; When we write to a file, the data is first stored in the buffer. When the buffer is flushed, the data is written into the file. const with pointers int a = 2; const int* ptr = \u0026a; // constant data (2), not constant pointer int* const ptr_1 = \u0026a; // constant pointer, not constant data const int* const ptr_2 = \u0026a; // constant pointer and data Auto-dereferencing in C++: int foo = 1; int\u0026 bar = foo; bar = 2; // Both are 2 now ","date":"May 5, 2019","objectID":"/posts/2019-05-05-C-and-C++-Notes/:6:0","tags":["Programming Languages"],"title":"C and C++ Notes","uri":"/posts/2019-05-05-C-and-C++-Notes/"},{"categories":null,"content":"Some handy tips for Vim","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":" Deletion Navigation Modification Miscellaneous Plugins Multiple Cursors Emmet Tagbar NERDTree ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:0:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Deletion ‘dw’ deletes the word including the space. ‘d$’ deletes from the cursor to the end of the line. ‘de’ deletes the word excluding the space. ‘d2w’, ‘d2e’ delete 2 words. ‘dd’ deletes a whole line, ‘2dd’ deletes 2 lines. ‘p’ puts the deleted content. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:1:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Navigation ‘0’ goes to the start of the line. ‘$’ goes to the end of the line. ‘2w’ goes 2 words ahead. ‘2e’ goes to the end of the second word ahead. ‘G’ goes to the bottom, \u003cC-g\u003e shows the location status, ‘gg’ goes to the top, ‘5G’ goes to the 5th line. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:2:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Modification ‘u’ undoes, ‘U’ fixes the whole line, \u003cC-r\u003e undoes the undo. ‘r’ and ‘a’ replace the char with a. ‘ce’ and ‘abc’ change the word to the end with abc. ‘c$’ changes to the end of the line. :r foo appends the content of foo to the file. ‘R’ goes to replace mode. ‘y’ yanks and ‘p’ pastes, ‘yw’ yanks word. ‘gt’ goes to the next tab, ‘gT’ goes to the previous tab. :1,10s/foo/bar/g replaces foo with bar between line 1 and line 10. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:3:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Miscellaneous To enable spell check :setlocal spell spelllang=en_us . :terminal to open terminal, \u003cC-\\\u003e\u003cC-n\u003e to enter vim mode to enable go up and go down. g, \u003cC-g\u003e to see the word count. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:4:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Plugins ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:5:0","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Multiple Cursors In normal mode, \u003cC-n\u003e\u003cC-n\u003e\u003cC-n\u003ec, new_name (select 3 variables and rename.) ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:5:1","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Emmet html:5_ (\"_\" is the cursor position), then \u003cC-y\u003e , , we get: \u003c!DOCTYPE HTML\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e _ \u003c/body\u003e \u003c/html\u003e ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:5:2","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Tagbar F8 to toggle. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:5:3","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"NERDTree :NERDTreeFocus to turn on. ","date":"May 5, 2019","objectID":"/posts/2019-05-05-Vim-Tips/:5:4","tags":["Tools","Editors"],"title":"Vim Tips","uri":"/posts/2019-05-05-Vim-Tips/"},{"categories":null,"content":"Privacy Policy Tianyao Chen built the Crypto Fear \u0026 Greed Index - With Widgets app as a Freemium app. This SERVICE is provided by Tianyao Chen at no cost and is intended for use as is. This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service. If you choose to use my Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that I collect is used for providing and improving the Service. I will not use or share your information with anyone except as described in this Privacy Policy. The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which are accessible at Crypto Fear \u0026 Greed Index - With Widgets unless otherwise defined in this Privacy Policy. Information Collection and Use For a better experience, while using our Service, I may require you to provide us with certain personally identifiable information. The information that I request will be retained on your device and is not collected by me in any way. The app does use third-party services that may collect information used to identify you. Link to the privacy policy of third-party service providers used by the app Google Play Services AdMob Google Analytics for Firebase Firebase Crashlytics Log Data I want to inform you that whenever you use my Service, in a case of an error in the app I collect data and information (through third-party products) on your phone called Log Data. This Log Data may include information such as your device Internet Protocol (“IP”) address, device name, operating system version, the configuration of the app when utilizing my Service, the time and date of your use of the Service, and other statistics. Cookies Cookies are files with a small amount of data that are commonly used as anonymous unique identifiers. These are sent to your browser from the websites that you visit and are stored on your device’s internal memory. This Service does not use these “cookies” explicitly. However, the app may use third-party code and libraries that use “cookies” to collect information and improve their services. You have the option to either accept or refuse these cookies and know when a cookie is being sent to your device. If you choose to refuse our cookies, you may not be able to use some portions of this Service. Service Providers I may employ third-party companies and individuals due to the following reasons: To facilitate our Service; To provide the Service on our behalf; To perform Service-related services; or To assist us in analyzing how our Service is used. I want to inform users of this Service that these third parties have access to their Personal Information. The reason is to perform the tasks assigned to them on our behalf. However, they are obligated not to disclose or use the information for any other purpose. Security I value your trust in providing us your Personal Information, thus we are striving to use commercially acceptable means of protecting it. But remember that no method of transmission over the internet, or method of electronic storage is 100% secure and reliable, and I cannot guarantee its absolute security. Links to Other Sites This Service may contain links to other sites. If you click on a third-party link, you will be directed to that site. Note that these external sites are not operated by me. Therefore, I strongly advise you to review the Privacy Policy of these websites. I have no control over and assume no responsibility for the content, privacy policies, or practices of any third-party sites or services. Children’s Privacy These Services do not address anyone under the age of 13. I do not knowingly collect personally identifiable information from children under 13 years of age. In the case I discover that a child under 13 has provided me with personal information, I immediately delete this from our servers. If you are a parent o","date":"January 1, 0001","objectID":"/legal/crypto_fear_and_greed_index_with_widgets/privacy_policy/:0:0","tags":null,"title":"","uri":"/legal/crypto_fear_and_greed_index_with_widgets/privacy_policy/"}]