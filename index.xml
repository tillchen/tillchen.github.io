<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tianyao Chen</title>
    <link>https://tillchen.com/</link>
    <description>Recent content on Tianyao Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Apr 2020 11:03:29 +0200</lastBuildDate>
    
	<atom:link href="https://tillchen.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computer Networks Notes</title>
      <link>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</link>
      <pubDate>Fri, 22 May 2020 18:52:12 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#internet-concepts-and-design-principles&#34;&gt;Internet Concepts and Design Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#structure-and-growth-of-the-internet&#34;&gt;Structure and Growth of the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#internet-programming-with-sockets&#34;&gt;Internet Programming with Sockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fundamental-concepts&#34;&gt;Fundamental Concepts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#classification-and-terminology&#34;&gt;Classification and Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#communication-channels-and-transmission-media&#34;&gt;Communication Channels and Transmission Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media-access-control&#34;&gt;Media Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transmission-error-detection&#34;&gt;Transmission Error Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sequence-numbers-acknowledgements-timer&#34;&gt;Sequence Numbers, Acknowledgements, Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flow-control-and-congestion-control&#34;&gt;Flow Control and Congestion Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#layering-and-the-osi-reference-model&#34;&gt;Layering and the OSI Reference Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the course notes for Computer Networks at Jacobs University Bremen.&lt;/p&gt;
&lt;h3 id=&#34;internet-concepts-and-design-principles&#34;&gt;Internet Concepts and Design Principles&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Internet Addresses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leading nulls in IPv6 addresses can be omitted and two consecutive  colons can represent a sequence of nulls:
&lt;ul&gt;
&lt;li&gt;2001:00db8:0000:0000:0000:0000:0000:0001 can be written as 2001:db8::1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPv6 addresses have 16 bytes (4 x 8 groups); IPv4 addresses have 4 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autonomous Systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An AS is a set of routers and networks under the same administration.&lt;/li&gt;
&lt;li&gt;IP packets are forwarded between ASs by EGP (Exterior Gateway Protocol); within an AS, it&amp;rsquo;s IGP (Interior Gateway Protocol)&lt;/li&gt;
&lt;li&gt;The Internet is a collection os ASs. There&amp;rsquo;s no central authority.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;structure-and-growth-of-the-internet&#34;&gt;Structure and Growth of the Internet&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Internet Exchange Points (IXPs) are switching hubs where many Internet Service Providers (operating ASs) connect in order to exchange internet traffic.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;internet-programming-with-sockets&#34;&gt;Internet Programming with Sockets&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sockets are abstract communication endpoints with a rather small number of associated function calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection-less vs connection-oriented communication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection-oriented communication requires a establishment and a teardown. Most of the Internet traffic is using this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fundamental-concepts&#34;&gt;Fundamental Concepts&lt;/h2&gt;
&lt;h3 id=&#34;classification-and-terminology&#34;&gt;Classification and Terminology&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Communication modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicast - 1:1&lt;/li&gt;
&lt;li&gt;Multicast - 1:n&lt;/li&gt;
&lt;li&gt;Concast - n:1&lt;/li&gt;
&lt;li&gt;Multipeer - m:n&lt;/li&gt;
&lt;li&gt;Anycast - 1: nearest receiver&lt;/li&gt;
&lt;li&gt;Broadcast - 1: all&lt;/li&gt;
&lt;li&gt;Geocast - 1: n in a region&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communication protocols define the syntax and semantics of messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Circuit vs packet switching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Circuit switching: create and remove (virtual) circuit (e.g. the telephone network)&lt;/li&gt;
&lt;li&gt;Packet switching: data is carried in packets (e.g. Internet)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection-oriented vs connection-less:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection-oriented: stateful (e.g. fetching a Web page)&lt;/li&gt;
&lt;li&gt;Connection-less: stateless (e.g. Internet name lookups)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data vs. control vs. management plane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data plane: forwarding of data (hardware)&lt;/li&gt;
&lt;li&gt;Control plane: telling the data plane how to forward data (routers and switches)&lt;/li&gt;
&lt;li&gt;Management plane: configuration and monitoring of data and control planes (may involve humans)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Star; Ring; Meshed Network; Bus; Line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;communication-channels-and-transmission-media&#34;&gt;Communication Channels and Transmission Media&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Signals are in general modified during transmission, leading to transmission errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data rate (bit rate) vs bit time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bit time is the time needed to transmit a single bit (1 microsecond for 1 Mbit/s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay is the time needed to transmit a message from the source to the sink. It consists of transmission delay and propagation delay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/transmission_propagation_delay.png&#34; alt=&#34;transmission vs propagation delay&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bit error rate is the probability of a bit being changed during transmission.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple wires can easily experience crosstalk caused by capacitive coupling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transmission impairments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attenuation&lt;/li&gt;
&lt;li&gt;Delay distortion (different frequencies arrive at different time)&lt;/li&gt;
&lt;li&gt;Noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;media-access-control&#34;&gt;Media Access Control&lt;/h3&gt;
&lt;h3 id=&#34;transmission-error-detection&#34;&gt;Transmission Error Detection&lt;/h3&gt;
&lt;h3 id=&#34;sequence-numbers-acknowledgements-timer&#34;&gt;Sequence Numbers, Acknowledgements, Timer&lt;/h3&gt;
&lt;h3 id=&#34;flow-control-and-congestion-control&#34;&gt;Flow Control and Congestion Control&lt;/h3&gt;
&lt;h3 id=&#34;layering-and-the-osi-reference-model&#34;&gt;Layering and the OSI Reference Model&lt;/h3&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cnds.jacobs-university.de/courses/cn-2019/&#34;&gt;https://cnds.jacobs-university.de/courses/cn-2019/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Software Engineering Notes</title>
      <link>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#socio-technical-systems&#34;&gt;Socio-Technical Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-software-lifecycle&#34;&gt;The Software Lifecycle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#software-lifecycle&#34;&gt;Software Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requirements-engineering&#34;&gt;Requirements Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uml&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compiling-and-linking&#34;&gt;Compiling and Linking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#defensive-programming&#34;&gt;Defensive Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration-version-and-release-management&#34;&gt;Configuration, Version, and Release Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#software-testing&#34;&gt;Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-and-other-applications&#34;&gt;Web and Other Applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#application-architectures&#34;&gt;Application Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gui-technology&#34;&gt;GUI Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-enabled-information-systems&#34;&gt;Web-Enabled Information Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ui-design&#34;&gt;UI Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-design&#34;&gt;Web Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#project-and-process-management&#34;&gt;Project and Process Management&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#project-management&#34;&gt;Project Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#software-process-models&#34;&gt;Software Process Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the course notes for Software Engineering at Jacobs University Bremen.&lt;/p&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The code-and-fix cycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainability and reliability decrease continuously (entropy).&lt;/li&gt;
&lt;li&gt;If the programmer leaves, all know-how leaves.&lt;/li&gt;
&lt;li&gt;If the developer is not the user, we get frequent dissent about expectations vs implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Common problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complexity&lt;/li&gt;
&lt;li&gt;Integration requirements&lt;/li&gt;
&lt;li&gt;Quality requirements&lt;/li&gt;
&lt;li&gt;Flexibility requirements&lt;/li&gt;
&lt;li&gt;Portability and internationalization requirements&lt;/li&gt;
&lt;li&gt;Organizational requirements
&lt;ul&gt;
&lt;li&gt;Communication problems/ bad project management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software engineering is multi-person construction of multi-version software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software = programs + documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System engineering = hardware + software + process engineering&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good software delivers functionality and performance that is (MEDA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainable&lt;/li&gt;
&lt;li&gt;Efficient&lt;/li&gt;
&lt;li&gt;Dependable&lt;/li&gt;
&lt;li&gt;Acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;socio-technical-systems&#34;&gt;Socio-Technical Systems&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;System = software + hardware + people&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical = software + hardware&lt;/li&gt;
&lt;li&gt;Socio-technical = technical systems + operational processes &amp;amp; people&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Socio-technical system characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emergent properties&lt;/li&gt;
&lt;li&gt;Non-deterministic
&lt;ul&gt;
&lt;li&gt;Partially dependent on human operators + a time-varying environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex relationships with organizational objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-software-lifecycle&#34;&gt;The Software Lifecycle&lt;/h2&gt;
&lt;h3 id=&#34;software-lifecycle&#34;&gt;Software Lifecycle&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Requirements Engineering&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;Verification &amp;amp; Testing&lt;/li&gt;
&lt;li&gt;Deployment &amp;amp; Maintenance&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;requirements-engineering&#34;&gt;Requirements Engineering&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Requirements engineering = services + constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types of requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User requirements - understandable by users (UML)&lt;/li&gt;
&lt;li&gt;System requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way of classification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional requirements&lt;/li&gt;
&lt;li&gt;Non-functional requirements - properties + constraints&lt;/li&gt;
&lt;li&gt;Domain requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;uml&#34;&gt;UML&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use case diagrams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use case = a chunk of functionality&lt;/li&gt;
&lt;li&gt;Actor = someone/something that interacts with the system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activity diagrams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Represents the overall flow of control&lt;/li&gt;
&lt;li&gt;User-perceived actions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class diagrams: &lt;a href=&#34;https://creately.com/blog/diagrams/class-diagram-relationships/&#34;&gt;https://creately.com/blog/diagrams/class-diagram-relationships/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relationships:
&lt;ul&gt;
&lt;li&gt;Association - connection&lt;/li&gt;
&lt;li&gt;Aggregation - stronger: HAS-A&lt;/li&gt;
&lt;li&gt;Dependency - weaker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrow head means it&amp;rsquo;s traversable only this direction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequence diagrams: object interactions in a time sequence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actors + system components (unlike activity diagrams)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State transition diagrams: lifecycle of a given class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternative: DSLs (domain specific modelling languages)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better used for embedded systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;design-patterns&#34;&gt;Design Patterns&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pattern = description + essence of its solution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design pattern = re-using abstract knowledge; generic, reusable design templates for OOP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Singleton: ensure a class has only one instance and provide a global access point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observer: separate the display of object state from the object itself&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mediator: define an object that encapsulates how a set of objects interact&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facade: a unified interface to a set of interfaces in a subsystem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proxy: a surrogate or placeholder for another object to control access to it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter: let classes work together that could not otherwise because of incompatible interfaces&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composite: compose objects into tree structures to represent part-whole hierarchies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creational&lt;/li&gt;
&lt;li&gt;Structural&lt;/li&gt;
&lt;li&gt;Behavioral&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;compiling-and-linking&#34;&gt;Compiling and Linking&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;source + header files -&amp;gt; Preprocessor -&amp;gt; source -&amp;gt; compiler -&amp;gt; object code -&amp;gt; linker -&amp;gt; executable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preprocessor: textual substitution (with directives #)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object files contain code for a program fragment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name mangling (name decoration): compiler modifies names to make them unique&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linker generates one executable from several object and library files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strip:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, executables contain symbol tables which allows reverse engineering and makes the code files substantially larger.&lt;/li&gt;
&lt;li&gt;Strip executables before shipping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Library = archive file containing a collection of object files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object files are linked in completely, from library only what is actually needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;defensive-programming&#34;&gt;Defensive Programming&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defensive programming intends to ensure the continuing function of the software despite the unforeseeable usage. - Defend against errors (avoid bugs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invariants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop invariants&lt;/li&gt;
&lt;li&gt;Class invariants: true before and after each method call&lt;/li&gt;
&lt;li&gt;Method invariants: meet the pre and post conditions - part of design-by-contract (methods are contracts with the user)&lt;/li&gt;
&lt;li&gt;Ways of enforcing invariants
&lt;ul&gt;
&lt;li&gt;Assertions&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Return codes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structured programming: only use a small set of programming constructs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good: sequence, condition, repetition&lt;/li&gt;
&lt;li&gt;Bad: goto, break, continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code guide = uniform style + best practice&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;configuration-version-and-release-management&#34;&gt;Configuration, Version, and Release Management&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Software configuration management (SCM) is the discipline of controlling the evolution of software systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Three classic problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The double maintenance problem&lt;/li&gt;
&lt;li&gt;The shared data problem&lt;/li&gt;
&lt;li&gt;The simultaneous update problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A delta is a difference between two revisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Terminology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release: a version that&amp;rsquo;s available to user/client&lt;/li&gt;
&lt;li&gt;Configuration: combination of components into a system according to case-specific criteria&lt;/li&gt;
&lt;li&gt;Baseline: a static reference point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composition model = set of objects &amp;ndash; module oriented&lt;/li&gt;
&lt;li&gt;Change set model = bundle of changes &amp;ndash; dynamic&lt;/li&gt;
&lt;li&gt;Long transaction model = all changes all isolated into transactions &amp;ndash; collaborative&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;software-testing&#34;&gt;Software Testing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Software testing: find errors before delivering to the end user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit testing: (code)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test driver = dummy environment&lt;/li&gt;
&lt;li&gt;Test stub = dummy methods&lt;/li&gt;
&lt;li&gt;Equivalence class testing: build equivalence classes and test one candidate per class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration testing: (design)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test interactions among units (e.g. type compatibility)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System testing: (requirements)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine whether system meets requirements&lt;/li&gt;
&lt;li&gt;Focus on use &amp;amp; interaction&lt;/li&gt;
&lt;li&gt;Alpha &amp;amp; Beta testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceptance testing: (users&amp;rsquo; need)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get approval from customers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static testing - without executing the software
&lt;ul&gt;
&lt;li&gt;Static analysis = control flow + data flow analysis&lt;/li&gt;
&lt;li&gt;Formal verification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic testing - with executing the software
&lt;ul&gt;
&lt;li&gt;Black-box testing: spec based&lt;/li&gt;
&lt;li&gt;White-box testing: look inside to check all statements &amp;amp; conditions have been executed at least once&lt;/li&gt;
&lt;li&gt;Coverage analysis: measures how much of the code has been exercised
&lt;ul&gt;
&lt;li&gt;Statement vs decision vs path coverage&lt;/li&gt;
&lt;li&gt;Independent paths V(G) = number of simple decisions + 1 or number of enclosed areas + 1&lt;/li&gt;
&lt;li&gt;C0 = every instruction; C1 = every branch; C2, C3 - every condition once true once false; C4 path coverage; Rule of thumb: 95% C0, 70% C1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory leaks:
&lt;ul&gt;
&lt;li&gt;Stack: automatic management&lt;/li&gt;
&lt;li&gt;Heap: explicit allocation and deallocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance profiling: benchmark execution to understand where time is being spent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regression testing: run tests and compare the output to same tests on the previous code version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web-and-other-applications&#34;&gt;Web and Other Applications&lt;/h2&gt;
&lt;h3 id=&#34;application-architectures&#34;&gt;Application Architectures&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Application Types
&lt;ul&gt;
&lt;li&gt;Data processing&lt;/li&gt;
&lt;li&gt;Transaction processing&lt;/li&gt;
&lt;li&gt;Event processing&lt;/li&gt;
&lt;li&gt;Language processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gui-technology&#34;&gt;GUI Technology&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sequential programs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modern GUI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Event-driven: the program waits on the user instead of the other way around
&lt;ul&gt;
&lt;li&gt;All events go to a single event queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Widgets (window gadget): reusable interactive object
&lt;ul&gt;
&lt;li&gt;Handle events&lt;/li&gt;
&lt;li&gt;Update appearance&lt;/li&gt;
&lt;li&gt;Generate new events&lt;/li&gt;
&lt;li&gt;Send to listeners (custom code)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactor Tree: decompose interactive objects into a tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model-View-Controller:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model = information the app is manipulating (representation of real world objects)&lt;/li&gt;
&lt;li&gt;View = a visual representation of the model
&lt;ul&gt;
&lt;li&gt;View will be notified if there are changes for the model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Controller:
&lt;ul&gt;
&lt;li&gt;Receives input events&lt;/li&gt;
&lt;li&gt;Decides what to do
&lt;ul&gt;
&lt;li&gt;Communicates with the view to select the objects&lt;/li&gt;
&lt;li&gt;Calls model methods to make changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why?
&lt;ul&gt;
&lt;li&gt;Combining MVC into one class will not scale&lt;/li&gt;
&lt;li&gt;Separation eases maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web-enabled-information-systems&#34;&gt;Web-Enabled Information Systems&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Three-Tier Architecture:
&lt;ul&gt;
&lt;li&gt;Presentation tier&lt;/li&gt;
&lt;li&gt;Middle tier&lt;/li&gt;
&lt;li&gt;Data management tier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ui-design&#34;&gt;UI Design&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;UI should match skills, experience, and expectations of its anticipated users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The human factors;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Limited short-term memory&lt;/li&gt;
&lt;li&gt;People make mistakes&lt;/li&gt;
&lt;li&gt;People are different&lt;/li&gt;
&lt;li&gt;People have different interaction preferences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pressman&amp;rsquo;s Golden Rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Place user in control&lt;/li&gt;
&lt;li&gt;Reduce user&amp;rsquo;s memory load&lt;/li&gt;
&lt;li&gt;Make interface consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI design involves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User analysis&lt;/li&gt;
&lt;li&gt;System prototyping&lt;/li&gt;
&lt;li&gt;Prototype evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web-design&#34;&gt;Web Design&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Principles:
&lt;ul&gt;
&lt;li&gt;Anticipation&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Controlled autonomy&lt;/li&gt;
&lt;li&gt;Efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;project-and-process-management&#34;&gt;Project and Process Management&lt;/h2&gt;
&lt;h3 id=&#34;project-management&#34;&gt;Project Management&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Activity organization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activities should produce tangible outputs at well-defined points&lt;/li&gt;
&lt;li&gt;Milestones: end-point of a process activity&lt;/li&gt;
&lt;li&gt;Deliverables: projects results&lt;/li&gt;
&lt;li&gt;Rules:
&lt;ul&gt;
&lt;li&gt;Design tasks as self-contained units with clear goals&lt;/li&gt;
&lt;li&gt;Concurrent tasks&lt;/li&gt;
&lt;li&gt;Minimize dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task &amp;amp; Activity Flow Chart = Project Evaluation and Review Technique (PERT chart) - shows relationships between activities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMs do planning, estimating, and scheduling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;software-process-models&#34;&gt;Software Process Models&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Waterfall Model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partitioning into distinct stages - inflexible&lt;/li&gt;
&lt;li&gt;Few business systems have stable requirements&lt;/li&gt;
&lt;li&gt;Only appropriate when requirements are well-understood and fairly stable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incremental Methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Break into increments&lt;/li&gt;
&lt;li&gt;User requirements are prioritized&lt;/li&gt;
&lt;li&gt;The requirements are frozen once the increment is started&lt;/li&gt;
&lt;li&gt;Early increments act as a prototype which helps elicit requirements for later increments&lt;/li&gt;
&lt;li&gt;Lower risk of failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile/XP Methods, Scrum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The agile manifesto: value
&lt;ul&gt;
&lt;li&gt;individuals and interactions over processes and tools&lt;/li&gt;
&lt;li&gt;working software over comprehensive documentation&lt;/li&gt;
&lt;li&gt;customer collaboration over contract negotiation&lt;/li&gt;
&lt;li&gt;responding to change over following a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Principles: (CIPCS)
&lt;ul&gt;
&lt;li&gt;Customer involvement&lt;/li&gt;
&lt;li&gt;Incremental delivery&lt;/li&gt;
&lt;li&gt;People, not process&lt;/li&gt;
&lt;li&gt;Embrace change&lt;/li&gt;
&lt;li&gt;Maintain simplicity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extreme programming: very small increments (constant code improvement (refactoring))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterative/Spiral Methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop = one phase&lt;/li&gt;
&lt;li&gt;No fixed phases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evolutionary Development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evolve final system from initial outline spec&lt;/li&gt;
&lt;li&gt;Throw-away prototyping - start with poorly understood requirements&lt;/li&gt;
&lt;li&gt;Good for well isolated parts (UI)&lt;/li&gt;
&lt;li&gt;Lack of process visibility&lt;/li&gt;
&lt;li&gt;Often poorly structured&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use incremental dev for best understood requirements and throw-away prototyping for poorly understood.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Capability Maturity Model Integration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMM Levels:
&lt;ul&gt;
&lt;li&gt;Initial&lt;/li&gt;
&lt;li&gt;Managed&lt;/li&gt;
&lt;li&gt;Defined&lt;/li&gt;
&lt;li&gt;Quantitatively Managed&lt;/li&gt;
&lt;li&gt;Optimizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMMI Components:
&lt;ul&gt;
&lt;li&gt;24 process areas&lt;/li&gt;
&lt;li&gt;Goals&lt;/li&gt;
&lt;li&gt;Practices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Motivation (objectives):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secrecy - users should not be able to &lt;em&gt;see&lt;/em&gt; things they are not supposed to&lt;/li&gt;
&lt;li&gt;Integrity - users should not be able to &lt;em&gt;modify&lt;/em&gt; things they are not supposed to&lt;/li&gt;
&lt;li&gt;Availability - users should be able to &lt;em&gt;see and modify&lt;/em&gt; things they are allowed to&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3P security management: process; people; probing your defences&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning Notes</title>
      <link>https://tillchen.com/posts/2020-05-01-Machine-Learning-Notes/</link>
      <pubDate>Fri, 01 May 2020 09:25:01 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-05-01-Machine-Learning-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#types-of-learning&#34;&gt;Types of Learning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#supervised-learning&#34;&gt;Supervised learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unsupervised-learning&#34;&gt;Unsupervised learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semi-supervised-learning&#34;&gt;Semi-supervised learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reinforcement-learning&#34;&gt;Reinforcement learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#notations-and-definitions&#34;&gt;Notations and Definitions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#statistical-decision-theory&#34;&gt;Statistical Decision Theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fundamental-algorithms&#34;&gt;Fundamental Algorithms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logistic-regression&#34;&gt;Logistic Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decision-tree-learning&#34;&gt;Decision Tree Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dealing-with-noise&#34;&gt;Dealing With Noise&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dealing-with-inherent-non-linearity-kernels&#34;&gt;Dealing with Inherent Non-Linearity (Kernels)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-nearest-neighbors-knn&#34;&gt;k-Nearest Neighbors (kNN)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anatomy-of-a-learning-algorithm&#34;&gt;Anatomy of a Learning Algorithm&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#building-blocks&#34;&gt;Building blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gradient-descent&#34;&gt;Gradient Descent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#particularities&#34;&gt;Particularities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-practice&#34;&gt;Basic Practice&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#feature-engineering&#34;&gt;Feature Engineering&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#one-hot-encoding-categorical---numerical&#34;&gt;One-Hot Encoding (Categorical -&amp;gt; Numerical)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binning-bucketing-numerical---categorical&#34;&gt;Binning (Bucketing) (Numerical -&amp;gt; Categorical)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#normalization&#34;&gt;Normalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#standardization-z-score-normalization&#34;&gt;Standardization (Z-score Normalization)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dealing-with-missing-features&#34;&gt;Dealing with Missing Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learning-algorithm-selection&#34;&gt;Learning Algorithm Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#three-sets&#34;&gt;Three Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#underfitting-and-overfitting&#34;&gt;Underfitting and Overfitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regularization&#34;&gt;Regularization&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shrinkage-ridge-regression&#34;&gt;Shrinkage: Ridge Regression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#model-performance-assessment&#34;&gt;Model Performance Assessment&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#confusion-matrix&#34;&gt;Confusion Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#precisionrecall&#34;&gt;Precision/Recall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#accuracy&#34;&gt;Accuracy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cost-sensitive-accuracy&#34;&gt;Cost-Sensitive Accuracy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#area-under-the-roc-curve-auc&#34;&gt;Area under the ROC Curve (AUC)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hyperparameter-tuning&#34;&gt;Hyperparameter Tuning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#training-error&#34;&gt;Training Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generalizationtest-error&#34;&gt;Generalization/Test Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#validation-set-error-estimation&#34;&gt;Validation Set Error Estimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cross-validation&#34;&gt;Cross-Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#neural-networks-and-deep-learning&#34;&gt;Neural Networks and Deep Learning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#neural-networks&#34;&gt;Neural Networks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#multilayer-perceptron-vanilla-neural-network&#34;&gt;Multilayer Perceptron (Vanilla Neural Network)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#feed-forward-neural-network-architecture&#34;&gt;Feed-Forward Neural Network Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deep-learning&#34;&gt;Deep Learning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#convolutional-neural-network&#34;&gt;Convolutional Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recurrent-neural-network&#34;&gt;Recurrent Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#problems-and-solutions&#34;&gt;Problems and Solutions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basis-expansions&#34;&gt;Basis Expansions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#regression-with-gaussian-kernel&#34;&gt;Regression with Gaussian Kernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-regression&#34;&gt;Kernel Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#classification&#34;&gt;Classification&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linear-discriminant-analysis&#34;&gt;Linear Discriminant Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiclass-classification&#34;&gt;Multiclass Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#one-class-classification&#34;&gt;One-Class Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multi-label-classification&#34;&gt;Multi-Label Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ensemble-learning&#34;&gt;Ensemble Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learning-to-label-sequences&#34;&gt;Learning to Label Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sequence-to-sequence-learning&#34;&gt;Sequence to Sequence Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#active-learning&#34;&gt;Active Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semi-supervised-learning-1&#34;&gt;Semi-Supervised Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#one-shot-learning&#34;&gt;One-Shot Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#zero-shot-learning&#34;&gt;Zero-Shot Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-practice&#34;&gt;Advanced Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unsupervised-learning-1&#34;&gt;Unsupervised Learning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#density-estimation&#34;&gt;Density Estimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clustering&#34;&gt;Clustering&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#k-means&#34;&gt;K-Means&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dbscan-and-hdbscan&#34;&gt;DBSCAN and HDBSCAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#determining-the-number-of-clusters&#34;&gt;Determining the Number of Clusters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-clustering-algorithms&#34;&gt;Other Clustering Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dimensionality-reduction&#34;&gt;Dimensionality Reduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#principal-component-analysis-pca&#34;&gt;Principal Component Analysis (PCA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#umap&#34;&gt;UMAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#outlier-detection&#34;&gt;Outlier Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-forms-of-learning&#34;&gt;Other Forms of Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This post is about some basic machine learning concepts.&lt;/p&gt;
&lt;h3 id=&#34;types-of-learning&#34;&gt;Types of Learning&lt;/h3&gt;
&lt;h4 id=&#34;supervised-learning&#34;&gt;Supervised learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In a feature vector $x_i$ (i=1&amp;hellip;N), a single feature is denoted by $x^j$ (j=1&amp;hellip;D). And $y_i$ is the label.&lt;/li&gt;
&lt;li&gt;The goal is to produce a model that takes a feature vector x as input and outputs the label.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;unsupervised-learning&#34;&gt;Unsupervised learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The goal is either to transform the input feature vector into another vector (dimensionality reduction) or into a value (clustering, outlier detection).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;semi-supervised-learning&#34;&gt;Semi-supervised learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The dataset has both labeled and unlabeled (much higher quantity) data.&lt;/li&gt;
&lt;li&gt;The same goal as supervised learning.&lt;/li&gt;
&lt;li&gt;The hope is that the unlabeled data can help produce a better model. This is because a larger sample reflects better the probability distribution of the source of the labeled data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reinforcement-learning&#34;&gt;Reinforcement learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It perceives the &lt;strong&gt;state&lt;/strong&gt; of the environment as a feature vector and then execute &lt;strong&gt;actions&lt;/strong&gt; in every state, which bring &lt;strong&gt;rewards&lt;/strong&gt; and move the machine to another state.&lt;/li&gt;
&lt;li&gt;The goal is to learn a &lt;strong&gt;policy&lt;/strong&gt;: a function that takes the feature vector as input and outputs an optimal action that maximizes the expected average reward.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s suited for problems whose decision making is sequential and the goal is long-term.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;notations-and-definitions&#34;&gt;Notations and Definitions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$x_{l,u}^{(j)}$ in a neural net means the feature j of unit u in layer l.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$x$ is by default a column vector and $x^T$ a row vector. Then vector is on the left side of a matrix, we usually do $x^TA$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$argmax_{a \in A}f(a)$ returns the element a of the set A that maximizes f(a).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\mathbb{E}[\hat\theta(S_X) = \theta]$, where $\hat\theta(S_X)$ is the unbiased estimator of some statistic $\theta$ (e.g. $\mu$) calculated using a sample $S_X$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A hyperparameter is a parameter whose value is set before the learning process begins. By contrast, the values of other parameters are derived via training.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model-based learning vs instance-based learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model-based: creates a model with parameters learned from the data. (Most supervised learning algorithms)&lt;/li&gt;
&lt;li&gt;Instance-based: uses the whole dataset as the model. Instead of performing explicit generalization, it compares new problem instances with instances seen in training (e.g. kNN).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shallow vs deep learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shallow learning: learns the parameters of the model directly from the features of the training examples.&lt;/li&gt;
&lt;li&gt;Deep (neural network) learning: uses neural nets with more than one layer and learns the parameters from the outputs of the preceding layers instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;statistical-decision-theory&#34;&gt;Statistical Decision Theory&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Quantitative outputs are called $Y$ with $Y = (Y_1,&amp;hellip;,Y_K)^T$; and qualitative outputs are called $G$ with $G = (G_1,&amp;hellip;,G_K)^T$ (group).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loss functions:&lt;/p&gt;
&lt;p&gt;$$L_2(y, y&amp;rsquo;) = (y-y&amp;rsquo;)^2$$&lt;/p&gt;
&lt;p&gt;$$L_{0-1}(g, g&amp;rsquo;) = 0 \ (g=g&amp;rsquo;) \ or \ 1 \ (g\neq g&amp;rsquo;)$$&lt;/p&gt;
&lt;p&gt;$$L_1(y,y&amp;rsquo;) = |y-y&#39;|$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected prediction error (EPE):&lt;/p&gt;
&lt;p&gt;$$EPE(f)=E(L_2(Y,f(X)))$$&lt;/p&gt;
&lt;p&gt;$$EPE(f)=E(L_{0-1}(G,f(X)))$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function f that minimizes EPE is give by: ($E(Y|X=x)$ is called a regressor/regression function)&lt;/p&gt;
&lt;p&gt;$$f(x)=E(Y|X=x)$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bayes classifier:&lt;/p&gt;
&lt;p&gt;$$f(x)=argmin_{g \in R_G}[1-p(g|x)] \Rightarrow$$&lt;/p&gt;
&lt;p&gt;$$f(x)=\mathbf{g} \ if \ p(\mathbf{g}|x) = \max_{g \in R_G}p(g|x)$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected squared prediction error of $\hat f$ at location $x_0$:&lt;/p&gt;
&lt;p&gt;$$EPE(\hat f, x_0)=E(L_2(Y,f(X))|X=x_0)$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error = Irreducible Error + $\text{Bias}^2$ + Variance&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/error_decomposition.png&#34; alt=&#34;error decomposition&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fundamental-algorithms&#34;&gt;Fundamental Algorithms&lt;/h2&gt;
&lt;h3 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We want a model as a linear combination of features of example x ($w$ is a D-dimensional vector of parameters and b is a real number.):&lt;/p&gt;
&lt;p&gt;$$f_{w,b}(x) = wx+b$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We find the optimal values $w^{*}$ and $b^{*}$ by minimizing the cost function below (the empirical risk - the average loss):&lt;/p&gt;
&lt;p&gt;$$\frac{1}{N}\sum_{i=1&amp;hellip;N}(f_{w,b}(x_i)-y_i)^2$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overfitting: a model that predicts well for the training data but not for data unseen during training. Linear regression rarely overfits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The squared loss is used since it&amp;rsquo;s convinent. The absolute loss function doesn&amp;rsquo;t have a continuous derivative, which makes it not smooth. Unsmooth functions create difficulties for optimization problems in linear algebra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find the extrema (minima or maxima), we can simply set the gradient to zero.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The linear model is an approximation for the regressor $E(Y|X)$ of the form: ($\beta_0$ is the intercept or bias)&lt;/p&gt;
&lt;p&gt;$$f_{\beta}(X) = \beta_0+\sum_{j=1}^DX_j\beta_j$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By using $\beta = (\beta_0,&amp;hellip;,\beta_D)^T$ and $Z=(1,X_1,&amp;hellip;,X_D)^T$, we can rewrite the model to:&lt;/p&gt;
&lt;p&gt;$$f_{\beta}(Z)=Z^T\beta$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The least squares estimator (parameter estimator $\gamma$):&lt;/p&gt;
&lt;p&gt;$$\gamma = argmin_{\gamma}\sum_{i=1}^N(y_i-f_{\gamma}(x_i))^2$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solution for the estimator:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/linear_regression_least_squares.png&#34; alt=&#34;Linear Regression by Least Squares&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The algorithm:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/linear_regression.png&#34; alt=&#34;Linear Regression&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find local minimum/maximum:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/min_max.png&#34; alt=&#34;min max&#34;&gt;&lt;/p&gt;
&lt;p&gt;$$M \ \text{positive definite} \Leftrightarrow x^TMx&amp;gt;0 \ \text{for all }x \in \mathbb{R}^n \backslash \mathbf{0}$$&lt;/p&gt;
&lt;p&gt;$$M \ \text{negative definite} \Leftrightarrow x^TMx&amp;lt;0 \ \text{for all }x \in \mathbb{R}^n \backslash \mathbf{0}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Statistical analysis with the additive noise:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/analysis_for_linear_regression.png&#34; alt=&#34;statistical analysis&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/variance.png&#34; alt=&#34;variance&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/z_score.png&#34; alt=&#34;z-score&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/z_score_rule_of_thumb.png&#34; alt=&#34;z-score rule of thumb&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/z_score_example.png&#34; alt=&#34;z-score example&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a K-dimensional output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/linear_regression_k_d_output.png&#34; alt=&#34;linear regression K-D output&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;logistic-regression&#34;&gt;Logistic Regression&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Logistic regression is not a regression, but a classification learning algorithm. The names is because the mathematical formulation is similar to linear regression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The standard logistic function or the sigmoid function:&lt;/p&gt;
&lt;p&gt;$$f(x)=\frac{1}{1+e^{-x}}$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/logistic_function.png&#34; alt=&#34;Logistic Function&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The logistic regression model:&lt;/p&gt;
&lt;p&gt;$$f(x)=\frac{1}{1+e^{-(wx+b)}}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For binary classification, we can say the label is positive if the probability is higher than or equal to 0.5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We optimize by using the maximum likelihood (the goodness of fit) ($y_i$ is either 0 or 1):&lt;/p&gt;
&lt;p&gt;$$L_{w,b}=\prod_{i=1&amp;hellip;N}f_{w,b}(x_i)^{y_i}(1-f_{w,b}(x_i))^{1-y_i}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In practice, it&amp;rsquo;s more convenient to maximize the log-likelihood (since ln is a strictly increasing function, maximizing this is the same as maximizing its argument):&lt;/p&gt;
&lt;p&gt;$$LogL_{w,b}=ln(L_{w,b})=\sum_{i=1}^Ny_iln(f_{w,b}(x_i)) + (1-y_i)ln(1-f_{w,b}(x_i))$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike linear regression, there&amp;rsquo;s no closed form solution. A typical numerical optimization procedure is gradient descent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;decision-tree-learning&#34;&gt;Decision Tree Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;support-vector-machine&#34;&gt;Support Vector Machine&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;dealing-with-noise&#34;&gt;Dealing With Noise&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h5 id=&#34;dealing-with-inherent-non-linearity-kernels&#34;&gt;Dealing with Inherent Non-Linearity (Kernels)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The kernel trick: use a function to &lt;em&gt;implicitly&lt;/em&gt; transform the original space into a higher dimensional space during the cost function optimization. (We hope that data will be linearly separable in the transformed space).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use kernel functions or simply kernels to efficiently work in higher-dimensional spaces without doing this transformation explicitly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By using the kernel trick, we get rid of a costly transformation to the higher dimension and avoid computing their dot-product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use the quadratic kernel $k(x_i, x_k) = (x_ix_k)^2$ here. Another widely used kernel is the RBF (radial basis function) kernel: $k(x, x^{&#39;}) = exp(-\frac{||x-x^{&#39;}||^2}{2\sigma^2})$. It has infinite dimensions. We can vary the hyperparameter $\sigma$  and choose wether to get a smooth of curvy decision boundary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;k-nearest-neighbors-knn&#34;&gt;k-Nearest Neighbors (kNN)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;kNN is a non-parametric learning algorithm. Contrary to other learning algorithms that allow discarding the training data after the model is built, kNN keeps all training examples in memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The closeness of two examples is given by a distance function. Other than the Euclidean distance, we could also use the cosine similarity function ($0^{\circ}: 1; 90^{\circ}: 0; 180^{\circ}: -1$).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Algorithms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/kNN_regression.png&#34; alt=&#34;kNN regression&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/kNN_classification.png&#34; alt=&#34;kNN classification&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bias-variance decomposition:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/kNN_bias_variance_decomposition.png&#34; alt=&#34;kNN bias-variance decomposition&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The bias-variance trade-off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k=1: if $x_0$ is in the training data, the bias = 0; the largest variance. (similar to overfitting)&lt;/li&gt;
&lt;li&gt;k=N: the largest bias (the predictor is constant); the smallest variance. (similar to underfitting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/kNN_error_example.png&#34; alt=&#34;kNN error example&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;anatomy-of-a-learning-algorithm&#34;&gt;Anatomy of a Learning Algorithm&lt;/h2&gt;
&lt;h3 id=&#34;building-blocks&#34;&gt;Building blocks&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A loss function&lt;/li&gt;
&lt;li&gt;An optimization criterion based on the loss function (e.g. a cost function)&lt;/li&gt;
&lt;li&gt;An optimization routine leveraging training data to find a solution to the optimization criterion.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gradient-descent&#34;&gt;Gradient Descent&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To find a local minimum, start at some random point and takes step proportional (learning rate) to the negative of the gradient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The gradient is calculated by taking the partial derivative for every parameter in the loss function: (take linear regression as an example)&lt;/p&gt;
&lt;p&gt;$$l = \frac{1}{N}\sum_{i=1}^{N}(y_i-(wx_i+b))^2$$&lt;/p&gt;
&lt;p&gt;$$\frac{\partial l}{\partial w} = \frac{1}{N}\sum_{i=1}^{N}-2x_i(y_i-(wx_i+b))$$&lt;/p&gt;
&lt;p&gt;$$\frac{\partial l}{\partial b} = \frac{1}{N}\sum_{i=1}^{N}-2(y_i-(wx_i+b))$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An epoch consists of using the training set entirely to update each parameter. (One sweep through full training data.) At each epoch, we update $w$ and $b$ ($\alpha$ is the learning rate):&lt;/p&gt;
&lt;p&gt;$$w \leftarrow w - \alpha\frac{\partial l}{\partial w}$$&lt;/p&gt;
&lt;p&gt;$$b \leftarrow b - \alpha\frac{\partial l}{\partial b}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minibatch stochastic gradient descent is a version that speed up the computation by approximating the gradient using smaller batches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues with batch GD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Might get stuck in local minimum.&lt;/li&gt;
&lt;li&gt;One update, very expensive for large N.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stochastic gradient descent: use only one training sample to do update. (In each step, pick randomly and update)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each step is cheap.&lt;/li&gt;
&lt;li&gt;Can easily escape local minima.&lt;/li&gt;
&lt;li&gt;Many more steps necessary.&lt;/li&gt;
&lt;li&gt;Jumping around the solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;particularities&#34;&gt;Particularities&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some algorithms, like decision tree learning, can accept categorical features while others expect numerical values. All algorithms in scikit-learn expect numerical features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some algorithms, like SVM, allow weightings for each class. If the weighting is higher, the algorithm tries not to make errors in predicting training examples of this class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some classification models, like SVM and kNN, only output the class. Others, like logistic regression or decision trees, can also return the score between 0 and 1 (can be used as a confidence score).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some classification algorithms - like decision trees, logistic regression, or SVM - build the model using the whole dataset at once. Others can be trained iteratively, one batch at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some algorithms, like decision trees/SVM/kNN, can be used for both classification and regression, while others can only solve one type of problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;basic-practice&#34;&gt;Basic Practice&lt;/h2&gt;
&lt;h3 id=&#34;feature-engineering&#34;&gt;Feature Engineering&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Feature engineering: the problem of transforming raw data into a dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The role of the data analyst is to create informative features with high predictive power.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We say a model has a low bias when it predicts the training data well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;one-hot-encoding-categorical---numerical&#34;&gt;One-Hot Encoding (Categorical -&amp;gt; Numerical)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;One-hot is a group of bits among which the legal combinations of values are only those with a single high (1) bit and all the others low (0). It transforms a categorical feature into several binary ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example: red = [1,0,0]; yellow = [0,1,0]; green = [0,0,1].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the ordering matters, we can just do: {poor, decent, good, excellent} -&amp;gt; {1, 2, 3, 4}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;binning-bucketing-numerical---categorical&#34;&gt;Binning (Bucketing) (Numerical -&amp;gt; Categorical)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Binning converts a continuous feature in to multiple binary features called bins, typically based on value range.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;normalization&#34;&gt;Normalization&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Normalization converts a numerical value into a value typically in the interval [-1,1] or [0,1], which increases the speed of learning:&lt;/p&gt;
&lt;p&gt;$$\bar x^{(j)} = \frac{x^{(j)}-min^{(j)}}{max^{(j)}-min^{(j)}}$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;standardization-z-score-normalization&#34;&gt;Standardization (Z-score Normalization)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Standardization rescales the feature values so that they have the properties of a standard normal distribution with $\mu = 0$ and  $\sigma = 1$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Standard scores or z-scores can be calculated as follows:&lt;/p&gt;
&lt;p&gt;$$\hat x^{(j)} = \frac{x^{(j)} - \mu^{(j)}}{\sigma^{(j)}}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normalization vs Standardization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unsupervised learning - standardization.&lt;/li&gt;
&lt;li&gt;The distribution is close to a normal distribution - standardization.&lt;/li&gt;
&lt;li&gt;Have outliers - standardization (normalization will squeeze the normal values into a very small range).&lt;/li&gt;
&lt;li&gt;Other cases - normalization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;dealing-with-missing-features&#34;&gt;Dealing with Missing Features&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove the examples with missing features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a learning algorithm that can deal with missing feature values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Data imputation (the process of replacing missing data with substituted values)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace the missing value with an average value.&lt;/li&gt;
&lt;li&gt;Replace the missing value with a value outside the normal range.&lt;/li&gt;
&lt;li&gt;Replace the missing value with a value in the middle of the range.&lt;/li&gt;
&lt;li&gt;Use the missing value as the target for a regression problem.&lt;/li&gt;
&lt;li&gt;Increase the dimensionality by adding a binary indicator feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;learning-algorithm-selection&#34;&gt;Learning Algorithm Selection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explainability&lt;/li&gt;
&lt;li&gt;In-memory vs. out-of-memory (batch or incremental/online)&lt;/li&gt;
&lt;li&gt;Number of features and examples (neural networks for a huge number of features)&lt;/li&gt;
&lt;li&gt;Categorical vs. numerical features&lt;/li&gt;
&lt;li&gt;Nonlinearity of the data (SVM/linear regression/linear kernel/logistic regression of lineraly separable data)&lt;/li&gt;
&lt;li&gt;Training speed (neural networks are slow to train)&lt;/li&gt;
&lt;li&gt;Prediction speed
&lt;img src=&#34;https://tillchen.com/images/ml_map.png&#34; alt=&#34;scikit-learn cheat sheet&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;three-sets&#34;&gt;Three Sets&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Three sets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Training set (95%)&lt;/li&gt;
&lt;li&gt;Validation set (2.5%): choose the learning algorithm and find the best values of hyperparameters.&lt;/li&gt;
&lt;li&gt;Test set (2.5%): assess the model before delivery and production.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last two are also called holdout sets, which are not used to build the model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;underfitting-and-overfitting&#34;&gt;Underfitting and Overfitting&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Underfitting: the model makes many mistakes on the training data - high bias.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The model is too simple.&lt;/li&gt;
&lt;li&gt;The features are not informative enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overfitting: the model predicts very well the training data but poorly the data from the holdout sets. - high variance (the error due to the sensitivity to small fluctuations in the training set) (variance is the difference in fits between data sets - consistency) (large generalization error)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The model is too complex.&lt;/li&gt;
&lt;li&gt;Too many features but a small number of training examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The overfitting model learns the idiosyncrasies of the training set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the noise&lt;/li&gt;
&lt;li&gt;the sampling imperfection due to the small dataset size&lt;/li&gt;
&lt;li&gt;other artifacts extrinsic to the decision problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solutions for overfitting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try a simply model&lt;/li&gt;
&lt;li&gt;Reduce the dimensionality&lt;/li&gt;
&lt;li&gt;Add more training data&lt;/li&gt;
&lt;li&gt;Regularization - the most widely used approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;regularization&#34;&gt;Regularization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Regularization forces the learning algorithm to build a less complex model, which leads to a slightly higher bias but a much lower variance - the bias-variance tradeoff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The two most widely used are L1 and L2 regularization, which add a penalizing term whose value is higher when the model is more complex.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For linear regression, L1 looks like this ($|\mathbf{w}| = \sum_{i=1}^D|w^{(j)}|$ and C is a hyperparameter), which tries to set most $w^{(j)}$ to value small values or zero (|| means abs here):&lt;/p&gt;
&lt;p&gt;$$\min_{\mathbf{w},b} \left[C|\mathbf{w}| + \frac{1}{N}\sum_{i=1&amp;hellip;N}(f_{\mathbf{w},b}(\mathbf{x}_i)-y_i)^2\right]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For linear regression, L2 looks like this (($||\mathbf{w}||^2 = \sum_{i=1}^D(w^{(j)})^2$):&lt;/p&gt;
&lt;p&gt;$$\min_{\mathbf{w},b} \left[C||\mathbf{w}||^2 + \frac{1}{N}\sum_{i=1&amp;hellip;N}(f_{\mathbf{w},b}(\mathbf{x}_i)-y_i)^2\right]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L1 produces a sparse model with most parameters equal to zero if C is large enough, which makes feature selection that decides which features are essential and increases explainability. L2 gives better results if our only goal is to maximize the performance on holdout sets. Plus L2 is differentiable - graident descent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L1 and L2 are the special cases for elastic net regularization. L1 - lasso; L2 - ridge regularization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;shrinkage-ridge-regression&#34;&gt;Shrinkage: Ridge Regression&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Motivation: linear and basis expansion regression can lead to &amp;ldquo;non-full&amp;rdquo; column rank.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So we limit the size of coefficients (shrinkage) (a larger $\lambda$ means stronger shrinkage. The value is optimized by cross validation.):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/ridge_regression.png&#34; alt=&#34;ridge regression&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/ridge_regression_estimator.png&#34; alt=&#34;ridge regression estimator&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/kernel_ridge_regression.png&#34; alt=&#34;kernel ridge regression&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/kernel_ridge_regression_algorithm.png&#34; alt=&#34;kernel ridge regression algorithm&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;model-performance-assessment&#34;&gt;Model Performance Assessment&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For regression, we first compare our model with the mean model, which always predicts the average of the labels in the training data. If the fit or our model is better than the mean model, we compare the MSE (mean squared error) for the training and test data. If the MSE for the test data is substantially higher, it is a sign of overfitting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For classification, we have the following metrics and tools:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;confusion-matrix&#34;&gt;Confusion Matrix&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The confusion matrix is a table that summarizes how successful the classification model at predicting examples belonging to various classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take a binary classification problem as an example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;spam (predicted)&lt;/th&gt;
&lt;th&gt;not_spam (predicted)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spam (actual)&lt;/td&gt;
&lt;td&gt;23 (TP)&lt;/td&gt;
&lt;td&gt;1 (FN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not_spam (actual)&lt;/td&gt;
&lt;td&gt;12 (FP)&lt;/td&gt;
&lt;td&gt;556 (TN)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TP - True Positive; FN - False Negative;&lt;/p&gt;
&lt;p&gt;FP - False Positive; TN - True Negative;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;precisionrecall&#34;&gt;Precision/Recall&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;accuracy&#34;&gt;Accuracy&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;cost-sensitive-accuracy&#34;&gt;Cost-Sensitive Accuracy&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;area-under-the-roc-curve-auc&#34;&gt;Area under the ROC Curve (AUC)&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;hyperparameter-tuning&#34;&gt;Hyperparameter Tuning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;training-error&#34;&gt;Training Error&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Definition ($\tau$ is the training set):&lt;/p&gt;
&lt;p&gt;$$TE(\hat f, \tau) = \frac{1}{N}\sum_{i=1}^NL(y_i,\hat f(x_i))$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;generalizationtest-error&#34;&gt;Generalization/Test Error&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Definition ($\tau$ is a sample of the random variable T):&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
GE(\hat f, \tau) &amp;amp;= E_{X,Y}(L(Y, \hat f_T(X))|T=\tau) \\&lt;br&gt;
&amp;amp;= \int_{R_Y}\int_{R_X}L(y, \hat f_T(x))\rho(x,y|\tau)dxdy \\&lt;br&gt;
&amp;amp;= \int_{R_Y}\int_{R_X}L(y, \hat f_T(x))\frac{\rho(x,y,\tau)}{\rho_\tau\tau}dxdy
\end{align}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expected generalization/test error&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
EGE(\hat f, \tau) &amp;amp;= E_T(E_{X,Y}(L(Y, \hat f_T(X))|T=\tau)) \\&lt;br&gt;
&amp;amp;= \int_{R_T}(\int_{R_Y}\int_{R_X}L(y, \hat f_T(x))\rho(x,y|\tau)dxdy)\rho(\tau)d\tau \\&lt;br&gt;
&amp;amp;= \int_{R_T}\int_{R_Y}\int_{R_X}L(y, \hat f_T(x))\rho(x,y,\tau) dxdyd\tau
\end{align}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;validation-set-error-estimation&#34;&gt;Validation Set Error Estimation&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/validation_set.png&#34; alt=&#34;validation set&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;cross-validation&#34;&gt;Cross-Validation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When we have few training examples, it could be prohibitive to have both validation and test set. So we can split the data into a training and a test set and use cross-validation on the training set to simulate a validation set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each subset of the training set is called a fold. Typically, a five-fold cross-validation is used in practice. We would train five models (use $F_2 F_3 F_4 F_5$ for model 1 and so on) and compute the value of the metric of interest on each validation set, from $F_1$ to $F_5$ and get the average score.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/cross_validation.png&#34; alt=&#34;cross validation&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave-one-out cross validation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/leave_one_out_validation.png&#34; alt=&#34;leave-one-out cross validation&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;neural-networks-and-deep-learning&#34;&gt;Neural Networks and Deep Learning&lt;/h2&gt;
&lt;h3 id=&#34;neural-networks&#34;&gt;Neural Networks&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The function $f_{NN}$ is a nested function. So for a 3-layer neural network that returns a scalar:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$y=f_{NN}(\mathbf{x}) = f_3(\mathbf{f}_2(\mathbf{f}_1(\mathbf{x})))$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\mathbf{f}_1$ and $\mathbf{f}_2$ are vector functions of the following form ($\mathbf{g}_l$ is the activation function - a fixed and chosen nonlinear function; $\mathbf{W}_l$ (a matrix) and $\mathbf{b}_l$ (a vector) are learned using gradient descent):&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\mathbf{f}_l(\mathbf{z}) = \mathbf{g}_l(\mathbf{W}_l\mathbf{z} + \mathbf{b}_l)$$&lt;/p&gt;
&lt;h4 id=&#34;multilayer-perceptron-vanilla-neural-network&#34;&gt;Multilayer Perceptron (Vanilla Neural Network)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A multiplayer perceptron (MLP) is a class of a feed-forward neural network (FFNN). It has a fully-connected architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In each rectangle unit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All inputs of the unit are joined together to form an input vector.&lt;/li&gt;
&lt;li&gt;The unit applies a linear transformation.&lt;/li&gt;
&lt;li&gt;The unit applies an activation function.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An example (each unit&amp;rsquo;s parameters $w_{l,u}$ and $b_{l,u}$):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/mlp.png&#34; alt=&#34;MLP&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A more rigorous definition:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/multilayer_perceptron.png&#34; alt=&#34;multilayer perceptron&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can do regression/classification by optimizing the weight $\omega \ \alpha$.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Highly non-linear, non-convex -&amp;gt; many local minima.&lt;/li&gt;
&lt;li&gt;$\omega \ \alpha$ often strongly underdetermined.&lt;/li&gt;
&lt;li&gt;No closed form formula -&amp;gt; use gradient descent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;feed-forward-neural-network-architecture&#34;&gt;Feed-Forward Neural Network Architecture&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If we want to solve a regression or a classification problem, the last layer usually contains only one unit. If $g_{last}$ is linear, then the neural net is a regression model. If $g_{last}$ is a logistic function, it&amp;rsquo;s a binary classification model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any differentiable function can be chosen as $g_{l,u}$. And primary reason of such a nonlinear component is to allow the neural net to approximate nonlinear functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Popular choices for $g$ are the logistic function, TanH, and ReLU (rectified linear unit function):&lt;/p&gt;
&lt;p&gt;$$tanh(z) = \frac{e^z - e^{-z}}{e^z + e^{-z}}$$&lt;/p&gt;
&lt;p&gt;$$relu(z) = 0 \ \ if \ z &amp;lt; 0$$&lt;/p&gt;
&lt;p&gt;$$relu(z)= z \ \ otherwise$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;deep-learning&#34;&gt;Deep Learning&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deep learning refers to training neural networks with more than two non-ouput layers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The two biggest challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exploding gradient - use gradient clipping or $L_1$ $L_2$ regularization&lt;/li&gt;
&lt;li&gt;Vanishing gradient - use ReLU, LSTM, and skip connections (in residual neural networks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backpropagation is an efficient algorithm for computing gradients on neural networks using the chain rule. (It&amp;rsquo;s used to update the parameters.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For overfitting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Early stopping in training.&lt;/li&gt;
&lt;li&gt;$L_2$ regularization.&lt;/li&gt;
&lt;li&gt;Add dropout layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;convolutional-neural-network&#34;&gt;Convolutional Neural Network&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When our training examples are images, the input is very high-dimensional (each picture is a feature). If we use MLP, the optimization problem is likely to become intractable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A convolutional neural network (CNN) is a special kind of FFNN that significantly reduces the number of parameters. Convolutional networks are simply neural networks that use convolution in place of general matrix multiplication in at least one of their layers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use the moving window approach and then train multiple smaller regression models at once, each small regression model receiving a square patch as input. The goal of each small regression model is to detect a specific kind of pattern in the input patch. To detect some pattern, a small regression model has to learn the parameters of a matrix $\mathbf{F}$ (filter).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, if we have the following matrix $\mathbf{P}$ (patch) and $\mathbf{F}$, we can calculate the convolution of them. And the value is higher the more similar $\mathbf{F}$ is to $\mathbf{P}$. (The patch represents a pattern that looks like a cross.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/convolution.png&#34; alt=&#34;convolution&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For convenience, there&amp;rsquo;s also a bias parameter b associated with each filter which is added to the result to a convolution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One layer of a CNN consists of multiple convolution filters. Each filter of the first layer slides - or convolves - across the input image, left to right, top to bottom.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/convolving.png&#34; alt=&#34;convolving&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The filters and bias values are trainable parameters and are optimized using gradient descent with backpropagation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The subsequent layer treats the output of the preceding layer as a collection of image matrices. Such a collection is called a volume.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/volume.png&#34; alt=&#34;volume&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stride is the step size of the moving window. We can also use paddings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pooling is a layer that applies a fixed operator, usually either max or average instead of applying a trainable filter. It increases the accuracy and improves the training speed by reducing the number of parameters. (The one below uses max.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/pooling.png&#34; alt=&#34;pooling&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;recurrent-neural-network&#34;&gt;Recurrent Neural Network&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h2 id=&#34;problems-and-solutions&#34;&gt;Problems and Solutions&lt;/h2&gt;
&lt;h3 id=&#34;basis-expansions&#34;&gt;Basis Expansions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basis expansion extends the linear model to a non-linear model. We achieve this by introducing basis functions $\phi_m (X)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definition:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/basis_expansion.png&#34; alt=&#34;basis expansion&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For quadratic polynomial regression, our basis functions will be: $\phi_1(x)=1, \ \phi_2(x)=x, \ \phi_3(x)=x^2$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;regression-with-gaussian-kernel&#34;&gt;Regression with Gaussian Kernel&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The Gaussian kernel ($\sigma^2$ is a scaler parameter, i.e. the variance or kernel width):&lt;/p&gt;
&lt;p&gt;$$k(x,x&amp;rsquo;)=e^{-\frac{||x-x&#39;||^2}{\sigma^2}}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regression for kernel-based model:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/kernel_based_regression.png&#34; alt=&#34;kernel-based regression&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/kernel_algorithm.png&#34; alt=&#34;kernel algorithm&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;kernel-regression&#34;&gt;Kernel Regression&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Kernel regression is a non-parametric method, which means there are no parameters to learn. The model is based on the data itself (like in kNN).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The simplest kernel regression looks like this (the function $k(\cdot)$ is called a kernel, which plays the role of a similarity function - $w_i$ is higher when x is similar to $x_i$):&lt;/p&gt;
&lt;p&gt;$$f(x)=\frac{1}{N}\sum_{i=1}^{N}w_iy_i, \ where \ w_i = \frac{Nk(\frac{x_i - x}{b})}{\sum_{l=1}^Nk(\frac{x_l - x}{b})}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kernels can have different forms, the most frequently used is the Gaussian kernel:&lt;/p&gt;
&lt;p&gt;$$k(z)=\frac{1}{\sqrt{2\pi}}exp(\frac{-z^2}{2})$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;classification&#34;&gt;Classification&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Decision boundary: the set of points at which the probability of x to be in either of the classes is equal:&lt;/p&gt;
&lt;p&gt;$$\{x \in \mathbb{R}_X|p(1|x)=p(2|x)\}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The classification is linear if the decision boundaries are linear.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classification by linear regression of indicator matrix:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/classification_by_linear_regression.png&#34; alt=&#34;classification by linear regression&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;linear-discriminant-analysis&#34;&gt;Linear Discriminant Analysis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Linear Discriminant analysis (LDA) is a method used to find a linear combination of features that characterizes or separates two or more classes of objects or events. The resulting combination may be used as a linear classifier, or, more commonly, for dimensionality reduction before later classification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mathematical definition and the algorithm:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/LDA.png&#34; alt=&#34;LDA&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/LDA_algorithm.png&#34; alt=&#34;LDA algorithm&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LDA ia linear predictor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A non-linear classification predictor can be obtained if we use $N(\mu_g, \Sigma_g)$ instead of $N(\mu_g, \Sigma)$, i.e. a class dependent covariance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;multiclass-classification&#34;&gt;Multiclass Classification&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;one-class-classification&#34;&gt;One-Class Classification&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;multi-label-classification&#34;&gt;Multi-Label Classification&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;ensemble-learning&#34;&gt;Ensemble Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;learning-to-label-sequences&#34;&gt;Learning to Label Sequences&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;sequence-to-sequence-learning&#34;&gt;Sequence to Sequence Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;active-learning&#34;&gt;Active Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;semi-supervised-learning-1&#34;&gt;Semi-Supervised Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;one-shot-learning&#34;&gt;One-Shot Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;zero-shot-learning&#34;&gt;Zero-Shot Learning&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h2 id=&#34;advanced-practice&#34;&gt;Advanced Practice&lt;/h2&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h2 id=&#34;unsupervised-learning-1&#34;&gt;Unsupervised Learning&lt;/h2&gt;
&lt;p&gt;Unsupervised learning deals with problems in which data doesn&amp;rsquo;t have labels.&lt;/p&gt;
&lt;h3 id=&#34;density-estimation&#34;&gt;Density Estimation&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;clustering&#34;&gt;Clustering&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clustering is a problem of learning to assign a label to examples by leveraging an unlabeled dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A dissimilarity function measures the difference / lack of affinity between two observations from X. It holds that $d(x,x) = 0$ and $d(x,x&amp;rsquo;)=d(x&amp;rsquo;,x)$. Some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squared Euclidean Distance: $d(x,x&amp;rsquo;)=\sum_{j=1}^D(x_j-x_{j}&#39;)^2$&lt;/li&gt;
&lt;li&gt;Componentwise Distance: $d(x,x&amp;rsquo;)=\sum_{j=1}^D|x_j-x_{j}&amp;lsquo;|$&lt;/li&gt;
&lt;li&gt;Weighted Squared Euclidean Distance: $d(x,x&amp;rsquo;)=\sum_{j=1}^Dw_j(x_j-x_{j}&#39;)^2$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In combinatorial clustering, we look for an encoder $C:\{1,..,N\} \rightarrow \{1,..,K\}$ that assigns each sample $x_i$ a label or cluster $k = C(i)$ such that a given loss is minimized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The canonical loss for the encoder:&lt;/p&gt;
&lt;p&gt;$$L(C) = \frac{1}{2}\sum_{k=1}^K\sum_{C(i)=k}\sum_{C_(i&amp;rsquo;)=k}d(x_i,x_{i&amp;rsquo;})$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use centroids ($\bar x_k = \frac{1}{N_k}\sum_{C(i)=k}x_i$) to simplify the loss function&lt;/p&gt;
&lt;p&gt;$$L(C)=\sum_{k=1}^KN_k\sum_{C(i)=k}||x_i - \bar x_k||^2$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;k-means&#34;&gt;K-Means&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose k - the number of clusters (a hyperparameter which requires an educated guess).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Randomly put k feature vectors, called centroids, to the feature space. (The initial positions influence the final positions.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute the distance from each example x to each centroid c using some metric, like the Euclidean distance. Assign the closest centroid to each example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each centroid, calculate the average feature vector of the examples labeled with it. The average feature vectors become the new locations of the centroids.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recompute the distance from each example to each centroid, modify the assignment and repeat the procedure until the assignments don&amp;rsquo;t change after the centroid locations were recomputed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The algorithm (using iterative greedy descent):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/k_means.png&#34; alt=&#34;k-means&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;dbscan-and-hdbscan&#34;&gt;DBSCAN and HDBSCAN&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;determining-the-number-of-clusters&#34;&gt;Determining the Number of Clusters&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h4 id=&#34;other-clustering-algorithms&#34;&gt;Other Clustering Algorithms&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;dimensionality-reduction&#34;&gt;Dimensionality Reduction&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Since modern ML algorithms can handle very high-dimensional examples, dimensionality reduction techniques are used less in practice than in the past.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most frequent use case is data visualization: human can only interpret on a plot the maximum of three dimensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another situation is that we need to build an interpretable model and are limited in the choice of algorithms. Then it removes redundant or highly correlated features and also reduces the noise in the data, which all improve the interpretability of the model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;principal-component-analysis-pca&#34;&gt;Principal Component Analysis (PCA)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/pca.png&#34; alt=&#34;PCA&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principal components are vectors that define a new coordinate system in which the first axis goes in the direction of the highest variance in the data. The second axis is orthogonal to the first one and goes in the direction of the second highest variance in the data. The length of the arrow reflects the variance in the direction. They form the orthogonal basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we want to reduce the dimensionality to $D_{new} &amp;lt; D$, we pick $D_{new}$ largest principal components and project our data points on them. For 2D, we can set $D_{new} = 1$ and get the projected orange points in the figure. To describe each orange point, we need only one coordinate instead of two: the coordinate with respect to the first principal component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For data compression/ dimensionality reduction, we aim to look for a lower-dimensional representation / compression of data (lossy compression, ${W}_d \ {V}_d$ are matrices for compression and decompression respectively):&lt;/p&gt;
&lt;p&gt;$$z_i = comp_d (x_i)$$
$$x_i \approx \hat x_i = decomp_d (z_i)$$
$$(\hat{V_d}, \hat{W_d}) = argmin_{W_d, {V}_d} \sum_{i=1}^N||x_i-V_d {W}_d x_i||^2$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the matrix above ($\hat{V_d}$), it&amp;rsquo;s orthonormal and $\hat{W_d} = \hat{V_d^T}$. So we can rewrite our minimization problem (the columns of $\hat {V}_d$ are called principle components, which are ordered by importance):&lt;/p&gt;
&lt;p&gt;$$\hat {V_d} = argmin_{V_d} \sum_{i=1}^N||x_i-V_d V_d^T x_i||^2$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Algorithms (svd -&amp;gt; singular value)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/PCA_algorithm.png&#34; alt=&#34;PCA algorithm&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/compression.png&#34; alt=&#34;compression&#34;&gt;
&lt;img src=&#34;https://tillchen.com/images/decompression.png&#34; alt=&#34;decompression&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;umap&#34;&gt;UMAP&lt;/h4&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h3 id=&#34;outlier-detection&#34;&gt;Outlier Detection&lt;/h3&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h2 id=&#34;other-forms-of-learning&#34;&gt;Other Forms of Learning&lt;/h2&gt;
&lt;p&gt;To be filled.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/43190851-the-hundred-page-machine-learning-book&#34;&gt;The Hundred-Page Machine Learning Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/148009.The_Elements_of_Statistical_Learning?ac=1&amp;amp;from_search=true&amp;amp;qid=8GAFr2BFEO&amp;amp;rank=1&#34;&gt;The Elements of Statistical Learning: Data Mining, Inference, and Prediction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/17397466-an-introduction-to-statistical-learning&#34;&gt;An Introduction to Statistical Learning: With Applications in R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Machine Learning course by &lt;a href=&#34;https://www.jacobs-university.de/directory/zaspel&#34;&gt;Prof. Dr. Peter Zaspel&lt;/a&gt; at Jacobs University Bremen&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://tillchen.com/contact/</link>
      <pubDate>Wed, 29 Apr 2020 11:03:29 +0200</pubDate>
      
      <guid>https://tillchen.com/contact/</guid>
      <description>&lt;p&gt;Drop me an &lt;a href=&#34;mailto:tillchen417.com&#34;&gt;email&lt;/a&gt; 😄🎉!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testimonials</title>
      <link>https://tillchen.com/testimonials/</link>
      <pubDate>Wed, 29 Apr 2020 11:03:14 +0200</pubDate>
      
      <guid>https://tillchen.com/testimonials/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;It was Tianyao&amp;rsquo;s cleverness, eagerness to learn, meticulousness, and serious attitudes about his work that left us a firm impression and supplied great firepower to our team!&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ndash; Mr. Zhe Han (Senior Software Engineer &amp;amp; Team Leader at TD Tech)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Tianyao set a new record for &amp;ldquo;the youngest commit&amp;rdquo; in our company&amp;rsquo;s codebase!&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ndash; Mr. Haijun Liu (Senior Software Engineer &amp;amp; Project Manager at TD Tech)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Skills</title>
      <link>https://tillchen.com/skills/</link>
      <pubDate>Wed, 29 Apr 2020 11:02:27 +0200</pubDate>
      
      <guid>https://tillchen.com/skills/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Java, Swift, C++, Python, Kotlin, C, Go, JavaScript, Android SDK (Android Jetpack), iOS SDK, Git, SQL, Bash, Firebase (NoSQL), Batch&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring, HTML/CSS, GCP, Docker, Haskell.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://tillchen.com/projects/</link>
      <pubDate>Tue, 28 Apr 2020 21:37:37 +0200</pubDate>
      
      <guid>https://tillchen.com/projects/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#jstore-android-a-marketplace-for-jacobs-university-bremen&#34;&gt;JStore (Android): A Marketplace for Jacobs University Bremen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jstore-ios-a-marketplace-for-jacobs-university-bremen&#34;&gt;JStore (iOS): A Marketplace for Jacobs University Bremen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4minitz---meeting-minutes-web-app&#34;&gt;4minitz - Meeting Minutes Web App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jstore-android-a-marketplace-for-jacobs-university-bremen&#34;&gt;JStore (Android): A Marketplace for Jacobs University Bremen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tillchen/JStore_Android&#34;&gt;View Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Single-handedly built the Android app that enables students on campus to sell and buy items with ease.&lt;/li&gt;
&lt;li&gt;100+ commits. 5000+ LOC (Java + XML). 600+ registered users. Available on Google Play.&lt;/li&gt;
&lt;li&gt;Utilized: Java, Android Jetpack, Firebase (Auth, Cloud Firestore (NoSQL), Storage (GCP)).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jstore-ios-a-marketplace-for-jacobs-university-bremen&#34;&gt;JStore (iOS): A Marketplace for Jacobs University Bremen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tillchen/JStore_iOS&#34;&gt;View Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Single-handedly building the iOS app that enables students on campus to sell and buy items with ease.&lt;/li&gt;
&lt;li&gt;90+ commits. 2000+ LOC (Swift). 600+ registered users. Available on App Store.&lt;/li&gt;
&lt;li&gt;Utilized: Swift, iOS SDK, Firebase (Auth, Cloud Firestore (NoSQL), Storage (GCP)).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4minitz---meeting-minutes-web-app&#34;&gt;4minitz - Meeting Minutes Web App&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://minitz.jacobs.university/&#34;&gt;View Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deployed, modified, and maintaining the open source web app 4minitz from Github on a Debian server.&lt;/li&gt;
&lt;li&gt;Utilized: Docker, Nginx, Certbot, cron (auto certificate renewal), JSON, Linux commands, Vim, SMTP.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://tillchen.com/about/</link>
      <pubDate>Tue, 28 Apr 2020 21:37:31 +0200</pubDate>
      
      <guid>https://tillchen.com/about/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#about-me&#34;&gt;About Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#education&#34;&gt;Education&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#jacobs-university-bremen-bremen-germany&#34;&gt;Jacobs University Bremen, Bremen, Germany&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#experience&#34;&gt;Experience&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#jacobs-university-bremen-bremen-germany-1&#34;&gt;Jacobs University Bremen, Bremen, Germany&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#td-tech-beijing-china&#34;&gt;TD Tech, Beijing, China&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about-me&#34;&gt;About Me&lt;/h2&gt;
&lt;p&gt;Hi there! You may call me Till, which is my nickname:D!&lt;/p&gt;
&lt;p&gt;In my high school, I was eager to become a theoretical physicist (or more precisely, astrophysicist) because of my fascination with the beauty and the grandeur of Mother Nature. I relished in the mathematical, philosophical, and logical thinking while doing physics.&lt;/p&gt;
&lt;p&gt;However, thanks to these three mind-blowing books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/34466959-the-sentient-machine?ac=1&amp;amp;from_search=true&amp;amp;qid=k0Ey92dgkk&amp;amp;rank=1&#34;&gt;The Sentient Machine: The Coming Age of Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/34272565-life-3-0?ac=1&amp;amp;from_search=true&amp;amp;qid=ElsA2TwiLK&amp;amp;rank=1&#34;&gt;Life 3.0: Being Human in the Age of Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/20527133-superintelligence&#34;&gt;Superintelligence: Paths, Dangers, Strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I saw the bright and limitless future of AI and was determined to enter the field of computer science.&lt;/p&gt;
&lt;p&gt;Now as a computer science undergraduate at Jacobs University Bremen (an English-speaking university in Bremen, Germany,) I&amp;rsquo;m deeply in love with not only theoretical CS, AI, and machine learning, but also practical software development. Always highly motivated and self-driven to learn new things, I&amp;rsquo;m striving to achieve both academic and technical excellence.&lt;/p&gt;
&lt;p&gt;Plus, as an avid book-learner, I&amp;rsquo;ve been enjoying many fascinating tech books during my self-study and self-improvement. You can find the list of the books &lt;a href=&#34;https://www.goodreads.com/review/list/70012245-tianyao-chen?shelf=tech-books&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Favorite Language: Java; Favorite Editor: VSCode (with the Vim extension 😎); Favorite OS: macOS;
Favorite Sport: Soccer; Favorite TV Series: Rick and Morty!&lt;/p&gt;
&lt;h2 id=&#34;education&#34;&gt;Education&lt;/h2&gt;
&lt;h3 id=&#34;jacobs-university-bremenhttpswwwjacobs-universityde-bremen-germany&#34;&gt;&lt;a href=&#34;https://www.jacobs-university.de/&#34;&gt;Jacobs University Bremen&lt;/a&gt;, Bremen, Germany&lt;/h3&gt;
&lt;p&gt;August 2019 - Present&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tillchen.com/pdfs/cs_curriculum.pdf&#34;&gt;&lt;em&gt;B.S. Computer Science, Class of 2021&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;experience&#34;&gt;Experience&lt;/h2&gt;
&lt;h3 id=&#34;jacobs-university-bremen-bremen-germany&#34;&gt;Jacobs University Bremen, Bremen, Germany&lt;/h3&gt;
&lt;p&gt;February 2020 - Present&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Teaching Assistant&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grading homework and giving tutorials for: Algorithms and Data Structures.&lt;/li&gt;
&lt;li&gt;Leveraged knowledge: Algorithms &amp;amp; Data Structures, Java, C++, Python, C.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;June 2019 - December 2019&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Teaching Assistant&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graded homework, exams, and gave tutorials for: Intro to CS, Data Management (from Data Engineering).&lt;/li&gt;
&lt;li&gt;Leveraged knowledge: Haskell, MySQL, Python, GCP, General Computer Science.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;td-tech-beijing-china&#34;&gt;TD Tech, Beijing, China&lt;/h3&gt;
&lt;p&gt;June 2019 - August 2019&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Software Engineer Intern&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuously and efficiently delivered significant new features to enterprise Android apps on top of the AOSP.&lt;/li&gt;
&lt;li&gt;Wrote comprehensive Python and Batch scripts, which automated the Android custom ROM upgrading process for enterprise Android devices and reduced the upgrade time by at least 67%.&lt;/li&gt;
&lt;li&gt;Leveraged knowledge: Android Development (Java), Git, Scripting, Debugging, SQLite, Linux.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Algorithms and Data Structures</title>
      <link>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic-programming&#34;&gt;Dynamic Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dynamic-programming&#34;&gt;Dynamic Programming&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The two key ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optimal substructure: The optimal solution contains the optimal solutions to subproblems.
&lt;ul&gt;
&lt;li&gt;The subproblems need to be independent, which means the solution to one subproblem does not affect the solution to another subproblem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;overlapping subproblems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reconstruct an optimal solution&lt;/li&gt;
&lt;li&gt;Memoization: When the subproblem is first encountered as the recursive algorithm unfolds, its solution is computed and then stored in the stable. Each subsequent time that we encounter this subproblem, we simply look up the value and return it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For many optimization problems, using dynamic programming is overkill. Even though there is almost always a more cumbersome dynamic-programming solution beneath every greedy algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A greedy algorithm always makes the choice that looks best at the moment. That is, it makes a locally optimal choice in the hope that this choice will lead to a globally optimal solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The two key ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;greedy-choice property: we can assemble a globally optimal solution by making locally optimal (greedy) choices.
&lt;ul&gt;
&lt;li&gt;Unlike dynamic programming, which solves the subproblems before making the first choice (bottom up), a greedy algorithm makes its first choice before solving any subproblems (top down.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optimal substructure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Introduction-Algorithms-Leiserson-published-Hardcover-dp-B008F1DKXU/dp/B008F1DKXU/ref=mt_paperback?_encoding=UTF8&amp;amp;me=&amp;amp;qid=1586534178&#34;&gt;Introduction to Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://tillchen.com/posts/2020-03-29-Design-Patterns/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0100</pubDate>
      
      <guid>https://tillchen.com/posts/2020-03-29-Design-Patterns/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#principles&#34;&gt;Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-strategy-pattern&#34;&gt;The Strategy Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-observer-pattern&#34;&gt;The Observer Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-decorator-pattern&#34;&gt;The Decorator Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-factory-pattern&#34;&gt;The Factory Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-singleton-pattern&#34;&gt;The Singleton Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-command-pattern&#34;&gt;The Command Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-adapter-pattern&#34;&gt;The Adapter Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-facade-pattern&#34;&gt;The Facade Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-template-method-pattern&#34;&gt;The Template Method Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-state-pattern&#34;&gt;The State Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-proxy-pattern&#34;&gt;The Proxy Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#model-view-controller&#34;&gt;Model-View-Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-pattern-categories&#34;&gt;Design Pattern Categories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Identify the varying parts and separate them from the invariant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program to an interface (supertype), not an implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Animal animal &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Dog&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
animal&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;makeSound&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
List&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Favor composition over inheritance. HAS-A can be better than IS-A.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single responsibility: a class should have only one reason to change.&lt;/li&gt;
&lt;li&gt;Open-closed: classes should be open for extension, but closed for modification.&lt;/li&gt;
&lt;li&gt;Liskov Substitution: objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program&lt;/li&gt;
&lt;li&gt;Interface Segregation: many client-specific interfaces are better than one general-purpose interface.&lt;/li&gt;
&lt;li&gt;Dependency inversion: depend upon abstractions. Do not depend upon concrete classes. High-level components should not depend on low-level components; rather, they should both depend on abstractions.
&lt;ul&gt;
&lt;li&gt;No variables should hold a reference to a concrete class.&lt;/li&gt;
&lt;li&gt;No class should derive from a concrete class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loose coupling: minimize the interdependency between objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design by contract: preconditions, postconditions, and invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principle of Least Knowledge aka (Law of Demeter): talk only to your immediate friends.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hollywood Principle (aka. Inversion of Control): (High-level components) Don&amp;rsquo;t call us, we&amp;rsquo;ll call you (low-level components).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A form of IoC:  Dependency injection - a technique in which an object receives other objects that it depends on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell-Don&amp;rsquo;t-Ask: A-&amp;gt;B  instead of B-&amp;gt;A-&amp;gt;B for data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build end-to-end (incrementally) instead of top-down nor bottom-up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a Test-driven development (TDD), there&amp;rsquo;s no need to do a big design up front.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s no need to prefix &lt;code&gt;m_&lt;/code&gt; for private stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We shouldn&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; use patterns in today&amp;rsquo;s agile and XP trends. But if our specific solution is similar to a pattern, refactor it to make it more generic if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-strategy-pattern&#34;&gt;The Strategy Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The strategy pattern enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-observer-pattern&#34;&gt;The Observer Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Publishers (Subject) + Subscribers (Observers) = Observer Pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It defines a one-to-many dependency. When the subject changes, all dependents are notified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Java, we can use the built-in Observable - Observer superclasses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// extends Observable
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;setChanged&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
notifyObservers&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// extends Observer
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// in the constructor
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;observable&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;addObserver&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Java, Observable is a class, which means we have to subclass it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/observer.png&#34; alt=&#34;Observer&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/observer_example.png&#34; alt=&#34;Observer example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-decorator-pattern&#34;&gt;The Decorator Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Decorators have the same supertype as the object they decorate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use one or more decorators to wrap (HAS-A) an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The decorator pattern attaches additional responsibilities to an object dynamically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/decorator.png&#34; alt=&#34;Decorator&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/decorator_example.png&#34; alt=&#34;Decorator example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;java.io&lt;/code&gt; is mainly using the decorator pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-factory-pattern&#34;&gt;The Factory Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The factory method pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/factory.png&#34; alt=&#34;Factory&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/factory_example.png&#34; alt=&#34;Factory example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency inversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-singleton-pattern&#34;&gt;The Singleton Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The singleton pattern restricts the instantiation of a class to one single instance, and provides a global point of access to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; Singleton uniqueInstance&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// PRIVATE constructor
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;synchronized&lt;/span&gt; Singleton &lt;span style=&#34;color:#268bd2&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// remove synchronized if there&amp;#39;s no multithreading
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;uniqueInstance &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            uniqueInstance &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; uniqueInstance&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-command-pattern&#34;&gt;The Command Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The command pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests and support undoable operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/command.png&#34; alt=&#34;Command&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-adapter-pattern&#34;&gt;The Adapter Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The adapter pattern converts the interface of a class into another interface the clients expect. It lets classes work together that couldn&amp;rsquo;t otherwise because of incompatible interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/adapter1.png&#34; alt=&#34;Adapter1&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/adapter2.png&#34; alt=&#34;Adapter2&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-facade-pattern&#34;&gt;The Facade Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The facade pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Least knowledge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-template-method-pattern&#34;&gt;The Template Method Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The template method pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm&amp;rsquo;s structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;AbstractClass&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;templateMethod&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        primitiveOperation1&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        primitiveOperation2&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        concreteOperation&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;primitiveOperation1&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;primitiveOperation2&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;concreteOperation&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// implementation here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inversion of control.&lt;/li&gt;
&lt;li&gt;Single responsibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-state-pattern&#34;&gt;The State Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The state pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s close to the concept of finite-state machines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-proxy-pattern&#34;&gt;The Proxy Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A remote proxy acts as a local representative to a remote object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java RMI&amp;rsquo;s (remote method invocation) client helper is a &amp;ldquo;stub&amp;rdquo; and the service helper is a &amp;ldquo;skeleton&amp;rdquo;. The stub is the proxy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The proxy pattern provides a surrogate or placeholder for another object to access it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;model-view-controller&#34;&gt;Model-View-Controller&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The MVC is using:
&lt;ul&gt;
&lt;li&gt;the strategy pattern: the view delegates to the controllers to handle user actions. (Swappable controllers.)&lt;/li&gt;
&lt;li&gt;the composite pattern: the view is a composite of GUI components.&lt;/li&gt;
&lt;li&gt;the observer pattern: the model is the observable, and the view &amp;amp; controller are observers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;design-pattern-categories&#34;&gt;Design Pattern Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational: Factory, Singleton&lt;/li&gt;
&lt;li&gt;Behavioral (how classes communicate): State, Iterator, Command&lt;/li&gt;
&lt;li&gt;Structural: Adapter, Composite, Decorator, Facade, Proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly-dp-0596007124/dp/0596007124/ref=mt_paperback?_encoding=UTF8&amp;amp;me=&amp;amp;qid=1585509064&#34;&gt;Head First Design Patterns: A Brain-Friendly Guide 1st Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=2ahUKEwjp6c22-JLpAhWO-qQKHQ_GBQoQFjAAegQIARAB&amp;amp;url=https%3A%2F%2Fwww.goodreads.com%2Fbook%2Fshow%2F4099.The_Pragmatic_Programmer&amp;amp;usg=AOvVaw0I5l-Ojbr1FUIYyreWhRyx&#34;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/3735293-clean-code&#34;&gt;Clean Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/23215733-the-software-craftsman?ac=1&amp;amp;from_search=true&amp;amp;qid=aFF78JXQaM&amp;amp;rank=2#&#34;&gt;The Software Craftsman: Professionalism, Pragmatism, Pride&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go Notes</title>
      <link>https://tillchen.com/posts/2020-02-17-Go-Notes/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0100</pubDate>
      
      <guid>https://tillchen.com/posts/2020-02-17-Go-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#structs&#34;&gt;Structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#errors-and-failures&#34;&gt;Errors and Failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#goroutines-and-channels&#34;&gt;Goroutines and Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hello World:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;github.com/headfirstgo/keyboard&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// use go get to download the package
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;)

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello Go!&amp;#34;&lt;/span&gt;)
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(strings.&lt;span style=&#34;color:#268bd2&#34;&gt;Title&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;head first go&amp;#34;&lt;/span&gt;))
    rand.&lt;span style=&#34;color:#268bd2&#34;&gt;Seed&lt;/span&gt;(time.&lt;span style=&#34;color:#268bd2&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#268bd2&#34;&gt;Unix&lt;/span&gt;())
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(rand.&lt;span style=&#34;color:#268bd2&#34;&gt;Intn&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;100&lt;/span&gt;)) &lt;span style=&#34;color:#586e75&#34;&gt;// 0 - 99
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;go fmt&lt;/code&gt; to format the code. (Go uses tabs instead of spaces.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;go run&lt;/code&gt; to compile and run. Or &lt;code&gt;go build&lt;/code&gt; and &lt;code&gt;./foo&lt;/code&gt;. &lt;code&gt;go install&lt;/code&gt; generates the binary in the bin directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rune literals are surrounded by single quotes. (Just like C chars.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; foobar &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// the zero (default) value is false
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// The zero values: 0 for int and float; false for bool
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;foo &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// short variable declaration
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// ONLY ONE variable in the short variable declaration has to be new
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// This allows multiple err for definitions
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go prefers the camelCase and no semicolons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type conversions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go uses the C-like style type conversion: &lt;code&gt;length = float64(width)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And similarly for string to int: &lt;code&gt;foo, err := strconv.Atoi(&amp;quot;123&amp;quot;)&lt;/code&gt; (ASCII to Int)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go doesn&amp;rsquo;t allow variable declarations unless we use these variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use the blank identifier just like in Swift:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;reader &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; bufio.&lt;span style=&#34;color:#268bd2&#34;&gt;NewReader&lt;/span&gt;(os.Stdin)
input, _ &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; reader.&lt;span style=&#34;color:#268bd2&#34;&gt;ReadString&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#586e75&#34;&gt;// if we don&amp;#39;t handle the err
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// or we handle it:
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// if err != nil {
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// log.Fatal(err)
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;//}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like in Swift/Python, there&amp;rsquo;s no need to add parentheses for &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since Go is syntactically similar to C, it also uses the formatting verbs: &lt;code&gt;%f&lt;/code&gt;, &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%t&lt;/code&gt; (Boolean), &lt;code&gt;%v&lt;/code&gt; (Any.) (&lt;code&gt;%2d&lt;/code&gt; and &lt;code&gt;%.2f&lt;/code&gt; are also used to round the numbers.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like in Swift and Kotlin, the types are after the parameter names in a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt;(bar &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;, foobar &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt; {
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello Go!&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foofoo&lt;/span&gt;() (&lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Go!&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go is a &amp;ldquo;pass-by-value&amp;rdquo; language by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;And we have the C-style pointers and addresses. A shorter form: &lt;code&gt;fooPointer := &amp;amp;foo&lt;/code&gt; &lt;code&gt;*fooPointer = 42&lt;/code&gt; &lt;code&gt;fmt.Println(*fooPointer)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use pointers to change the value for functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;myFunc&lt;/span&gt;(foo &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;bar) {
    foo.foofoo &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;
}

&lt;span style=&#34;color:#268bd2&#34;&gt;myFunc&lt;/span&gt;(foofoofoo&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const fooBar = 42&lt;/code&gt; or &lt;code&gt;const fooBar int = 42&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go doc strconv&lt;/code&gt; to see the documentation of strconv.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go doc strconv Atoi&lt;/code&gt; to see the specific function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;godoc -http=:6060&lt;/code&gt; starts the local server at port 6060.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add ordinary comments before the package line and before functions to make them doc comments. A few conventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comments should be complete sentences.&lt;/li&gt;
&lt;li&gt;Package comments should begin with &amp;ldquo;Package + name&amp;rdquo;: &lt;code&gt;// Package myPackage does nothing.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Function comments should begin with the function name: &lt;code&gt;// MyFunction does nothing.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;import (&amp;quot;os&amp;quot;)&lt;/code&gt; and &lt;code&gt;os.Args[1:]&lt;/code&gt; gives the command-line arguments (except the file name).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variadic functions: &lt;code&gt;func myFunc (param1 int, param2 ...string) {}&lt;/code&gt; (unlimited string parameters stored as a alice in param2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions are first-class in go as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;twice&lt;/span&gt;(theFunction &lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt;()) {
    &lt;span style=&#34;color:#268bd2&#34;&gt;theFunction&lt;/span&gt;()
    &lt;span style=&#34;color:#268bd2&#34;&gt;theFunction&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Arrays:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var myArray [4]string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;myArray := [2]int{3, 4}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt.Println(myArray)&lt;/code&gt; (can be printed directly).&lt;/li&gt;
&lt;li&gt;Like in Python, use &lt;code&gt;len(meArray)&lt;/code&gt; to check the length.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For loops: &lt;code&gt;for index, value := range myArray&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; index, note &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; notes {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(index, note)
}
&lt;span style=&#34;color:#586e75&#34;&gt;// or
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; _, note &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; notes {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(note)
}
&lt;span style=&#34;color:#586e75&#34;&gt;// or
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; index, _ &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; notes {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(index)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slices: (similar to Python)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var notes []string&lt;/code&gt; then &lt;code&gt;notes = make([]string, 7)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or &lt;code&gt;notes := []string{&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;myArray := [5]string{&amp;quot;a&amp;quot;, &amp;quot;b, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;}&lt;/code&gt; &lt;code&gt;mySlice := myArray[1:3]&lt;/code&gt; gives b, c.&lt;/li&gt;
&lt;li&gt;We can also do &lt;code&gt;[1:]&lt;/code&gt; or &lt;code&gt;[:3]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The modifications for the original array or the slice will affect each other.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice = append(slice, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;foobar&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;var myMap map[string]int&lt;/code&gt; then &lt;code&gt;myMap = make(map[string]int)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or &lt;code&gt;myMap := make(map[string]int)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;myMap[&amp;quot;newKey&amp;quot;] = 1&lt;/code&gt; to insert and &lt;code&gt;myMap[&amp;quot;newKey&amp;quot;]&lt;/code&gt; to access.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map literals:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ranks &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;bronze&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;silver&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;gold&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;}
&lt;span style=&#34;color:#586e75&#34;&gt;// or multiline
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;elements &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;{
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hydrogen&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Li&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Lithium&amp;#34;&lt;/span&gt;,
}
emptyMap &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;{} &lt;span style=&#34;color:#586e75&#34;&gt;// empty
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;ok&lt;/code&gt; (a boolean value) to tell if it&amp;rsquo;s a zero value: &lt;code&gt;grade, ok := grades[name]&lt;/code&gt; then &lt;code&gt;if !go {}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;delete(myMap, &amp;quot;myKey&amp;quot;)&lt;/code&gt; to delete the pair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for loops:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for key, value := range myMap {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for key := range myMap {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for _, value := myMap {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sort.Strings(names)&lt;/code&gt; and then loop to have the sorted map.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;structs&#34;&gt;Structs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example: (&lt;code&gt;go fmt&lt;/code&gt; will format the spaces)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// Capitalize if we want to export the package
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// Lowercase if we want to make it private in its own package
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; MyStruct &lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {
    Number &lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt;
    Word &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;
    Toggle &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt;
}
MyStruct.number = &lt;span style=&#34;color:#2aa198&#34;&gt;3.14&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// or define a type
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;type&lt;/span&gt; Car &lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {
    Name &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;
    TopSpeed &lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt;
}
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; myCar Car
&lt;span style=&#34;color:#586e75&#34;&gt;// or struct literal
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;myCar &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; Car{Name: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Tesla&amp;#34;&lt;/span&gt;, TopSpeed: &lt;span style=&#34;color:#2aa198&#34;&gt;337&lt;/span&gt;}
&lt;span style=&#34;color:#586e75&#34;&gt;// Anonymous fields with just the type name is also allowed
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;Car) &lt;span style=&#34;color:#268bd2&#34;&gt;myMethod&lt;/span&gt;() {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;This is a method from Car %s&amp;#34;&lt;/span&gt;, m)
    &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;m.TopSpeed = &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;Car) &lt;span style=&#34;color:#268bd2&#34;&gt;SetTopSpeed&lt;/span&gt;(speed &lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#dc322f&#34;&gt;error&lt;/span&gt; { &lt;span style=&#34;color:#586e75&#34;&gt;// must pass by reference
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; speed &amp;lt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; {
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color:#268bd2&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Invalid speed&amp;#34;&lt;/span&gt;)
    }
    m.TopSpeed = speed
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;nil&lt;/span&gt;
}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;Car) &lt;span style=&#34;color:#268bd2&#34;&gt;TopSpeed&lt;/span&gt;() &lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt; { &lt;span style=&#34;color:#586e75&#34;&gt;// Don&amp;#39;t add Get to the name in the Getter
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; m.TopSpeed
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;type&lt;/span&gt; MyInterface &lt;span style=&#34;color:#268bd2&#34;&gt;interface&lt;/span&gt; {
    &lt;span style=&#34;color:#268bd2&#34;&gt;Foo&lt;/span&gt;()
    &lt;span style=&#34;color:#268bd2&#34;&gt;Bar&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt;)
    &lt;span style=&#34;color:#268bd2&#34;&gt;FooBar&lt;/span&gt;() &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;
 }
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m MyType) &lt;span style=&#34;color:#268bd2&#34;&gt;Foo&lt;/span&gt;() {}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m MyType) &lt;span style=&#34;color:#268bd2&#34;&gt;Bar&lt;/span&gt;(f &lt;span style=&#34;color:#dc322f&#34;&gt;float64&lt;/span&gt;) {}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; (m MyType) &lt;span style=&#34;color:#268bd2&#34;&gt;FooBar&lt;/span&gt;() &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt; {
&lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Now I&amp;#39;m complete&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#586e75&#34;&gt;// No further stuff needed. MyType automatically matches the interface now,
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// if it has defined all the methods.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type assertion: &lt;code&gt;robot, ok := noiseMaker.(Robot)&lt;/code&gt; (noiseMaker is the interface var).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The empty interface can accept any type. &lt;code&gt;func AcceptAnything(thing interface{})&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;errors-and-failures&#34;&gt;Errors and Failures&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;defer&lt;/code&gt; to make sure a function call takes place, even if the calling function exist early (returned or panicking). &lt;code&gt;defer fmt.Println(&amp;quot;I&#39;m deferred to the end.&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;panic(&amp;quot;I&#39;m panicking&amp;quot;)&lt;/code&gt; to create a panic (crashing the program).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recover&lt;/code&gt; takes the return value of &lt;code&gt;panic&lt;/code&gt; and exits the program normally.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;calmDown&lt;/span&gt;() {
    &lt;span style=&#34;color:#b58900&#34;&gt;recover&lt;/span&gt;()
}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;freakOut&lt;/span&gt;() {
    &lt;span style=&#34;color:#719e07&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;calmDown&lt;/span&gt;()
    &lt;span style=&#34;color:#b58900&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Oh no&amp;#34;&lt;/span&gt;)
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;I won&amp;#39;t be run!&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#268bd2&#34;&gt;freakout&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;calmDown&lt;/span&gt;() {
    p &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;recover&lt;/span&gt;()
    err, ok &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; p.(&lt;span style=&#34;color:#dc322f&#34;&gt;error&lt;/span&gt;) &lt;span style=&#34;color:#586e75&#34;&gt;// assert that it&amp;#39;s an error
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; ok {
        fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(err.&lt;span style=&#34;color:#268bd2&#34;&gt;Error&lt;/span&gt;())
    }
}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#719e07&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;calmDown&lt;/span&gt;()
    err &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;There&amp;#39;s an error&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#b58900&#34;&gt;panic&lt;/span&gt;(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is intentionally designed in Go to be clumsy, which discourages its usage. Normally, we just need to do &lt;code&gt;log.Fatal(err)&lt;/code&gt; and return in the functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;nil&lt;/span&gt; {
    log.&lt;span style=&#34;color:#268bd2&#34;&gt;Fatal&lt;/span&gt;(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;goroutines-and-channels&#34;&gt;Goroutines and Channels&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Goroutines (&lt;code&gt;go&lt;/code&gt; in front of function calls) enable parallelism (lightweight threads):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#719e07&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;a&lt;/span&gt;()
    &lt;span style=&#34;color:#719e07&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;b&lt;/span&gt;() &lt;span style=&#34;color:#586e75&#34;&gt;// can&amp;#39;t deal with the return value
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    time.&lt;span style=&#34;color:#268bd2&#34;&gt;Sleep&lt;/span&gt;(time.Second) &lt;span style=&#34;color:#586e75&#34;&gt;// sleep for 1 second to let the routines finish
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Channels to enable the communication between goroutines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;greeting&lt;/span&gt;(myChannel &lt;span style=&#34;color:#268bd2&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;) {
    myChannel &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// time.Sleep(time.Second) to synchronize
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    myChannel &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;)
    &lt;span style=&#34;color:#719e07&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;greeting&lt;/span&gt;(myChannel)
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;-&lt;/span&gt;myChannel) &lt;span style=&#34;color:#586e75&#34;&gt;// receives &amp;#34;hi&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;go test&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;TestFoo&lt;/span&gt;(t &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;testing.T) {
    t.&lt;span style=&#34;color:#268bd2&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;test failed&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin Notes</title>
      <link>https://tillchen.com/posts/2019-09-04-Kotlin-Notes/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-09-04-Kotlin-Notes/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oop&#34;&gt;OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nulls-and-exceptions&#34;&gt;Nulls and Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collections&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambdas-and-higher-order-functions&#34;&gt;Lambdas and Higher-Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Kotlin requires one &lt;code&gt;main&lt;/code&gt; per app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) { &lt;span style=&#34;color:#586e75&#34;&gt;// the args part can be omitted
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello Kotlin!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shorter &lt;code&gt;if&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (x &amp;gt; y) &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x is greater&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x is not greater&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; vs &lt;code&gt;val&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When using &lt;code&gt;var&lt;/code&gt;, we can assign another value to the variable.&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;val&lt;/code&gt;, the reference to the object stays forever. However, if the variable is an array, the array itself can be updated. (Similar to &lt;code&gt;let&lt;/code&gt; in Swift)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Primitive types are also objects controlled by references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar to Swift, we can define the type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; z: Int = &lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; x: Long = z.toLong() &lt;span style=&#34;color:#586e75&#34;&gt;// similarly, toFloat(), to Byte(), etc.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; myArray = arrayOf(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; myLength = myArray.size
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; explicitArray: Array&amp;lt;Int&amp;gt; = arrayOf(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#2aa198&#34;&gt;42&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; myString = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x is $x&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// When accessing a property or function of a object, use ${}
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; myArray = arrayOf(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; arraySize = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;The size if ${myArray.size}&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; firstItem = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;The first item is ${myArray[0]}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt;(bar: Int): Int{ &lt;span style=&#34;color:#586e75&#34;&gt;// Unit means no return value, or just omit it
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// stuff
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
}

&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; result = foo(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#719e07&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;max&lt;/span&gt;(a: Int, b: Int): Int = &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (a &amp;gt; b) a &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; b &lt;span style=&#34;color:#586e75&#34;&gt;// also works
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loops:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1.&lt;/span&gt;.&lt;span style=&#34;color:#2aa198&#34;&gt;100&lt;/span&gt;) println(x) &lt;span style=&#34;color:#586e75&#34;&gt;// end inclusive
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; until &lt;span style=&#34;color:#2aa198&#34;&gt;100&lt;/span&gt;) println(x) &lt;span style=&#34;color:#586e75&#34;&gt;// not end inclusive
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;15&lt;/span&gt; downTo &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;) println(x)
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1.&lt;/span&gt;.&lt;span style=&#34;color:#2aa198&#34;&gt;100&lt;/span&gt; step &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;) println(x)
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (item &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; items) println(item)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; userInput = readLine()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;when&lt;/span&gt; (x) {
    &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; -&amp;gt; println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It&amp;#39;s 0&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt; -&amp;gt; println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It&amp;#39;s 1 or 2&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; -&amp;gt; {
        println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It&amp;#39;s not 0.&amp;#34;&lt;/span&gt;)
        println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It&amp;#39;s not 1 nor 2.&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;oop&#34;&gt;OOP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Dog&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; weight: int, &lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; breed: String = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;) {
    &lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; temperament: String = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// All properties must be initialized.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// Or:
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// lateinit var temperament = String
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;bark&lt;/span&gt;() {
        println(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Woof!&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom getters and setters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;...
&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; weightInKgs: Double
    &lt;span style=&#34;color:#719e07&#34;&gt;get&lt;/span&gt;() = weight / &lt;span style=&#34;color:#2aa198&#34;&gt;2.2&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; weight = weightParam
    &lt;span style=&#34;color:#719e07&#34;&gt;set&lt;/span&gt;(value) {
        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (value &amp;gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;) field = value &lt;span style=&#34;color:#586e75&#34;&gt;// field is a keyword
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    }
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In fact, the complier adds getters and setters automatically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;var&lt;/span&gt; myProperty: String
    &lt;span style=&#34;color:#719e07&#34;&gt;get&lt;/span&gt;() = field
    &lt;span style=&#34;color:#719e07&#34;&gt;set&lt;/span&gt;(value) {
        field = value
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classes, variables, and methods are final by default. To enable inheritance and overriding, add &lt;code&gt;open&lt;/code&gt; before them. We also need to add &lt;code&gt;override&lt;/code&gt; to variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;init {}&lt;/code&gt; blocks are called during initialization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a property is defined using &lt;code&gt;val&lt;/code&gt; in the superclass, we must override it in the subclass if we want to assign a new value to it. However, if it&amp;rsquo;s defined using &lt;code&gt;var&lt;/code&gt;, we just need to reassign it in the &lt;code&gt;init {}&lt;/code&gt; block without using &lt;code&gt;override&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;abstract&lt;/code&gt; for classes, variables, and methods. These properties must all be overridden later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; lets us define common behavior OUTSIDE a superclass hierarchy. (Not IS-A, but share a property.) A class can have multiple interfaces, but can only inherit from a single direct superclass. &lt;code&gt;class X: A, B {}&lt;/code&gt; (No parentheses. &lt;code&gt;class X: A()&lt;/code&gt; means we are inheriting.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;is&lt;/code&gt; to check the type: &lt;code&gt;if (animal is Wolf)&lt;/code&gt;. And use &lt;code&gt;as&lt;/code&gt; for explicit casting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Any&lt;/code&gt; is the superclass of everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;data&lt;/code&gt; to the start of the class to make it behave like a &lt;code&gt;struct&lt;/code&gt; in Swift. Then we can use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;.equals&lt;/code&gt; to test the equivalence. (Equal objects have the same &lt;code&gt;.hashCode()&lt;/code&gt; value.) (And &lt;code&gt;.toString()&lt;/code&gt; returns the value of each property.) (BTW, &lt;code&gt;===&lt;/code&gt; is used for referential check (identity).)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;code&gt;data&lt;/code&gt;, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; (title, number) = r
&lt;span style=&#34;color:#586e75&#34;&gt;// is equivalent to
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; title = r.component1
&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; number = r.component2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Named arguments (&lt;code&gt;var r = Recipe(title = &amp;quot;title&amp;quot;, foo = &amp;quot;bar&amp;quot;)&lt;/code&gt;) are also available like in Swift.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondary constructors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;constructor&lt;/span&gt;(foo: Boolean) : &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;, foo) {} &lt;span style=&#34;color:#586e75&#34;&gt;// calls the primary constructor
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nulls-and-exceptions&#34;&gt;Nulls and Exceptions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;?&lt;/code&gt; for nullable objects just like in Swift.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;w?.eat()&lt;/code&gt; is a safe call. It&amp;rsquo;s only called when w is not null.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like optional binding in Swift, use &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;w&lt;span style=&#34;color:#719e07&#34;&gt;?.&lt;/span&gt;let {
    &lt;span style=&#34;color:#586e75&#34;&gt;// executed when w is not null
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elvis operator &lt;code&gt;?:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;w&lt;span style=&#34;color:#719e07&#34;&gt;?.&lt;/span&gt;hunger &lt;span style=&#34;color:#719e07&#34;&gt;?:&lt;/span&gt; -&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// if null, return -1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; is like &lt;code&gt;!&lt;/code&gt; in Swift. It throws a NullPointerException if the value is null: &lt;code&gt;w!!.hunger&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like Java, the same &lt;code&gt;try catch finally&lt;/code&gt; block for exception handling. And the same &lt;code&gt;throw&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;collections&#34;&gt;Collections&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;MutableList&lt;/code&gt;, &lt;code&gt;MutableSet&lt;/code&gt;, &lt;code&gt;MutableMap&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;listOf()&lt;/code&gt;, &lt;code&gt;mutableListOf()&lt;/code&gt;. &lt;code&gt;mList.set(1, &amp;quot;foo&amp;quot;)&lt;/code&gt;, &lt;code&gt;.shuffle()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mapOf(0 to &#39;a&#39;, 1 to &#39;b&#39;, 2 to &#39;c&#39;)&lt;/code&gt; &lt;code&gt;for ((key, value) in mMap)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;out&lt;/code&gt; (&lt;code&gt;&amp;lt;out E&amp;gt;&lt;/code&gt;) to make the generics covariant (use a subtype instead of a supertype) - achieving polymorphism. Add &lt;code&gt;in&lt;/code&gt; to make it contravariant - the opposite of covariance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;lambdas-and-higher-order-functions&#34;&gt;Lambdas and Higher-Order Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We can assign a lambda to a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; addFive: (Int) -&amp;gt; Int = {x: Int -&amp;gt; x + &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;}
&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; result = addFive.invoke(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#586e75&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// or
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;val&lt;/span&gt; result = addFive(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{it + 5}&lt;/code&gt; is equivalent to &lt;code&gt;{x -&amp;gt; x + 5}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambdas can also be passed to functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;convert&lt;/span&gt;(x: Double, converter: (Double) -&amp;gt; Double) : Double {
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; converter(x)
}
println(convert(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, {c: Double -&amp;gt; c * &lt;span style=&#34;color:#2aa198&#34;&gt;1.8&lt;/span&gt; + &lt;span style=&#34;color:#2aa198&#34;&gt;32&lt;/span&gt;}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.min()&lt;/code&gt; and &lt;code&gt;.max()&lt;/code&gt; work with basic types: &lt;code&gt;val mMax = mList.max()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;minBy {}&lt;/code&gt; and &lt;code&gt;maxBy {}&lt;/code&gt; work with all types: &lt;code&gt;val mMaxQuantity = groceries.maxBy {it.quantity}&lt;/code&gt;. Also &lt;code&gt;sumBy {}&lt;/code&gt; and &lt;code&gt;sumByDouble {}&lt;/code&gt; : &lt;code&gt;mMap.values.sumBy {it}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter {}&lt;/code&gt;: &lt;code&gt;val pricesOver3 = groceries.filter {it.price &amp;gt; 3.0}&lt;/code&gt;. Also &lt;code&gt;filterNot {}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map {}&lt;/code&gt;: &lt;code&gt;val doubleInts = ints.map {it * 2}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;forEach {}&lt;/code&gt;: &lt;code&gt;groceries.forEach {println(it.name)}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closure means that a lambda can access any local variable that it captures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;groupBy {}&lt;/code&gt; returns a &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fold {}&lt;/code&gt;: &lt;code&gt;val sumOfInts = ints.fold(0) {mSum, item -&amp;gt; mSum + item}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-Kotlin-Brain-Friendly-Guide/dp/1491996692/ref=sr_1_1?keywords=head+first+kotlin&amp;amp;qid=1567580813&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Head First Kotlin: A Brain-Friendly Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>iOS Development Notes</title>
      <link>https://tillchen.com/posts/2019-08-13-iOS-Development-Notes/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-08-13-iOS-Development-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#view-controller-lifecycle&#34;&gt;View Controller Lifecycle:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mvc-architecture&#34;&gt;MVC Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#project-organization&#34;&gt;Project Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Model-View-Controller is a design pattern in iOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike in Android Studio, the Interface Builder is not a graphical representation of code. A storyboard file is an archive of object instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outlets are references to objects: &lt;code&gt;@IBOutlet var questionLabel: UILabel!&lt;/code&gt; (IB means interface builder.) (Right click the item and drag it to the assistant editor to create the outlet.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actions: &lt;code&gt;@IBAction func showNextQuestion(_ sender: UIButton) {}&lt;/code&gt; (Right click the item and drag it to the assistant editor to create the action.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;View Controller&lt;/code&gt; to add new screens. Use Embed in &amp;gt; &lt;code&gt;Navigation Controller&lt;/code&gt; to add a nav controller.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use this to pass info between screens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;prepare&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; segue: UIStoryboardSegue, sender: &lt;span style=&#34;color:#b58900&#34;&gt;Any&lt;/span&gt;?) {
    segue.destination.navigationItem.title = textField.text
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;performSegue&lt;/code&gt; to create a segue programmatically (could be used for conditional segue.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;performSegue(withIdentifier: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Foo&amp;#34;&lt;/span&gt;, sender: &lt;span style=&#34;color:#cb4b16&#34;&gt;nil&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right click and drag to a view controller to add the new view controller to the Tab Bar Controller (select view controllers).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect the new ViewController file by setting the custom class attribute in storyboard.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;view-controller-lifecycle&#34;&gt;View Controller Lifecycle:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/ios_lifecycle.png&#34; alt=&#34;Lifecycle image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detailed methods: &lt;a href=&#34;https://guides.codepath.com/ios/View-Controller-Lifecycle&#34;&gt;https://guides.codepath.com/ios/View-Controller-Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mvc-architecture&#34;&gt;MVC Architecture&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/mvc.png&#34; alt=&#34;MVC image&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;project-organization&#34;&gt;Project Organization&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/ios_project_organization.jpeg&#34; alt=&#34;project organization image&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/iOS-Programming-Ranch-Guide-Guides/dp/0134682335/ref=sr_1_2?keywords=ios+programming&amp;amp;qid=1564912891&amp;amp;s=gateway&amp;amp;sr=8-2&#34;&gt;iOS Programming: The Big Nerd Ranch Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App Development With Swift&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swift Notes</title>
      <link>https://tillchen.com/posts/2019-08-2-Swift-Notes/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-08-2-Swift-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oop&#34;&gt;OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How to compile and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;swift hello_world.swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No semicolons (though allowed) and no main functions. But semicolons must be used to write multiple statements in a single line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;let&lt;/code&gt; to make a constant and &lt;code&gt;var&lt;/code&gt; to make a variable. (Use &lt;code&gt;let&lt;/code&gt; whenever possible) Plus, multiple variables can be declared in one line: &lt;code&gt;var x = 0, y = 0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types are inferred. If we need to make the type explicit, add the type after: (In practice, we rarely need to use the type annotations.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;implicitInt&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;70&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;explicitInt&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;Int&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;70&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;\()&lt;/code&gt; to include values in a string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello world &lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;\(&lt;/span&gt;foo&lt;span style=&#34;color:#2aa198&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;optionalString&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;? = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;I exist&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;print&lt;/span&gt;(\(optionalString!)) &lt;span style=&#34;color:#586e75&#34;&gt;// forced unwrapping, we are sure the value exists. And ! is required&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;assumedString&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;! = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;I definitely exist&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;print&lt;/span&gt;(\(assumedString))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;[]&lt;/code&gt; for both arrays and dictionaries. A comma is allowed after the last element.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; for multiple-line strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;Hello
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;World
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrays, dictionaries and sets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;emptyArray&lt;/span&gt; = [&lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;]()
emptyArray.append(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;)
emptyArray &lt;span style=&#34;color:#719e07&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;third&amp;#34;&lt;/span&gt;]
emptyArray.&lt;span style=&#34;color:#268bd2&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;fourth&amp;#34;&lt;/span&gt;, at: &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;emptyDictionary&lt;/span&gt; = [&lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;Float&lt;/span&gt;]()
&lt;span style=&#34;color:#586e75&#34;&gt;// Or below if the type can be inferred&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;emptyArray&lt;/span&gt; = []
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;emptyDictionary&lt;/span&gt; = [:]
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;threeDoubles&lt;/span&gt; = &lt;span style=&#34;color:#b58900&#34;&gt;Array&lt;/span&gt;(repeating: &lt;span style=&#34;color:#2aa198&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#268bd2&#34;&gt;count&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;shoppingList&lt;/span&gt;: [&lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;] = [&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Eggs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Milk&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;shoppingListInferred&lt;/span&gt; = [&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Eggs&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Milk&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;fooSet&lt;/span&gt;: Set&amp;lt;&lt;span style=&#34;color:#b58900&#34;&gt;Int&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for loop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for foo in foos {}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (foo, bar) in foobarDictionary {}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in 0..&amp;lt;4 {}&lt;/code&gt; is equivalent to &lt;code&gt;for i in range(0, 4):&lt;/code&gt; in python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in 0...4 {}&lt;/code&gt; is equivalent to &lt;code&gt;for i in range(0, 5):&lt;/code&gt; in python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (index, value) in shoppingList.enumerated()&lt;/code&gt; gives tuples: (0, foo), (1, bar)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionals: add &lt;code&gt;?&lt;/code&gt; to indicate that the value might be missing: &lt;code&gt;var optionalString: String? = &amp;quot;foo&amp;quot;&lt;/code&gt; (it can later be set to &lt;code&gt;nil&lt;/code&gt;.) (The type is required to init a nil.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;??&lt;/code&gt; to provide a default value for an optional:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;?
&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;bar&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;print&lt;/span&gt;(foo ?? bar)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional binding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;constantName&lt;/span&gt; = someOptional { &lt;span style=&#34;color:#586e75&#34;&gt;// if the value != nil&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// statements&lt;/span&gt;
}
...
&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;theApartmentNumber&lt;/span&gt; = person.residence?.address?.apartmentNumber {
    &lt;span style=&#34;color:#586e75&#34;&gt;// optional chaining&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt;(bar: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt; {
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello &lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;\(&lt;/span&gt;bar&lt;span style=&#34;color:#2aa198&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;
}

foo(bar: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Till&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#586e75&#34;&gt;// A tuple can be used to return multiple values&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// Functions call also be returned (First-class functions)&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// _ bar: String means no argument label when being called&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.isEmpty&lt;/code&gt; and &lt;code&gt;.count&lt;/code&gt; (no parentheses) (.count is for length).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.lowercased()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.hasPrefix()&lt;/code&gt;, &lt;code&gt;.hasSuffix()&lt;/code&gt;, &lt;code&gt;contains()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, the &lt;code&gt;switch&lt;/code&gt; in Swift doesn&amp;rsquo;t fall through, which means we don&amp;rsquo;t need &lt;code&gt;break&lt;/code&gt;. (If needed, &lt;code&gt;fallthrough&lt;/code&gt; can be added.) Multiple conditions are allowed: &lt;code&gt;case &amp;quot;a&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;u&amp;quot;&lt;/code&gt;. Range values are allowed: &lt;code&gt;case 0...9&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@discardableResult func foo() -&amp;gt; String {}&lt;/code&gt; means the return is discardable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Double(x)&lt;/code&gt; converts the type to Double.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.toggle()&lt;/code&gt; toggles boolean values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default type for a char is &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// String&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;b&lt;/span&gt; : &lt;span style=&#34;color:#b58900&#34;&gt;Character&lt;/span&gt; = &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// Character&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Any&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;items&lt;/span&gt;: [&lt;span style=&#34;color:#b58900&#34;&gt;Any&lt;/span&gt;] = [&lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;6.7&lt;/span&gt;, Dog()]
&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;firstItem&lt;/span&gt; = items[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt;? &lt;span style=&#34;color:#b58900&#34;&gt;Int&lt;/span&gt; {
    &lt;span style=&#34;color:#586e75&#34;&gt;// Any is generic. as? is used for conditional casting&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enum&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;CompassPoint&lt;/span&gt; {
    &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; north, east, south, west
}
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;compassHeading&lt;/span&gt;: CompassPoint = .west
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;guard&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;name&lt;/span&gt; = nameField.text &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; {
    show(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;No name to submit&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;oop&#34;&gt;OOP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;init()&lt;/code&gt; &lt;code&gt;super.init&lt;/code&gt; and &lt;code&gt;self&lt;/code&gt; to make a constructor (similar to python):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Foo&lt;/span&gt;: Bar {
    &lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foobar&lt;/span&gt;: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;init&lt;/span&gt;(foobar: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;, name: &lt;span style=&#34;color:#b58900&#34;&gt;String&lt;/span&gt;) {
        &lt;span style=&#34;color:#cb4b16&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#268bd2&#34;&gt;init&lt;/span&gt;(name: name)
        &lt;span style=&#34;color:#cb4b16&#34;&gt;self&lt;/span&gt;.foobar = foobar
    }

    &lt;span style=&#34;color:#268bd2&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;fooFunc&lt;/span&gt;()
}

&lt;span style=&#34;color:#268bd2&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; = Foo(foobar: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, name: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a setter, the new value has the implicit name &lt;code&gt;newValue&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; to see if two references are referring to the same object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A convenience initializer is like a helper, which always calls another initializer in the same class. &lt;code&gt;convenience init()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mutating func&lt;/code&gt; changes a property.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;willSet&lt;/code&gt; and &lt;code&gt;didSet&lt;/code&gt; are property observers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Swift Programming Language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/iOS-Programming-Ranch-Guide-Guides/dp/0134682335/ref=sr_1_2?keywords=ios+programming&amp;amp;qid=1564912891&amp;amp;s=gateway&amp;amp;sr=8-2&#34;&gt;iOS Programming: The Big Nerd Ranch Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App Development with Swift&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SQL Notes</title>
      <link>https://tillchen.com/posts/2019-7-27-SQL-Notes/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-7-27-SQL-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#select&#34;&gt;SELECT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#delete&#34;&gt;DELETE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#update&#34;&gt;UPDATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alter&#34;&gt;ALTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create and use the database (MySQL as an example)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;DATABASE&lt;/span&gt; gregs_list;
USE gregs_list;
&lt;span style=&#34;color:#719e07&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;TABLE&lt;/span&gt; doughnut_list
(
    doughnut_id &lt;span style=&#34;color:#b58900&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
    doughnut_name &lt;span style=&#34;color:#b58900&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;NULL&lt;/span&gt;,
    doughnut_type &lt;span style=&#34;color:#b58900&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#719e07&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;KEY&lt;/span&gt; (doughnut_id)
); &lt;span style=&#34;color:#586e75&#34;&gt;-- Variable Char, up to 10 and 8 chars.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;DESC&lt;/span&gt; doughnut_list; &lt;span style=&#34;color:#586e75&#34;&gt;-- Describe the table.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- DROP TABLE doughnut_list; -- Delete the table.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;INTO&lt;/span&gt; doughnut_list (doughnut_name, doughnut_type) &lt;span style=&#34;color:#719e07&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#586e75&#34;&gt;-- The order doesn&amp;#39;t matter, but they must match
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;FROM&lt;/span&gt; doughnut_list; &lt;span style=&#34;color:#586e75&#34;&gt;-- Show the table. * means all columns.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;SELECT&lt;/span&gt; doughnut_name &lt;span style=&#34;color:#719e07&#34;&gt;FROM&lt;/span&gt; doughnut_list; &lt;span style=&#34;color:#586e75&#34;&gt;-- Just show the name column
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;FROM&lt;/span&gt; doughnut_list &lt;span style=&#34;color:#719e07&#34;&gt;WHERE&lt;/span&gt; doughnut_name &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;AND&lt;/span&gt; doughnut_type &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;-- Show the table selectively. = instead of ==
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;code&gt;INSERT&lt;/code&gt;, there are three variations from above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing the order of the columns, as long as the values match them in the same order.&lt;/li&gt;
&lt;li&gt;Omitting column names altogether, as long as we add all the values in the same order.&lt;/li&gt;
&lt;li&gt;Leaving some columns out, as long as the values we&amp;rsquo;re adding match the columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\&#39;&lt;/code&gt; or &lt;code&gt;&#39;&#39;&lt;/code&gt; to insert data with the single quote.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;select&#34;&gt;SELECT&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; means not equal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;IS NULL&lt;/code&gt; to select null ones: &lt;code&gt;WHERE doughnut_name IS NULL;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WHERE location LIKE &#39;%CA&#39;;&lt;/code&gt; selects all the values that end with CA. &lt;code&gt;%&lt;/code&gt; replaces anything while &lt;code&gt;_&lt;/code&gt; replaces one letter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WHERE value BETWEEN 1 AND 10;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WHERE language IN (&#39;Java&#39;, &#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;);&lt;/code&gt; is equivalent to using &lt;code&gt;OR&lt;/code&gt;. Plus, we have &lt;code&gt;WHERE language NOT IN (&#39;Java&#39;, &#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;);&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NOT&lt;/code&gt; goes right after &lt;code&gt;WHERE&lt;/code&gt; when used with &lt;code&gt;BETWEEN&lt;/code&gt; and &lt;code&gt;LIKE&lt;/code&gt; : &lt;code&gt;WHERE NOT location LIKE &#39;%CA&#39;;&lt;/code&gt; &lt;code&gt;WHERE NOT value BETWEEN 1 AND 10;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ORDER BY foo DESC, bar;&lt;/code&gt; can be added to the end (DESC means descending.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;delete&#34;&gt;DELETE&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE FROM doughnut_list WHERE doughnut_type = &#39;bar&#39;;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE FROM doughnut_list;&lt;/code&gt; deletes the entire table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;SELECT&lt;/code&gt; first to make sure what we&amp;rsquo;re deleting is correct.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;update&#34;&gt;UPDATE&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UPDATE doughnut_list SET doughnut_type = &#39;barbar&#39; WHERE doughnut_type = &#39;bar&#39;;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Without &lt;code&gt;WHERE&lt;/code&gt;, every possible one will be updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use comma to seperate different columns after &lt;code&gt;SET&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can do basic math: &lt;code&gt;SET cost = cost + 1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;alter&#34;&gt;ALTER&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE doughnut_list ADD COLUMN doughnut_id INT NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (doughnut_id);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;SECOND&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt;, &lt;code&gt;BEFORE foo&lt;/code&gt;, &lt;code&gt;AFTER foo&lt;/code&gt; can be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE doughnut_list RENAME TO foo;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE doughnut_list CHANGE COlUMN foo bar INT;&lt;/code&gt; changes foo to bar with int.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE doughnut_list MODIFY COLUMN foo VARCHAR(10);&lt;/code&gt; changes the data type. We can also do &lt;code&gt;FIRST&lt;/code&gt; or &lt;code&gt;LAST&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE doughnut_list DROP COLUMN foo;&lt;/code&gt; deletes a column.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-SQL-Brain-Learners/dp/0596526849/ref=sr_1_1?keywords=head+first+sql&amp;amp;qid=1564318633&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Head First SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash Tips</title>
      <link>https://tillchen.com/posts/2019-7-24-Bash-Tips/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-7-24-Bash-Tips/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-scripts&#34;&gt;Writing Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-tricks&#34;&gt;Advanced Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; alone goes to the home directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls -lt&lt;/code&gt; gives the long format and sorted by modification time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;file foo.txt&lt;/code&gt; gives the file type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;less foo.txt&lt;/code&gt; gives the content of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can double click a filename to copy it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; copies the files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; moves the files or renames the files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ln&lt;/code&gt; creates links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;|&lt;/code&gt; to combine commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control A goes to the beginning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control R goes to revere searching in the history.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zip -r foo.zip foo&lt;/code&gt; zips the file/directory. &lt;code&gt;unzip foo.zip&lt;/code&gt; unzips.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;grep regex foo.txt&lt;/code&gt; searches in foo.txt .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find . -name &amp;quot;foo*&amp;quot;&lt;/code&gt; finds the files with the name foo* .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exec zsh&lt;/code&gt; and &lt;code&gt;exec bash&lt;/code&gt; switch between the two shells.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control N clears the current line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;writing-scripts&#34;&gt;Writing Scripts&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Put &lt;code&gt;#!/bin/bash&lt;/code&gt; at the beginning of the script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;chmod 755 foo.sh&lt;/code&gt; to make the script executable for everyone. (700 for the owner only.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;advanced-tricks&#34;&gt;Advanced Tricks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;touch {a..z}{0001..0100}.txt&lt;/code&gt; creates multiple files at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;grep -r &amp;quot;hello&amp;quot; .&lt;/code&gt; searches for hello recursively in the current directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wget --no-parent -r https://cnds.jacobs-university.de/courses/os-2019/src/&lt;/code&gt; gets the content recursively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find . -name &amp;quot;*html*&amp;quot; -delete&lt;/code&gt; removes all files containing html.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;command &amp;amp;&lt;/code&gt; to run the command in the background.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Linux-Command-Line-Complete-Introduction-dp-1593273894/dp/1593273894/ref=mt_paperback?_encoding=UTF8&amp;amp;me=&amp;amp;qid=1564723984&#34;&gt;The Linux Command Line: A Complete Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Notes</title>
      <link>https://tillchen.com/posts/2019-07-15-JavaScript-Notes/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-07-15-JavaScript-Notes/</guid>
      <description>&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global variables live as long as the page.&lt;/li&gt;
&lt;li&gt;If we forget to declare a variable before using it, it&amp;rsquo;ll always be global even if we first use it in a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax for an array is similar to Python, using &lt;code&gt;[]&lt;/code&gt; instead of &lt;code&gt;{}&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; foo &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;];
foo.push(&lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt;);
console.log(foo.length);
foo[&lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// We can do this, but be sure to avoid creating a sparse array
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; vs &lt;code&gt;null&lt;/code&gt; vs &lt;code&gt;isNaN()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; is used for;
&lt;ul&gt;
&lt;li&gt;Unassigned/ Uninitiated variables;&lt;/li&gt;
&lt;li&gt;A missing property for an object;&lt;/li&gt;
&lt;li&gt;A missing value for an array;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; is used for uncreated objects (like &lt;code&gt;.getElementById()&lt;/code&gt;&#39;s returned value;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isNaN(foo)&lt;/code&gt; is true if foo is the number can&amp;rsquo;t be represented by a computer like 0/0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;===&lt;/code&gt; is the strict equality check (both the type and value) while &lt;code&gt;==&lt;/code&gt; is not strict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;===&lt;/code&gt; between two object references will be true only if they refer to the same object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A function in JavaScript can behave just like any data type. It can be assigned to, passed, and returned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;oop&#34;&gt;OOP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; foo &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; {
    name&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#586e75&#34;&gt;// A comma here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    coding&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;coding bar&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// Must add `this.`
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        alert.log(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;I&amp;#39;m coding now.&amp;#34;&lt;/span&gt;);
    }, &lt;span style=&#34;color:#586e75&#34;&gt;// A comma here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    age&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// NO comma here. But can be added after ES5. However, not in JSON.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;};
foo.height &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;190&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// This adds a new property
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;console.log(foo[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;]); &lt;span style=&#34;color:#586e75&#34;&gt;// Also works
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;delete&lt;/span&gt; foo.age; &lt;span style=&#34;color:#586e75&#34;&gt;// This deletes the property
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; prop &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; foo) { &lt;span style=&#34;color:#586e75&#34;&gt;// Prints all properties
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    console.log(prop &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; foo[prop]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like in Java, use &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; for constructors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript (before ES6) doesn&amp;rsquo;t have classes. For inheritance, we have prototypal inheritance. (Prototype is like the parent class.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;function&lt;/span&gt; Foo(bar, stuff) {
    &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;.bar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; bar;
    &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;.stuff &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; stuff;
}

Foo.prototype.foobar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; bob &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Foo(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;this is&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;cool&amp;#34;&lt;/span&gt;);
console.log(bob.foobar) &lt;span style=&#34;color:#586e75&#34;&gt;// &amp;#34;hello&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;function&lt;/span&gt; Foooo(bar, stuff, more) {
    Foo.call(&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;, bar, stuff); &lt;span style=&#34;color:#586e75&#34;&gt;// calling the Foo constructor
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;.more &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; more;
}
Foooo.prototype &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Foo();
Foooo.prototype.new_property &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;blah&amp;#34;&lt;/span&gt;;
Foooo.prototype.constructor &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; Foooo;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dom-document-object-model&#34;&gt;DOM (Document Object Model)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;document.getElementById(&amp;quot;foo&amp;quot;).innerHTML&lt;/code&gt; gives the content of the html element with the id &amp;lsquo;foo&amp;rsquo;. JavaScript does this by interacting with the DOM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;foo.setAttribute(&amp;quot;class&amp;quot;, &amp;quot;bar&amp;quot;)&lt;/code&gt; sets the attribute and &lt;code&gt;var text = document.getElementById(&amp;quot;bar&amp;quot;).getAttribute(&amp;quot;alt&amp;quot;)&lt;/code&gt; gets the &amp;lsquo;alt&amp;rsquo; attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;handling-events&#34;&gt;Handling events&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onclick&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; image &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;);
image.onclick &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; bar();
&lt;span style=&#34;color:#268bd2&#34;&gt;function&lt;/span&gt; bar() {
    &lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; image &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;);
    image.src &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;new.png&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// We can change the property when we have the element.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; images &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#586e75&#34;&gt;// Get a bunch
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; images.length; i&lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;) {
    images[i].onclick &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; bar();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-JavaScript-Programming-Brain-Friendly/dp/144934013X/ref=sr_1_1?crid=2NISC4BUYXL03&amp;amp;keywords=head+first+javascript+programming&amp;amp;qid=1562253717&amp;amp;s=gateway&amp;amp;sprefix=head+first+javascript%2Caps%2C402&amp;amp;sr=8-1&#34;&gt;Head First JavaScript Programming: A Brain-Friendly Guide, 1st Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Android Development Notes</title>
      <link>https://tillchen.com/posts/2019-07-10-Android-Development-Notes/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-07-10-Android-Development-Notes/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#app-resources&#34;&gt;App Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#permissions&#34;&gt;Permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#androidmanifestxml&#34;&gt;AndroidManifest.xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#layout&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#activities&#34;&gt;Activities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fragments&#34;&gt;Fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#notifications&#34;&gt;Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#android-studio-tips&#34;&gt;Android Studio Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Layout&lt;/strong&gt; is typically defined in XML, whereas &lt;strong&gt;activities&lt;/strong&gt; are in Java class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Android operating system is a multi-user Linux system in which each app is a different user.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;app-resources&#34;&gt;App Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String array: &lt;code&gt;android:entries=&amp;quot;@array/foo&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;string-array&lt;/span&gt; name=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;bar1&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;bar2&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/string-array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/resources/providing-resources#AliasResources&#34;&gt;Creating alias resources&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;drawable&lt;/span&gt; name=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;@drawable/icon_ca&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/drawable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/look-and-feel/themes&#34;&gt;Styles and Themes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/resources/providing-resources#ReferencesToThemeAttributes&#34;&gt;Referencing style attributes&lt;/a&gt;: &lt;code&gt;android:textColor=&amp;quot;?android:textColorSecondary&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/multiscreen/screendensities&#34;&gt;Support different pixel densities&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/practices/screens-distribution&#34;&gt;Declare restricted screen support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;permissions&#34;&gt;Permissions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/permissions/requesting#explain&#34;&gt;Request App Permissions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/permissions/usage-notes#perms_vs_intents&#34;&gt;Use an intent instead&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;androidmanifestxml&#34;&gt;AndroidManifest.xml&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;minSdkVersion&lt;/code&gt; attribute declares the minimum version with which your app is compatible and the &lt;code&gt;targetSdkVersion&lt;/code&gt; attribute declares the highest version on which you&amp;rsquo;ve optimized your app: &lt;code&gt;&amp;lt;uses-sdk android:minSdkVersion=&amp;quot;4&amp;quot; android:targetSdkVersion=&amp;quot;15&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;layout&#34;&gt;Layout&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;EditText&amp;gt;&lt;/code&gt; is an editable text field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android:hint=&amp;quot;@string/hint&amp;quot;&lt;/code&gt;: normally &amp;ldquo;Enter a message&amp;rdquo;, telling the user what to type;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android:ems=&amp;quot;10&amp;quot;&lt;/code&gt;: 10-M space.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;android:layout_weight=&amp;quot;number&amp;quot;&lt;/code&gt; makes a view stretch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a has the weight of 1 and b has 2, a&amp;rsquo;ll have 1/3 and b&amp;rsquo;ll have 2/3 of the screen.&lt;/li&gt;
&lt;li&gt;We usually have &lt;code&gt;android:layout_height=&amp;quot;0dp&amp;quot;&lt;/code&gt; (for vertical layout) above layout_weight.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;android:gravity=&amp;quot;top&amp;quot;&lt;/code&gt; moves the CONTENT of a view to the top of the view, whereas &lt;code&gt;android:layout_gravity=&amp;quot;end&amp;quot;&lt;/code&gt; moves the placement of the VIEW itself to the end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;FrameLayout&amp;gt;&amp;lt;/FrameLayout&amp;gt;&lt;/code&gt; allows views to overlap. Ues it when we need to replace the fragments and add the changes to the back stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Surround LinearLayout/FrameLayout with &lt;code&gt;&amp;lt;ScrollView&amp;gt;&amp;lt;/ScrollView&amp;gt;&lt;/code&gt; to get a vertical scrollbar. (&lt;code&gt;HorizontalScrollView&lt;/code&gt; for the horizontal scrollbar.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CoordinatorLayout allows the behavior of one view to affect the behavior of another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AdapterView:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;ArrayAdapter&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; adapter &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ArrayAdapter&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt;
    android&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;layout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;simple_list_item_1&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; myStringArray&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
ListView listView &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;ListView&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;listview&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
listView&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setAdapter&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;adapter&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// Create a message handling object as an anonymous class.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;private&lt;/span&gt; OnItemClickListener messageClickedHandler &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; OnItemClickListener&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onItemClick&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;AdapterView parent&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; View v&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; position&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;long&lt;/span&gt; id&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// Do something in response to the click
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;};&lt;/span&gt;

listView&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setOnItemClickListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;messageClickedHandler&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/layout/recyclerview&#34;&gt;Create a List with RecyclerView&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/improving-layouts/reusing-layouts&#34;&gt;Re-using layouts with include&lt;/a&gt;: &lt;code&gt;&amp;lt;merge&amp;gt;&amp;lt;/merge&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;include layout=&amp;quot;@layout/foo&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spinners:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Spinner s1 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Spinner&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;spinner1&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
ArrayAdapter adapter &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; ArrayAdapter&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;createFromResource&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;array&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;colors&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; android&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;layout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;simple_spinner_item&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
adapter&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setDropDownViewResource&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;android&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;layout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;simple_spinner_dropdown_item&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
s1&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setAdapter&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;adapter&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
s1&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setOnItemSelectedListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; AdapterView&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;OnItemSelectedListener&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onItemSelected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;AdapterView&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; parent&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; View view&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; position&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;long&lt;/span&gt; id&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// TODO
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onNothingSelected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;AdapterView&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; parent&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#586e75&#34;&gt;// sometimes you need nothing here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/controls/button&#34;&gt;Buttons&lt;/a&gt; Set onClick programmatically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Button button &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Button&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;button_send&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
button&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setOnClickListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;OnClickListener&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;View v&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// Do something in response to button click
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/controls/checkbox&#34;&gt;Checkboxes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/controls/radiobutton&#34;&gt;Radio Buttons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tutlane.com/tutorial/android/android-switch-on-off-button-with-examples&#34;&gt;Switch Buttons&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;android:checked=&amp;#34;true&amp;#34;
android:textOff=&amp;#34;OFF&amp;#34;
android:textOn=&amp;#34;ON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Switch sw &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Switch&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;switch1&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
sw&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setOnCheckedChangeListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; CompoundButton&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;OnCheckedChangeListener&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onCheckedChanged&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;CompoundButton buttonView&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;boolean&lt;/span&gt; isChecked&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;isChecked&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#586e75&#34;&gt;// The toggle is enabled
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#586e75&#34;&gt;// The toggle is disabled
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/ui/controls/pickers&#34;&gt;Pickers&lt;/a&gt; (Time/Date Pickers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Centralized onClick events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ActivityA&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color:#268bd2&#34;&gt;implements&lt;/span&gt; View&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;OnClickListener &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;onCreate&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

        findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;first&lt;span style=&#34;color:#719e07&#34;&gt;).&lt;/span&gt;setOnClickListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;second&lt;span style=&#34;color:#719e07&#34;&gt;).&lt;/span&gt;setOnClickListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;third&lt;span style=&#34;color:#719e07&#34;&gt;).&lt;/span&gt;setOnClickListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;View v&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;v&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getId&lt;span style=&#34;color:#719e07&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;first&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color:#586e75&#34;&gt;// Manage click.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;second&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color:#586e75&#34;&gt;// Manage click.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;third&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color:#586e75&#34;&gt;// Manage click.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App bar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/appbar/setting-up&#34;&gt;Set up the app bar&lt;/a&gt; (Use &lt;code&gt;Toolbar&lt;/code&gt; instead of the native &lt;code&gt;ActionBar&lt;/code&gt;) and &lt;a href=&#34;https://developer.android.com/training/appbar/up-action&#34;&gt;Add an up action&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;android:theme=&amp;#34;@style/Theme.AppCompat.Light.NoActionBar&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;android.support.v7.widget.Toolbar&lt;/span&gt;
    android:id=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;@+id/my_toolbar&amp;#34;&lt;/span&gt;
    android:layout_width=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    android:layout_height=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;?attr/actionBarSize&amp;#34;&lt;/span&gt;
    android:background=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;?attr/colorPrimary&amp;#34;&lt;/span&gt;
    android:elevation=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;4dp&amp;#34;&lt;/span&gt;
    android:theme=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;@style/ThemeOverlay.AppCompat.ActionBar&amp;#34;&lt;/span&gt;
    app:popupTheme=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;@style/ThemeOverlay.AppCompat.Light&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;&amp;lt;!-- A child of the main activity --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;activity&lt;/span&gt;
   android:name=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;com.example.myfirstapp.MyChildActivity&amp;#34;&lt;/span&gt;
   android:label=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;@string/title_activity_child&amp;#34;&lt;/span&gt;
   android:parentActivityName=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;com.example.myfirstapp.MainActivity&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;&amp;lt;!-- Parent activity meta-data to support 4.0 and lower --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;meta-data&lt;/span&gt;
        android:name=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;android.support.PARENT_ACTIVITY&amp;#34;&lt;/span&gt;
        android:value=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;com.example.myfirstapp.MainActivity&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// OnCreate
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;Toolbar myToolbar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Toolbar&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;my_toolbar&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
setSupportActionBar&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;myToolbar&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// Get a support ActionBar corresponding to this toolbar
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;ActionBar ab &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; getSupportActionBar&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;// Enable the Up button
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;ab&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setDisplayHomeAsUpEnabled&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/appbar/actions&#34;&gt;Add and handle actions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Toasts: &lt;code&gt;Toast toast = Toast.makeText(this, &amp;quot;hello world&amp;quot;, Toast.LENGTH_SHORT); toast.show();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;activities&#34;&gt;Activities&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All activities have to extend the Activity class or its subclass.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R is a special Java class that enables you to retrieve references to resources. &lt;code&gt;TextView foo = findViewById(R.id.foo)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Intent to call another activity (can be from other apps):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explicit intent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onSendMessage&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    Intent intent &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; FooActivity&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// explicit intent
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;putExtra&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// message is the name of the extra
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    startActivity&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;...&lt;/span&gt;
Intent intent &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; getIntent&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
String string &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getStringExtra&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implicit intent: (with actions to allow users to choose which app to run)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Intent intent &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;ACTION_SEND&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// ACTION_DIAL/ACTION_WEB_SEARCH
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setType&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;putExtra&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;EXTRA_TEXT&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; messageText&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
String chooserTitle &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; getString&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;string&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;chooser&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// Ensure that the user always get the chance to choose an activity
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;Intent chosenIntent &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; Intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;createChooser&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; chooserTitle&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;// Start an activity if it&amp;#39;s safe
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;resolveActivity&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;getPackageManager&lt;span style=&#34;color:#719e07&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    startActivity&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;chosenIntent&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/components/intents-common&#34;&gt;Common Intents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the instance state:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// Either in onCreate savedInstanceState != null or use the method below
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;onRestoreInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    seconds &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getInt&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    running &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getBoolean&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;running&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onSaveInstanceState&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;onSaveInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;putInt&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; seconds&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;putBoolean&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;running&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; running&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activity lifecycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When we implement them (&lt;code&gt;onCreate()&lt;/code&gt;, &lt;code&gt;onStart()&lt;/code&gt;, &lt;code&gt;onResume()&lt;/code&gt;, &lt;code&gt;onPause()&lt;/code&gt;, &lt;code&gt;onStop()&lt;/code&gt;, &lt;code&gt;onRestart()&lt;/code&gt;, &lt;code&gt;onDestroy()&lt;/code&gt;), we must call the super class methods.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onResume()&lt;/code&gt; is called when the activity is started OR resumed; &lt;code&gt;onPause()&lt;/code&gt; is called when the activity is paused OR stopped.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/activity_lifecycle.png&#34; alt=&#34;Activity lifecycle&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/guide/components/activities/tasks-and-back-stack#TaskLaunchModes&#34;&gt;Defining launch modes&lt;/a&gt; (singleTop, singleTask, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fragment lifecycle:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/fragment_lifecycle.png&#34; alt=&#34;Fragment lifecycle&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ExampleFragment&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;extends&lt;/span&gt; Fragment &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; View &lt;span style=&#34;color:#268bd2&#34;&gt;onCreateView&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;LayoutInflater inflater&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; ViewGroup container&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// Inflate the layout for this fragment
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; inflater&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;inflate&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;layout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;example_fragment&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; container&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// In this case, this is false because the system is already inserting the inflated layout into the container
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the fragment programmatically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;FragmentManager fragmentManager &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; getSupportFragmentManager&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
FragmentTransaction fragmentTransaction &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; fragmentManager&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;beginTransaction&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
ExampleFragment fragment &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ExampleFragment&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
fragmentTransaction&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;fragment_container&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; fragment&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
fragmentTransaction&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fragment transactions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// Create new fragment and transaction
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;Fragment newFragment &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ExampleFragment&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
FragmentTransaction transaction &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; getSupportFragmentManager&lt;span style=&#34;color:#719e07&#34;&gt;().&lt;/span&gt;beginTransaction&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;// Replace whatever is in the fragment_container view with this fragment,
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// and add the transaction to the back stack
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;transaction&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;replace&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;fragment_container&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; newFragment&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
transaction&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;addToBackStack&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;// Commit the transaction
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;transaction&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For dynamic fragments, use FrameLayout instead of Fragment and use FragmentTransaction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;notifications&#34;&gt;Notifications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/notify-user/build-notification&#34;&gt;Create a Notification&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;android-studio-tips&#34;&gt;Android Studio Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/annotations.html#java&#34;&gt;Improve code inspection with annotations&lt;/a&gt; (&lt;code&gt;@Nullable&lt;/code&gt;, &lt;code&gt;@NonNull&lt;/code&gt;&amp;hellip;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/sample-code&#34;&gt;Find sample code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/tool-attributes&#34;&gt;Tools attributes reference&lt;/a&gt; (&lt;code&gt;tools:text=&amp;quot;foo&amp;quot;&lt;/code&gt;, &lt;code&gt;tools:itemCount=&amp;quot;3&amp;quot;...&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/debug&#34;&gt;Debug your app&lt;/a&gt; (&lt;code&gt; private static final String TAG = &amp;quot;MyActivity&amp;quot;; Log.d(TAG, &amp;quot;foo&amp;quot;);&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/debug/am-logcat&#34;&gt;Write and View Logs with Logcat&lt;/a&gt; (e (error), w (warning), i (information), d (debug), v (verbose))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/debug/layout-inspector&#34;&gt;Debug Your layout with Layout Inspector&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/resource-manager&#34;&gt;Manage your app&amp;rsquo;s UI resources with Resource Manager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/image-asset-studio#java&#34;&gt;Create app icons with Image Asset Studio&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/draw9patch&#34;&gt;Create resizable bitmaps (9-Patch files)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/write/app-link-indexing#java&#34;&gt;Add Android App Links&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Android builds the back stack to keep track of the activity/fragment transactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/app-links/deep-linking&#34;&gt;Create Deep Links to App Content&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
  ...
  &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;data&lt;/span&gt; android:scheme=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; android:host=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;data&lt;/span&gt; android:scheme=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt; android:host=&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;open.my.app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/app-links/verify-site-associations&#34;&gt;Verify Android App Links&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/swipe/add-swipe-interface&#34;&gt;Adding Swipe-to-Refresh To Your App&lt;/a&gt; (Add &lt;code&gt;SwipeRefreshLayout&lt;/code&gt; as the parent of a single &lt;code&gt;ListView&lt;/code&gt; or &lt;code&gt;GridView&lt;/code&gt;.) (&lt;code&gt;android.support.v4.widget.SwipeRefreshLayout&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/swipe/respond-refresh-request&#34;&gt;Responding to Refresh Request&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;mySwipeRefreshLayout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setOnRefreshListener&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; SwipeRefreshLayout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;OnRefreshListener&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onRefresh&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            Log&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;i&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;LOG_TAG&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;onRefresh called from SwipeRefreshLayout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color:#586e75&#34;&gt;// This method performs the actual data-refresh operation.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#586e75&#34;&gt;// The method calls setRefreshing(false) when it&amp;#39;s finished.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;            myUpdateOperation&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// For refreshing in the app bar
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;onOptionsItemSelected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;MenuItem item&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;item&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getItemId&lt;span style=&#34;color:#719e07&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color:#586e75&#34;&gt;// Check if user triggered a refresh:
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; R&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;menu_refresh&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
            Log&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;i&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;LOG_TAG&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Refresh menu item selected&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color:#586e75&#34;&gt;// Signal SwipeRefreshLayout to start the progress indicator
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;            mySwipeRefreshLayout&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;setRefreshing&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color:#586e75&#34;&gt;// Start the refresh background task.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#586e75&#34;&gt;// This method calls setRefreshing(false) when it&amp;#39;s finished.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;            myUpdateOperation&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

            &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#586e75&#34;&gt;// User didn&amp;#39;t trigger a refresh, let the superclass handle this action
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;onOptionsItemSelected&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;item&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-Android-Development-Brain-Friendly/dp/1491974052/ref=sr_1_1?keywords=head+first+android&amp;amp;qid=1560338899&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Head First Android Development: A Brain-Friendly Guide 2nd Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com&#34;&gt;https://developer.android.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Django Notes</title>
      <link>https://tillchen.com/posts/2019-06-09-Django-Notes/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-06-09-Django-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#start-the-django-project-foo-as-the-project-name-and-bar-as-the-app-name&#34;&gt;Start the Django project (foo as the project name and bar as the app name)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-admin-site&#34;&gt;The admin site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-django-shell-control-d-to-exit&#34;&gt;The Django shell (Control-d to exit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-pages&#34;&gt;Making pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;start-the-django-project-foo-as-the-project-name-and-bar-as-the-app-name&#34;&gt;Start the Django project (foo as the project name and bar as the app name)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a virtual environment (where we can install packages and isolate them from all other packages): (venv is the virtual environment module.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3 -m venv foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the virtual environment: (Packages inside will be available only when the environment is active.) (use &lt;code&gt;deactivate&lt;/code&gt; to deactivate.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;source&lt;/span&gt; foo/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Django (Note: use &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt; or &lt;code&gt;pip3&lt;/code&gt;) in the virtual environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pip install django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project. (The dot at the end creates the project with a directory structure, i.e. with &lt;code&gt;__init__.py&lt;/code&gt;, &lt;code&gt;settings.py&lt;/code&gt;, &lt;code&gt;urls.py&lt;/code&gt;, and &lt;code&gt;wsgi.py&lt;/code&gt; (web server gateway interface.))&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;django-admin startproject foo .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the database (SQLite): (Run the command anytime we modify the database.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start and view the project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Django project is a group of individual apps that work together. Let&amp;rsquo;s start an app: （creating the following in the bar folder: &lt;code&gt;__init__.py&lt;/code&gt;, &lt;code&gt;admin.py&lt;/code&gt;, &lt;code&gt;apps.py&lt;/code&gt;, &lt;code&gt;migrations&lt;/code&gt;, &lt;code&gt;models.py&lt;/code&gt;, &lt;code&gt;test.py&lt;/code&gt;, and &lt;code&gt;view.py&lt;/code&gt;.）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py startapp bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code-wise, a model is just a class. An example model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; models

&lt;span style=&#34;color:#586e75&#34;&gt;# Create your models here.&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Topic&lt;/span&gt;(models&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;Model):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The class that manages the topic the user is learning about.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    text &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;200&lt;/span&gt;)
    date_added &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;DateTimeField(auto_now_add&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; __str__(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The string representation of the model.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activate the models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the apps to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in &lt;code&gt;settings.py&lt;/code&gt;;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;INSTALLED_APPS &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#586e75&#34;&gt;# My apps&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;,

    &lt;span style=&#34;color:#586e75&#34;&gt;# Default django apps&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;,
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py makemigrations bar
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-admin-site&#34;&gt;The admin site&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a superuser: (Django only stores the hash of the password)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register the model with the admin site. Example &lt;code&gt;admin.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; admin

&lt;span style=&#34;color:#586e75&#34;&gt;# Register your models here.&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; .models &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; Topic, Entry &lt;span style=&#34;color:#586e75&#34;&gt;# . means looking for the file in the same directory as admin.py&lt;/span&gt;

admin&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;site&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;register(Topic)
admin&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;site&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;register(Entry)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-django-shell-control-d-to-exit&#34;&gt;The Django shell (Control-d to exit)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python manage.py shell
&amp;gt;&amp;gt;&amp;gt; from bar.models import Topic
&amp;gt;&amp;gt;&amp;gt; Topic.objects.all&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;# returns a queryset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;making-pages&#34;&gt;Making pages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defining URLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Include the URLs in foo/urls.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; admin
&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; path, include

urlpatterns &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [
    path(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;, admin&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;site&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;urls),
    path(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, include(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;bar.urls&amp;#39;&lt;/span&gt;)),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new bar/urls.py file and add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; path

&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; . &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; views

app_name &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
urlpatterns &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#586e75&#34;&gt;# a list of individual pages that can be requested.&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;# Homepage&lt;/span&gt;
    path(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, views&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;index, name&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#586e75&#34;&gt;# &amp;#39;&amp;#39; means the base URL; call the index() function in views.py&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing views:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; render

&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;index&lt;/span&gt;(request):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The homepage.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;bar/index.html&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make the directory bar/templates/bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the file index.html:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;Learning Log&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;Learning Log helps you keep track of your learning, for any topic you&amp;#39;re learning about.&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we see the error: &lt;code&gt;ModuleNotFoundError: No module named &#39;learning_logs.urls&#39;&lt;/code&gt;, just CTRL-C and rerun the server by &lt;code&gt;python manage.py runserver&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template inheritance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a base.html file and include it on every page: (template tag:{percent percent}; bar is the namespace defined in bar/urls.py app_name) (in reality, use &lt;strong&gt;%&lt;/strong&gt; instead of percent! here is just for avoiding the markdown error.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;a&lt;/span&gt; href&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;{percent url &amp;#39;bar:index&amp;#39; percent}&amp;#34;&lt;/span&gt;&amp;gt;Foo&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;

{percent block content percent}{percent endblock content percent}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inherit the base.html: (index.html)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{percent extends &amp;#34;bar/base.html&amp;#34; percent}

{percent block content percent}
&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;Learning Log helps you become a better learner by keeping track of the topic you&amp;#39;re learning.&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;p&lt;/span&gt;&amp;gt;
{percent endblock content percent}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_1?keywords=python+crash+course&amp;amp;qid=1558808134&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java Notes</title>
      <link>https://tillchen.com/posts/2019-06-05-Java-Notes/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-06-05-Java-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#java-data-structures&#34;&gt;Java Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references-and-garbage-collection&#34;&gt;References and Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#static&#34;&gt;Static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#io&#34;&gt;I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constructors&#34;&gt;Constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polymorphism&#34;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SourceCode.java -&amp;gt; Compile (&lt;code&gt;javac source_code.java&lt;/code&gt;) -&amp;gt; Java bytecode (SourceCode.class) -&amp;gt;Run by the Java Virtual Machine (&lt;code&gt;java SouceCode&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write once, run anywhere!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every Java app must have at least &lt;strong&gt;one class&lt;/strong&gt; and at least &lt;strong&gt;one main&lt;/strong&gt; method (one main per app not per class.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int rand = (int) (Math.random() * 10)&lt;/code&gt; to get random integers in range [0, 9]. (Math is a Java class.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use &lt;code&gt;float&lt;/code&gt;, we need to append &lt;code&gt;f&lt;/code&gt; to the value. This is because Java treats everything with a floating point as &lt;code&gt;double&lt;/code&gt;: &lt;code&gt;float f = 3.14f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instance variables always get a default value, even if we don&amp;rsquo;t initialize it: &lt;code&gt;int 0&lt;/code&gt;; &lt;code&gt;float 0.0&lt;/code&gt;; &lt;code&gt;boolean false&lt;/code&gt;; &lt;code&gt;reference null&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;==&lt;/code&gt; for primitive types and references; &lt;code&gt;.equals()&lt;/code&gt; for different objects (for example string objects). (&lt;code&gt;==&lt;/code&gt; checks the reference/address and &lt;code&gt;.equals&lt;/code&gt; checks the content.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    String s1 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    String s2 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;s1 &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; s2&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;s1&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;equals&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;s2&lt;span style=&#34;color:#719e07&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Integer.parseInt(&amp;quot;42&amp;quot;)&lt;/code&gt; converts a string to an int using the Java Integer class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Stack and the Heap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Stack: all method invocations and local variables (aka, stack variables) live here.
&lt;ul&gt;
&lt;li&gt;The method on the top of the stack is always the currently executing method. When it&amp;rsquo;s removed from the stack, the method is executed, which the executing sequence for constructor chaining.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Heap: &lt;strong&gt;all&lt;/strong&gt; objects live here. Also know as the garbage-collectible heap.
&lt;ul&gt;
&lt;li&gt;Instance variables live inside the objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the local variable is a reference to an object, the variable (the reference) goes on the stack, and the object is still on the heap.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;String.valueOf()&lt;/code&gt; to convert nearly anything (including a char array) to String.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C &lt;code&gt;printf()&lt;/code&gt; like formatting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String s &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; String&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#719e07&#34;&gt;(%&lt;/span&gt;d&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.length&lt;/code&gt; for primitive types (e.g. int[], String[]), &lt;code&gt;.length()&lt;/code&gt; for objects (e.g. String). And &lt;code&gt;.size()&lt;/code&gt; for collections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; and &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;java-data-structures&#34;&gt;Java Data Structures&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ArrayList: (inside the java.util (utility) class) (for primitive types, Java 5 and above enabled autoboxing: &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; java.util.*
&lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        List&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; A &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;();&lt;/span&gt;
        A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Size is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;size&lt;span style=&#34;color:#719e07&#34;&gt;());&lt;/span&gt;
        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Contains hello? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;contains&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;));&lt;/span&gt;
        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Index of hello? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;));&lt;/span&gt;
        A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;remove&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// by value
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;remove&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// by index
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Empty? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;isEmpty&lt;span style=&#34;color:#719e07&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Arrays.asList(foo)&lt;/code&gt; and &lt;code&gt;.toArray(new int[0])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Comparator&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Arrays&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;sort&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;intervals&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Comparator&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;[]&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;compare&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; interval1&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; interval2&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; interval1&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; interval2&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// negative, smaller; 0, equal; positive, bigger
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using an interface, we usually use implementations like: &lt;code&gt;List&amp;lt;T&amp;gt; = new ArrayList&amp;lt;T&amp;gt;()&lt;/code&gt;, &lt;code&gt;Queue&amp;lt;T&amp;gt; = new LinkedList&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int[] array = new int[]{1,2,3};&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array static methods: &lt;code&gt;binarySearch(A, 42)&lt;/code&gt;, &lt;code&gt;copyOf(A)&lt;/code&gt;, &lt;code&gt;sort(A)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Methods: &lt;code&gt;charAt(1)&lt;/code&gt;, &lt;code&gt;indexOf(&#39;A&#39;)&lt;/code&gt;, &lt;code&gt;replace(&#39;a&#39;, &#39;A&#39;)&lt;/code&gt;, &lt;code&gt;replace(&amp;quot;a&amp;quot;, &amp;quot;abc&amp;quot;)&lt;/code&gt;, &lt;code&gt;substring(1,4)&lt;/code&gt;, &lt;code&gt;toCharArray()&lt;/code&gt;, &lt;code&gt;toLowerCase()&lt;/code&gt;, &lt;code&gt;String[] words = s.split(&amp;quot; &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if (string == null || string.isEmpty())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StringBuilder: &lt;code&gt;String reversed = new StringBuilder(s).reverse().toString()&lt;/code&gt;, &lt;code&gt;.trim()&lt;/code&gt; (removes leading and trailing spaces)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Initialize a map:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Map&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Character&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Character&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        put&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        put&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;V&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; 5&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        put&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; 10&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;for (int i : map.keySet());&lt;/code&gt; or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;Entry&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; entry &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; map&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;entrySet&lt;span style=&#34;color:#719e07&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    String key &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getKey&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
    Object value &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;getValue&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map.put(i, map.get(i)+1);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map.containsKey();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;TreeMap&lt;/code&gt; is a binary search tree (&lt;code&gt;SortedMap&lt;/code&gt;) implementation. It&amp;rsquo;s naturally sorted by keys. &lt;code&gt;SortedMap&amp;lt;Integer, String&amp;gt; sm = new TreeMap&amp;lt;Integer, String&amp;gt;();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references-and-garbage-collection&#34;&gt;References and Garbage Collection&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Garbage collection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Book b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
Book c &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// By far, 2 references and 2 objects.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;Book d &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// d and c refer to the same object
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// 3 references and 2 objects.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;c &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// c refers to b&amp;#39;s object now
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// 3 references and 2 objects.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Book b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
Book c &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// b and c refer to the same object
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// 2 references, 1 reachable object, 1 abandoned object.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// b&amp;#39;s original object eligible for garbage collection
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;c &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;//null reference
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// 1 active reference, 1 reachable object
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array of objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Book&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; books&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
books &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;10&lt;span style=&#34;color:#719e07&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// By far, only an array of references, no objects created.
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// To create the objects:
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; 10&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#719e07&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    Book&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Book&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;static&#34;&gt;Static&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All static variables are initialized before any object can be created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;increment&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        count&lt;span style=&#34;color:#719e07&#34;&gt;++;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static final variables are constants: &lt;code&gt;public static final double PI = 3.141592653589793;&lt;/code&gt; (In uppercase by convention.) Or we can use the static initializer which runs before any code in the class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// code``
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The method that throws must declare &lt;code&gt;throws Exception&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Solution&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;String args&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Invalid Input&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;finally&lt;/code&gt; block &lt;strong&gt;always runs&lt;/strong&gt; no matter what:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;//some exception) {
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;io&#34;&gt;I/O&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; java.util.Scanner&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;MyClass&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        Scanner scanner &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Scanner&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;in&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Enter name, age and salary:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#586e75&#34;&gt;// String input
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        String name &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;nextLine&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#586e75&#34;&gt;// Numerical input
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; age &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;nextInt&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; salary &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; scanner&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;nextDouble&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#586e75&#34;&gt;// Output input by user
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Age: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; age&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;out&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;println&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Salary: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; salary&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;constructors&#34;&gt;Constructors&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Invoking an overloaded constructor: call &lt;code&gt;this();&lt;/code&gt;. However, we can only call &lt;code&gt;this()&lt;/code&gt; &lt;strong&gt;OR&lt;/strong&gt; &lt;code&gt;super()&lt;/code&gt;, &lt;strong&gt;never both&lt;/strong&gt; inside a constructor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Bar&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;extends&lt;/span&gt; Foo &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    String name&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Bar&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// MUST BE THE FIRST STATEMENT!!!
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Bar&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;polymorphism&#34;&gt;Polymorphism&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;With polymorphism, the reference type can be a superclass of the object type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Animal&lt;span style=&#34;color:#719e07&#34;&gt;[]&lt;/span&gt; animals &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Animal&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#719e07&#34;&gt;];&lt;/span&gt;
animals&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Dog&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
animals&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Cat&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Animal animal &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; animals&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    animal&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;make_sound&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// mew and bark
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can also have polymorphic arguments and return types. (When a superclass type is requested, a subclass is sufficient to use.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rules for overriding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arguments must be the same, and return types must be compatible.&lt;/li&gt;
&lt;li&gt;The method can&amp;rsquo;t be less accessible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abstract:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;abstract&lt;/code&gt; to make the base class abstract. &lt;code&gt;public abstract class animal {}&lt;/code&gt; (can&amp;rsquo;t be instantiated.)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;abstract&lt;/code&gt; to make a method abstract &lt;code&gt;public abstract void eat();&lt;/code&gt; (also no method body!)&lt;/li&gt;
&lt;li&gt;Abstract methods must be put in abstract classes.&lt;/li&gt;
&lt;li&gt;We must implement abstract methods by overriding.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every class in Java extends the Object class which has the methods like: &lt;code&gt;.equals()&lt;/code&gt;, &lt;code&gt;.hashCode()&lt;/code&gt;, &lt;code&gt;.getClass()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=sr_1_1?keywords=head+first+java&amp;amp;qid=1560043638&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Head First Java, 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/difference-equals-method-java/&#34;&gt;https://www.geeksforgeeks.org/difference-equals-method-java/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Tips</title>
      <link>https://tillchen.com/posts/2019-05-25-Git-Tips/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-05-25-Git-Tips/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gitignore&#34;&gt;.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reverting&#34;&gt;Reverting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remotes&#34;&gt;Remotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tags&#34;&gt;Tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#branching&#34;&gt;Branching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deleting-a-repository&#34;&gt;Deleting a repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Git - more like a mini filesystem - thinks about its data more like a stream of snapshots, unlike other delta-based version control systems (Subversion.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike CVCS, nearly every operation in Git is local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git has integrity. Everything is checksummed. It uses SHA-1 to store everything in it&amp;rsquo;s DB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git generally only adds data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git has three stages: &lt;em&gt;modified&lt;/em&gt;, &lt;em&gt;staged&lt;/em&gt;, and &lt;em&gt;committed&lt;/em&gt;. And it has three main sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The working tree&lt;/em&gt;: a single checkout of one version of the project. Files are pulled out of the compressed DB in the Git directory and placed on the disk for modifications.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The staging area&lt;/em&gt;: - aka index - a file that stores info about what will go into the next commit.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Git directory&lt;/em&gt;: - .git - stores the metadata and object DB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -m &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Initial commit&amp;#34;&lt;/span&gt;
git add forgotten_file
git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we&amp;rsquo;ll have one single commit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;gitignore&#34;&gt;.gitignore&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When we want to ignore certain files or folders, create a .gitignore file and add the file/folder name inside:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;file.txt # a single file
folder/ # a folder named `folder`
*.txt # all txt files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a file is already tracked, use &lt;code&gt;git rm --cached foo.txt&lt;/code&gt; to remove it first from the git repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;log&#34;&gt;Log&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When we want to get a simpler version of the log, use &lt;code&gt;git log --pretty=oneline&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;reverting&#34;&gt;Reverting&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;git checkout .&lt;/code&gt; to revert to the last commit before adding the new changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;git checkout&lt;/code&gt; plus the first 6 characters of the reference ID to check out the old commits. This enters the detached HEAD state. And it&amp;rsquo;s best &lt;em&gt;&lt;strong&gt;not to make changes&lt;/strong&gt;&lt;/em&gt; when checking out old commits. Use &lt;code&gt;git checkout master&lt;/code&gt; to go back the master branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;git reset --hard&lt;/code&gt; plus the first 6 character of the reference ID to reset the project to the old commit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset HEAD README.md&lt;/code&gt; to unstage the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -- README.md&lt;/code&gt; to discard the changes for the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;remotes&#34;&gt;Remotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt; to see all the remotes verbosely with URLs. &lt;code&gt;origin&lt;/code&gt; is the default name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; = &lt;code&gt;git fetch&lt;/code&gt; + &lt;code&gt;git merge&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;: &lt;code&gt;git push origin master&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote show &amp;lt;remote&amp;gt;&lt;/code&gt; to see details of a remote.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote rename &amp;lt;old_remote&amp;gt; &amp;lt;new_remote&amp;gt;&lt;/code&gt; and &lt;code&gt;git remote remove &amp;lt;remote&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tags&#34;&gt;Tags&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Annotated tags: &lt;code&gt;git tag -a v1.0 -m &amp;quot;my first tag&amp;quot;&lt;/code&gt;. &lt;code&gt;git tag&lt;/code&gt; to see the tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git show v1.0&lt;/code&gt; to show the details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lightweight tags: &lt;code&gt;git tag v1.0-lw&lt;/code&gt; (just provide a tag name only). It&amp;rsquo;s a commit checksum - no other info is kept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add tags for previous commits: &lt;code&gt;git tag -a v1.0 &amp;lt;log_number&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; doesn&amp;rsquo;t push tags to the remote servers. We need &lt;code&gt;git push origin &amp;lt;tag_name&amp;gt;&lt;/code&gt; or &lt;code&gt;git push origin --tags&lt;/code&gt; for all tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git tag -d &amp;lt;tag_name&amp;gt;&lt;/code&gt; and &lt;code&gt;git push origin --delete &amp;lt;tag_name&amp;gt;&lt;/code&gt; for deletion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;branching&#34;&gt;Branching&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch_name&amp;gt;&lt;/code&gt; creates a new branch. &lt;code&gt;git checkout &amp;lt;branch_name&amp;gt;&lt;/code&gt; moves &lt;code&gt;HEAD&lt;/code&gt; to the branch. The shorter version is &lt;code&gt;git checkout -b &amp;lt;branch_name&amp;gt;&lt;/code&gt; to do both at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git log --oneline --decorate&lt;/code&gt; shows the branch pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git log --oneline --decorate --graph --all&lt;/code&gt; shows the divergence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branches are cheap since they are essentially a file that has the 40-character checksum of the commit pointed to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt; + &lt;code&gt;git merge hotfix&lt;/code&gt; will fast-forward (or use the recursive strategy) the master branch to the match the hotfix branch. Then &lt;code&gt;git branch -d hotfix&lt;/code&gt; deletes it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case of merge conflict, we need to choose one side or merge the contents ourselves. Then add and commit the file again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch -v&lt;/code&gt; shows the last commit of each branch. &lt;code&gt;git branch --merged&lt;/code&gt; and &lt;code&gt;git branch --no-merged&lt;/code&gt; shows the branched that are already merged to the current branch or not yet respectively. Or &lt;code&gt;git branch --no-merged master&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout experiment&lt;/code&gt; + &lt;code&gt;git rebase master&lt;/code&gt; + &lt;code&gt;git checkout master&lt;/code&gt; + &lt;code&gt;git merge experiment&lt;/code&gt; gives a fast-forward merge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; is a convenience tool. But since branching is cheap, we can always branch and then delete it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch -a&lt;/code&gt; to see all the branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt; and &lt;code&gt;git checkout -b test remotes/origin/test&lt;/code&gt; creates a local &lt;code&gt;test&lt;/code&gt; branch and connects it with the remote branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deleting-a-repository&#34;&gt;Deleting a repository&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We can either delete the .git directory in a file browser or use &lt;code&gt;rm -rf .git&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_1?keywords=python+crash+course&amp;amp;qid=1558808134&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git, 2nd Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python Notes</title>
      <link>https://tillchen.com/posts/2019-05-12-Python-Notes/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-05-12-Python-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tuples&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dictionaries&#34;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sets&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#input&#34;&gt;Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oop&#34;&gt;OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;strings&#34;&gt;Strings&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change Case:&lt;code&gt;.title()&lt;/code&gt; &lt;code&gt;.upper()&lt;/code&gt; &lt;code&gt;.lower()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;f-strings are preferred.&lt;/li&gt;
&lt;li&gt;Stripping Whitespace: &lt;code&gt;.lstrip()&lt;/code&gt; &lt;code&gt;.rstrip()&lt;/code&gt; &lt;code&gt;.strip()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;numbers&#34;&gt;Numbers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We can group digits using underscores to make large numbers more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;universe_age &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;14&lt;/span&gt;_000_000_000
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt; (universe_age)
&lt;span style=&#34;color:#586e75&#34;&gt;# Output: 14000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Assignment: &lt;code&gt;x, y, z = 1, 2, 3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constants: No-built in constants, use uppercase as a convention (like in C/C++): &lt;code&gt;MAX = 100&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exponential: Use **: &lt;code&gt;a = 2 ** 3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;range(): &lt;code&gt;range(1,11,2)&lt;/code&gt; is 1, 3, 5, 7, 9&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Inserting: &lt;code&gt;A.insert(0, foo)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By index
&lt;ul&gt;
&lt;li&gt;del: &lt;code&gt;del A[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pop():
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;last = A.pop()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first = A.pop(0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;By value
&lt;ul&gt;
&lt;li&gt;remove(): &lt;code&gt;A.remove(foo)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sorting (Alphabetically): &lt;code&gt;A.sort()&lt;/code&gt; &lt;code&gt;A.sort(reverse=True)&lt;/code&gt; &lt;code&gt;print(sorted(A))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reversing (Chronologically): &lt;code&gt;A.reverse()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;min(A) max(A) sum(A)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Comprehensions: &lt;code&gt;A = [a ** 2 for a in range(1,3)]&lt;/code&gt; &lt;code&gt;A = [1,4]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing: &lt;code&gt;A = [0,1,2,3,4]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print (A[1:4])&lt;/code&gt; gives 1,2,3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print (A[:4])&lt;/code&gt; is equivalent to &lt;code&gt;print (A[0:4])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print (A[1:])&lt;/code&gt; is equivalent to &lt;code&gt;print (A[1:5])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print (A[-3:])&lt;/code&gt; is equivalent to &lt;code&gt;print (A[2:])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copying: &lt;code&gt;B = A[:]&lt;/code&gt; (full slicing) instead of &lt;code&gt;B = A&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checking existence:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;A &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;]
&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A:
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;1 in A&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A:
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;6 not in A&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With while loops:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;while&lt;/span&gt; A: &lt;span style=&#34;color:#586e75&#34;&gt;# while A is not empty&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A: &lt;span style=&#34;color:#586e75&#34;&gt;# while there is 1 in A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tuples can&amp;rsquo;t be modified: &lt;code&gt;A = (1,2)&lt;/code&gt; &lt;code&gt;A[0] = 3&lt;/code&gt; doesn&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;But tuples can be reassigned: &lt;code&gt;A = (1,2)&lt;/code&gt; &lt;code&gt;A = (3,2)&lt;/code&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;A &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#2aa198&#34;&gt;19&lt;/span&gt;}
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(A[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;])
&lt;span style=&#34;color:#586e75&#34;&gt;# Output: python&lt;/span&gt;
A[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;190&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;# adding a new pair&lt;/span&gt;
A[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;# modifying&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get() (When not sure if the key exists): &lt;code&gt;print (A.get(&amp;quot;weight&amp;quot;, &amp;quot;no weight assigned&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Looping through:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;items(): &lt;span style=&#34;color:#586e75&#34;&gt;# keys and values&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;keys(): &lt;span style=&#34;color:#586e75&#34;&gt;# equivalent to the line below&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A: &lt;span style=&#34;color:#586e75&#34;&gt;# since looping through the keys is default&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;sorted&lt;/span&gt;(A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;keys()) &lt;span style=&#34;color:#586e75&#34;&gt;# sorted&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;values(): &lt;span style=&#34;color:#586e75&#34;&gt;# just values&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(A&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;values()) &lt;span style=&#34;color:#586e75&#34;&gt;# unique values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lists and dictionaries can be nested into each other or themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;languages &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt; (languages)
&lt;span style=&#34;color:#586e75&#34;&gt;# Output {&amp;#39;python&amp;#39;, &amp;#39;C++&amp;#39;, &amp;#39;C&amp;#39;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Reading an int: &lt;code&gt;n = int(input(&amp;quot;Please input a number: &amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Optional keyword arguments that avoid confusion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;minus&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; (a &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; b)

&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(minus(a&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;, b&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#586e75&#34;&gt;# is equivalent to the line below&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(minus(b&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;, a&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default values for the parameters can be added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;minus&lt;/span&gt;(a, b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;):
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; (a &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; b)

&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(minus(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can make an argument optional by using None or &amp;ldquo;&amp;quot;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;build_person&lt;/span&gt;(first, last, age&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;None&lt;/span&gt;):
    person &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt;: first, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt;: last}
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; age:
        person[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; age
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; person
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To prevent a function from modifying a list, pass the list with full slicing: &lt;code&gt;foo(A[:])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variadic functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;print_languages&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;languages): &lt;span style=&#34;color:#586e75&#34;&gt;# The * makes an empty tuple and packs any value it receives&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; language &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; languages:
        &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;- {language}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#586e75&#34;&gt;# more generically, *args&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;# **kwargs for key-value pairs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Importing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; module_name &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; func_1, func_2, func_3 &lt;span style=&#34;color:#586e75&#34;&gt;# importing multiple functions&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; module_name &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; func_1 &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; f &lt;span style=&#34;color:#586e75&#34;&gt;# alias&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; module_name &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; m &lt;span style=&#34;color:#586e75&#34;&gt;# alias&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; module_name &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;# all functions&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;# We must import everything at the beginning of each file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;oop&#34;&gt;OOP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Default value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt;:
    &lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; __init__(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, value):
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; foo &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; Foo
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Foo&lt;/span&gt;(Bar): &lt;span style=&#34;color:#586e75&#34;&gt;# Bar is the parent class&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; __init__(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;, value):
        &lt;span style=&#34;color:#b58900&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;__init__(value) &lt;span style=&#34;color:#586e75&#34;&gt;# superclass&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;# we can also override a method by redefining it in the child class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capitalize the first letter of each word, &lt;strong&gt;without&lt;/strong&gt; underscores. Instances and module names use underscores and are in lowercase.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;randint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(randint(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; choice
A &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#2aa198&#34;&gt;6&lt;/span&gt;]
&lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(choice(A))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reading an entire file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; file_obj: &lt;span style=&#34;color:#586e75&#34;&gt;# &amp;#34;r&amp;#34; is the default mode&lt;/span&gt;
    contents &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; file_obj&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#586e75&#34;&gt;# lines = file_obj.readlines() -&amp;gt; a list of lines&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;# for line in lines:&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;#print(line.rstrip())&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(contents&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;rstrip()) &lt;span style=&#34;color:#586e75&#34;&gt;# Removing the additional \n&lt;/span&gt;
    &lt;span style=&#34;color:#586e75&#34;&gt;# no need to close, python will do it automatically&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reading line by line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; file_obj:
    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#719e07&#34;&gt;in&lt;/span&gt; file_obj:
        &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(line&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;rstrip())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# python only writes strings, use str() if necessary&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; file_obj: &lt;span style=&#34;color:#586e75&#34;&gt;# &amp;#34;a&amp;#34;, &amp;#34;r+&amp;#34;&lt;/span&gt;
    file_obj&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Python.&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic try-except-else:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#719e07&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;ZeroDivisionError&lt;/span&gt;:
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Can&amp;#39;t divide by 0.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#586e75&#34;&gt;# optional&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Failing silently using &lt;em&gt;pass&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#719e07&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; file_obj:
        content &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; file_obj&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#719e07&#34;&gt;except&lt;/span&gt; FileNotFoundError:
    &lt;span style=&#34;color:#719e07&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt;:
     &lt;span style=&#34;color:#719e07&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#b58900&#34;&gt;len&lt;/span&gt;(content&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;split())) &lt;span style=&#34;color:#586e75&#34;&gt;# word count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic unit testing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;color:#719e07&#34;&gt;from&lt;/span&gt; file &lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; function_1:

&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Func1Test&lt;/span&gt;(unittest&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;):
        result &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; function_1(value)
        &lt;span style=&#34;color:#268bd2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;assertEqual(result, foo)

&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    unittest&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setUp() method can be used to test a class&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_1?keywords=python+crash+course&amp;amp;qid=1558808134&amp;amp;s=gateway&amp;amp;sr=8-1&#34;&gt;Python Crash Course, 2nd Edition: A Hands-On, Project-Based Introduction to Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C and C&#43;&#43; Notes</title>
      <link>https://tillchen.com/posts/2019-05-05-C-and-C&#43;&#43;-Notes/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-05-05-C-and-C&#43;&#43;-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic-memory-allocation&#34;&gt;Dynamic Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#makefiles&#34;&gt;Makefiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stl&#34;&gt;STL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How to compile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gcc -Wall -o foo foo.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input in C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt; foo[&lt;span style=&#34;color:#2aa198&#34;&gt;100&lt;/span&gt;];
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; bar;
fgets(foo, &lt;span style=&#34;color:#719e07&#34;&gt;sizeof&lt;/span&gt;(foo), stdin);
scanf(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;bar);
getchar(); &lt;span style=&#34;color:#586e75&#34;&gt;// must be added after scanf. It handels /n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input in C++:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;string foo;
getline(cin, foo);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When two types sum, a promotion happens. When a type is passed to a function, a demotion happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefix and postfix &lt;code&gt;++&lt;/code&gt; &lt;code&gt;--&lt;/code&gt; differ when used in an assignment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;a; &lt;span style=&#34;color:#586e75&#34;&gt;// a = 2, b = 2
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// a = 3, b = 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0 is false. Everything else is true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;argv&lt;/code&gt;, the first name is the program&amp;rsquo;s name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;puts()&lt;/code&gt; will append &lt;code&gt;\n&lt;/code&gt; to the end of the string and print.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dynamic-memory-allocation&#34;&gt;Dynamic Memory Allocation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; foo;
foo &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;) malloc(&lt;span style=&#34;color:#719e07&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;);
&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (foo &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;NULL&lt;/span&gt;) {
    &lt;span style=&#34;color:#586e75&#34;&gt;// blah blah
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;}
free(foo);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In C++: &lt;code&gt;T* ptr = new T(value)&lt;/code&gt; is equivalent to &lt;code&gt;T* ptr = new T[1] {value}&lt;/code&gt; ((value) and {value} can be omitted.) (&lt;code&gt;delete [] ptr&lt;/code&gt; for arrays; &lt;code&gt;delete ptr&lt;/code&gt; for single values.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;makefiles&#34;&gt;Makefiles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How to run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make // &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; no extension
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make -f Mymakefile.txt
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;templates&#34;&gt;Templates&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generic Functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;
T array_sum(T arr[], &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; size) {
    &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; i;
    T sum &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; arr[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; size; i &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;) {
        sum &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; arr[i];
    }
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generic Classes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;BoundedArray&lt;/span&gt; {
    T array[size];
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
    BoundedArray(){};
    T&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color:#586e75&#34;&gt;// overloaded access operator
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;};

&lt;span style=&#34;color:#719e07&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;
T&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; BoundedArray&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;operator&lt;/span&gt;[](&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; pos) {
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; ((pos &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#719e07&#34;&gt;||&lt;/span&gt; (pos &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;=&lt;/span&gt; size)) {
        exit(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; array[pos];
}
&lt;span style=&#34;color:#586e75&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;BoundedArray&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; intArray;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;stl&#34;&gt;STL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Vectors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; vInt(&lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;);
vInt.push_back(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#586e75&#34;&gt;// .clear, .size, .pop_back
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deques: (Double Ended Queues)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// .push_front, .pop_front
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lists: (Doubly Linked Lists) (No random access.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterators:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; vInt;
vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;::&lt;/span&gt;iterator vIterator;
&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (vIterator &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; vInt.begin(); vIterator &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; vInt.end(); vIterator&lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set: (insert, erase, clear, empty, size, find, count)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps: (find, clear, erase, insert)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;map&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;, LessThanStr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; months;
months[&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;january&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;31&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When we initialize an int vector, int array, etc., they are filled with 0s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The public interface is inherited to the inherited class. (The interface of the base class is a subset of the derived class.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We must initialize static data members outside of the class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;foo&lt;/span&gt; {
    &lt;span style=&#34;color:#719e07&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; var;
}

&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; foo&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;var &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we write to a file, the data is first stored in the buffer. When the buffer is flushed, the data is written into the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; with pointers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; ptr &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;a; &lt;span style=&#34;color:#586e75&#34;&gt;// constant data (2), not constant pointer
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; ptr_1 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;a; &lt;span style=&#34;color:#586e75&#34;&gt;// constant pointer, not constant data
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; ptr_2 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;a; &lt;span style=&#34;color:#586e75&#34;&gt;// constant pointer and data
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-dereferencing in C++:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; foo &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; bar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; foo;
bar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#586e75&#34;&gt;// Both are 2 now
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Vim Tips</title>
      <link>https://tillchen.com/posts/2019-05-05-Vim-Tips/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2019-05-05-Vim-Tips/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#deletion&#34;&gt;Deletion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modification&#34;&gt;Modification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plugins&#34;&gt;Plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-cursors&#34;&gt;Multiple Cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emmet&#34;&gt;Emmet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tagbar&#34;&gt;Tagbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nerdtree&#34;&gt;NERDTree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deletion&#34;&gt;Deletion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;lsquo;dw’ deletes the word including the space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘d$’ deletes from the cursor to the end of the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘de’ deletes the word excluding the space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘d2w’, ‘d2e’ delete 2 words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘dd’ deletes a whole line, ‘2dd’ deletes 2 lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘p’ puts the deleted content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;‘0’ goes to the start of the line. &amp;lsquo;$&amp;rsquo; goes to the end of the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘2w’ goes 2 words ahead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘2e’ goes to the end of the second word ahead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘G’ goes to the bottom, &amp;lt;C-g&amp;gt; shows the location status, ‘gg’ goes to the top, ‘5G’ goes to the 5th line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;modification&#34;&gt;Modification&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;‘u’ undoes, ‘U’ fixes the whole line, &amp;lt;C-r&amp;gt; undoes the undo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘r’ and ‘a’ replace the char with a.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘ce’ and ‘abc’ change the word to the end with abc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘c$’ changes to the end of the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;:r foo appends the content of foo to the file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘R’ goes to replace mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘y’ yanks and ‘p’ pastes, ‘yw’ yanks word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‘gt’ goes to the next tab, ‘gT’ goes to the previous tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:1,10s/foo/bar/g&lt;/code&gt; replaces foo with bar between line 1 and line 10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To enable spell check :setlocal spell spelllang=en_us .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;:terminal to open terminal, &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt; to enter vim mode to enable go up and go down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g, &amp;lt;C-g&amp;gt; to see the word count.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;
&lt;h3 id=&#34;multiple-cursors&#34;&gt;Multiple Cursors&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;normal mode&lt;/strong&gt;, &amp;lt;C-n&amp;gt;&amp;lt;C-n&amp;gt;&amp;lt;C-n&amp;gt;c, new_name (select 3 variables and rename.)&lt;/p&gt;
&lt;h3 id=&#34;emmet&#34;&gt;Emmet&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;html:5_&lt;/code&gt; (&amp;quot;_&amp;rdquo; is the cursor position), then &amp;lt;C-y&amp;gt; &lt;strong&gt;,&lt;/strong&gt; , we get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;html&lt;/span&gt; lang&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;meta&lt;/span&gt; charset&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#268bd2&#34;&gt;body&lt;/span&gt;&amp;gt;
    _
&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#268bd2&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tagbar&#34;&gt;Tagbar&lt;/h3&gt;
&lt;p&gt;F8 to toggle.&lt;/p&gt;
&lt;h3 id=&#34;nerdtree&#34;&gt;NERDTree&lt;/h3&gt;
&lt;p&gt;:NERDTreeFocus to turn on.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
