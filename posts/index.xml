<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Tianyao Chen</title>
        <link>https://tillchen.com/posts/</link>
        <description>All Posts | Tianyao Chen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tillchen417@gmail.com (Tianyao Chen)</managingEditor>
            <webMaster>tillchen417@gmail.com (Tianyao Chen)</webMaster><lastBuildDate>Mon, 02 Nov 2020 19:23:08 &#43;0100</lastBuildDate><atom:link href="https://tillchen.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Modern Java Notes</title>
    <link>https://tillchen.com/posts/2020-11-02-Modern-Java-Notes/</link>
    <pubDate>Mon, 02 Nov 2020 19:23:08 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-11-02-Modern-Java-Notes/</guid>
    <description><![CDATA[Method reference and lambdas Streams Default methods Optional Miscellaneous References  Notes for the modern Java (Java 8+.)
Method reference and lambdas   Java 8+ treats functions and lambdas as first-class citizens, which means we can pass functions around using method reference. Note that lambdas can only capture final variables in the same scope.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  inventory.]]></description>
</item><item>
    <title>Python Advanced Tricks</title>
    <link>https://tillchen.com/posts/2020-11-02-Python-Advanced-Tricks/</link>
    <pubDate>Mon, 02 Nov 2020 17:45:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-11-02-Python-Advanced-Tricks/</guid>
    <description><![CDATA[Decorators  functools  cached_property lru_cache reduce   dataclasses  dataclass     Data Structures  Dictioaries  OrderedDict defaultdict ChainMap MappingProxyType   Arrays  array.array bytes bytearray   Records, Structs, and Data Transfer Objects  namedtuple SimpleNamespace   Sets and Multisets  frozenset Counter   Stacks  list deque LifoQueue   Queues  list deque queue.Queue multiprocessing.Queue   Priority Queues  list heapq queue.]]></description>
</item><item>
    <title>Flutter Notes</title>
    <link>https://tillchen.com/posts/2020-06-16-Flutter-Notes/</link>
    <pubDate>Tue, 16 Jun 2020 21:49:50 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-06-16-Flutter-Notes/</guid>
    <description><![CDATA[Introduction Declarative UI  Why How   Views  The equivalent of a view in Flutter How to update widgets   Intents  The equivalent of an Intent in Flutter How to handle incoming intents from external apps The equivalent of startActivityForResult()   Project structure and resources  Image files Strings   Layouts  Equivalent of a LinearLayout Flexible widget Expanded widget SizedBox widget Spacer widget Equivalent of a RelativeLayout Equivalent of a ScrollView   Gesture detection and touch event handling  Equivalent of onClick Other gestures   ListView and adapters  Equivalent of ListView Which item is clicked Update ListView dynamically   Text  Form input  Equivalent of a hint Show validation errors     Databases and local storage  Shared Preferences SQLite   Notifications Widget Lifecycles References  Introduction This post is assuming that the reader has Android development background.]]></description>
</item><item>
    <title>Dart Notes</title>
    <link>https://tillchen.com/posts/2020-06-13-Dart-Notes/</link>
    <pubDate>Sat, 13 Jun 2020 22:48:53 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-06-13-Dart-Notes/</guid>
    <description><![CDATA[Introduction Variables Built-in Types  Numbers Strings Booleans Lists Sets Maps Runes and Grapheme Clusters Symbols   Functions  Optional Parameters  Named Parameters Positional parameters   Anonymous Functions   Operators Exceptions Classes Enum Asynchrony Functional Programming References  Introduction   A basic Dart program:
1 2 3 4 5 6 7 8  printInteger(int aNumber) { print(&#39;The number is $aNumber&#39;); } main() { var number = 42; printInteger(number); }     Everything that can be placed in a variable is an object.]]></description>
</item><item>
    <title>Algorithms and Data Structures</title>
    <link>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</link>
    <pubDate>Fri, 10 Apr 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</guid>
    <description><![CDATA[Dynamic Programming Greedy Algorithms References  Dynamic Programming   The two key ingredients:
 optimal substructure: The optimal solution contains the optimal solutions to subproblems.  The subproblems need to be independent, which means the solution to one subproblem does not affect the solution to another subproblem.   overlapping subproblems    The other two steps:
 Reconstruct an optimal solution Memoization: When the subproblem is first encountered as the recursive algorithm unfolds, its solution is computed and then stored in the stable.]]></description>
</item><item>
    <title>Design Patterns</title>
    <link>https://tillchen.com/posts/2020-03-29-Design-Patterns/</link>
    <pubDate>Sun, 29 Mar 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-03-29-Design-Patterns/</guid>
    <description><![CDATA[Principles The Strategy Pattern The Observer Pattern The Decorator Pattern The Factory Pattern The Singleton Pattern The Command Pattern The Adapter Pattern The Facade Pattern The Template Method Pattern The State Pattern The Proxy Pattern Model-View-Controller Design Pattern Categories References  Principles   Identify the varying parts and separate them from the invariant.
  Program to an interface (supertype), not an implementation.
1 2 3  Animal animal = new Dog(); animal.]]></description>
</item><item>
    <title>Go Notes</title>
    <link>https://tillchen.com/posts/2020-02-17-Go-Notes/</link>
    <pubDate>Mon, 17 Feb 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-02-17-Go-Notes/</guid>
    <description><![CDATA[Basics Data Structures Structs Errors and Failures Goroutines and Channels Testing  Basics   Hello World:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  package main import ( &#34;fmt&#34; &#34;strings&#34; &#34;math/rand&#34; &#34;time&#34; &#34;github.com/headfirstgo/keyboard&#34; // use go get to download the package ) func main() { fmt.Println(&#34;Hello Go!&#34;) fmt.Println(strings.Title(&#34;head first go&#34;)) rand.Seed(time.Now().Unix()) fmt.Println(rand.Intn(100)) // 0 - 99 }     Use go fmt to format the code.]]></description>
</item><item>
    <title>Kotlin Notes</title>
    <link>https://tillchen.com/posts/2019-09-04-Kotlin-Notes/</link>
    <pubDate>Wed, 04 Sep 2019 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2019-09-04-Kotlin-Notes/</guid>
    <description><![CDATA[Table of Contents  Table of Contents Basics Collections OOP Nulls and Exceptions Lambdas and Higher-Order Functions References  Basics   Kotlin requires one main per app:
1 2 3  fun main(args: Array&lt;String&gt;) { // the args part can be omitted  println(&#34;Hello Kotlin!&#34;) }     Shorter if
1 2  println(if (x &gt; y) &#34;x is greater&#34; else &#34;x is not greater&#34;) return if (x &gt; y) x else y     var vs val:]]></description>
</item><item>
    <title>iOS Development Notes</title>
    <link>https://tillchen.com/posts/2019-08-13-iOS-Development-Notes/</link>
    <pubDate>Tue, 13 Aug 2019 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2019-08-13-iOS-Development-Notes/</guid>
    <description><![CDATA[Basics View Controller Lifecycle: MVC Architecture Project Organization References  Basics   Model-View-Controller is a design pattern in iOS.
  Unlike in Android Studio, the Interface Builder is not a graphical representation of code. A storyboard file is an archive of object instances.
  Outlets are references to objects: @IBOutlet var questionLabel: UILabel! (IB means interface builder.) (Right click the item and drag it to the assistant editor to create the outlet.]]></description>
</item><item>
    <title>Swift Notes</title>
    <link>https://tillchen.com/posts/2019-08-2-Swift-Notes/</link>
    <pubDate>Fri, 02 Aug 2019 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2019-08-2-Swift-Notes/</guid>
    <description><![CDATA[Basics OOP References  Basics   How to compile and run:
1  swift hello_world.swift     No semicolons (though allowed) and no main functions. But semicolons must be used to write multiple statements in a single line.
  Use let to make a constant and var to make a variable. (Use let whenever possible) Plus, multiple variables can be declared in one line: var x = 0, y = 0.]]></description>
</item></channel>
</rss>
