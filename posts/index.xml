<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Tianyao Chen</title>
        <link>https://tillchen.com/posts/</link>
        <description>All Posts | Tianyao Chen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tillchen417@gmail.com (Tianyao Chen)</managingEditor>
            <webMaster>tillchen417@gmail.com (Tianyao Chen)</webMaster><lastBuildDate>Mon, 02 Nov 2020 19:23:08 &#43;0100</lastBuildDate><atom:link href="https://tillchen.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Modern Java Notes</title>
    <link>https://tillchen.com/posts/2020-11-02-Modern-Java-Notes/</link>
    <pubDate>Mon, 02 Nov 2020 19:23:08 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-11-02-Modern-Java-Notes/</guid>
    <description><![CDATA[Method reference and lambdas Streams Default methods Optional Miscellaneous References  Notes for the modern Java (Java 8+.)
Method reference and lambdas   Java 8+ treats functions and lambdas as first-class citizens, which means we can pass functions around using method reference. Note that lambdas can only capture final variables in the same scope.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  inventory.]]></description>
</item><item>
    <title>Python Advanced Tricks</title>
    <link>https://tillchen.com/posts/2020-11-02-Python-Advanced-Tricks/</link>
    <pubDate>Mon, 02 Nov 2020 17:45:00 &#43;0100</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-11-02-Python-Advanced-Tricks/</guid>
    <description><![CDATA[Decorators  functools  cached_property lru_cache reduce   dataclasses  dataclass     Data Structures  Dictioaries  OrderedDict defaultdict ChainMap MappingProxyType   Arrays  array.array bytes bytearray   Records, Structs, and Data Transfer Objects  namedtuple SimpleNamespace   Sets and Multisets  frozenset Counter   Stacks  list deque LifoQueue   Queues  list deque queue.Queue multiprocessing.Queue   Priority Queues  list heapq queue.]]></description>
</item><item>
    <title>Flutter Notes</title>
    <link>https://tillchen.com/posts/2020-06-16-Flutter-Notes/</link>
    <pubDate>Tue, 16 Jun 2020 21:49:50 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-06-16-Flutter-Notes/</guid>
    <description><![CDATA[Introduction Declarative UI  Why How   Views  The equivalent of a view in Flutter How to update widgets   Intents  The equivalent of an Intent in Flutter How to handle incoming intents from external apps The equivalent of startActivityForResult()   Project structure and resources  Image files Strings   Layouts  Equivalent of a LinearLayout Flexible widget Expanded widget SizedBox widget Spacer widget Equivalent of a RelativeLayout Equivalent of a ScrollView   Gesture detection and touch event handling  Equivalent of onClick Other gestures   ListView and adapters  Equivalent of ListView Which item is clicked Update ListView dynamically   Text  Form input  Equivalent of a hint Show validation errors     Databases and local storage  Shared Preferences SQLite   Notifications Widget Lifecycles References  Introduction This post is assuming that the reader has Android development background.]]></description>
</item><item>
    <title>Dart Notes</title>
    <link>https://tillchen.com/posts/2020-06-13-Dart-Notes/</link>
    <pubDate>Sat, 13 Jun 2020 22:48:53 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-06-13-Dart-Notes/</guid>
    <description><![CDATA[Introduction Variables Built-in Types  Numbers Strings Booleans Lists Sets Maps Runes and Grapheme Clusters Symbols   Functions  Optional Parameters  Named Parameters Positional parameters   Anonymous Functions   Operators Exceptions Classes Enum Asynchrony Functional Programming References  Introduction   A basic Dart program:
1 2 3 4 5 6 7 8  printInteger(int aNumber) { print(&#39;The number is $aNumber&#39;); } main() { var number = 42; printInteger(number); }     Everything that can be placed in a variable is an object.]]></description>
</item><item>
    <title>Secure and Dependable Systems Notes</title>
    <link>https://tillchen.com/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/</link>
    <pubDate>Tue, 26 May 2020 16:11:13 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-26-Secure-and-Dependable-Systems-Notes/</guid>
    <description><![CDATA[Introduction  Recent Computing Disasters Dependability Concepts and Terminology Dependability Metrics   Software Engineering Aspects  General Aspects Software Testing Software Specification Software Verification   Software Vulnerabilities and Exploits  Control Flow Exploits   Cryptography  Cryptography Primer Symmetric Encryption Algorithms and Block Ciphers Asymmetric Encryption Algorithms Cryptographic Hash Functions Digital Signatures and Certificates Key Exchange Schemes   Secure Communication Protocols  Pretty Good Privacy Transport Layer Security Secure Shell   Information Hiding and Privacy  Steganography and Watermarks Covert Channels Anonymization Terminology Mixes and Onion Routing   System Security  Trusted Computing Authentication Authorization Auditing   References  Introduction This is the course notes for Secure and Dependable Systems by Dr.]]></description>
</item><item>
    <title>Computability and Complexity Notes</title>
    <link>https://tillchen.com/posts/2020-05-24-Computability-and-Complexity-Notes/</link>
    <pubDate>Sun, 24 May 2020 08:45:46 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-24-Computability-and-Complexity-Notes/</guid>
    <description><![CDATA[Introduction Computability Theory  The Church-Turing Thesis  Turing Machines Variants of Turing Machines  Mutlitape TM Nondeterministic TM Random Access Machine     Decidability  Decidable Languages Undecidability of $A_{TM}$ A Turing-Unrecognizable Language   Reducibility   Complexity Theory  Time Complexity  Measuring Complexity The Class P The Class NP Polynomial Time Reducibility NP-completeness Hierarchy Theorems   Space Complexity  Measuring Space Complexity PSPACE and Related Classes     References  Introduction This is the course notes for Computability and Complexity by Prof.]]></description>
</item><item>
    <title>Computer Networks Notes</title>
    <link>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</link>
    <pubDate>Fri, 22 May 2020 18:52:12 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</guid>
    <description><![CDATA[Introduction  Internet Concepts and Design Principles Structure and Growth of the Internet Internet Programming with Sockets   Fundamental Concepts  Classification and Terminology Communication Channels and Transmission Media Media Access Control Transmission Error Detection Sequence Numbers, Acknowledgements, Timer Flow Control and Congestion Control Layering and the OSI Reference Model   Local Area Networks  Local Area Networks Overview Ethernet Bridges Virtual LAN Port Access Control Wireless LAN   Internet Network Layer  Concepts and Terminology IPv6 IPv4   Internet Routing  Distance Vector Routing (RIP) Link State Routing (OSPF) Path Vector Policy Routing (BGP)   Internet Transport Layer (UDP, TCP)  Transport Layer Overview UDP TCP   Firewalls and Network Address Translators  Middleboxes Firewalls Network Address Translators   Domain Name System (DNS)  Overview and features Resource Records Message Formats Security and Dynamic Updates Creative Usage   Augmented Backus Naur Form (ABNF)  Basics, Rule Names, Terminal Symbols Operators   Electronic Mail (SMTP, IMAP)  Components and Terminology Simple Mail Transfer Protocol (SMTP) Multipurpose Internet Mail Extensions (MIME) Internet Message Access Protocol (IMAP) Filtering of Messages (SIEVE)   HyperText Transfer Protocol (HTTP)  URLs, URNs, URIs, IRIs HTTP 1.]]></description>
</item><item>
    <title>Software Engineering Notes</title>
    <link>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</link>
    <pubDate>Thu, 21 May 2020 00:00:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</guid>
    <description><![CDATA[Introduction  Intro Socio-Technical Systems   The Software Lifecycle  Software Lifecycle Requirements Engineering UML Design Patterns Compiling and Linking Defensive Programming Configuration, Version, and Release Management Software Testing   Web and Other Applications  Application Architectures GUI Technology Web-Enabled Information Systems UI Design Web Design   Project and Process Management  Project Management Software Process Models   Security  Introduction This is the course notes for Software Engineering at Jacobs University Bremen.]]></description>
</item><item>
    <title>Machine Learning Notes</title>
    <link>https://tillchen.com/posts/2020-05-01-Machine-Learning-Notes/</link>
    <pubDate>Fri, 01 May 2020 09:25:01 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-01-Machine-Learning-Notes/</guid>
    <description><![CDATA[Introduction  Types of Learning  Supervised learning Unsupervised learning Semi-supervised learning Reinforcement learning     Notations and Definitions  Statistical Decision Theory   Fundamental Algorithms  Linear Regression Logistic Regression Decision Tree Learning Support Vector Machine  Dealing With Noise  Dealing with Inherent Non-Linearity (Kernels)     k-Nearest Neighbors (kNN)   Anatomy of a Learning Algorithm  Building blocks Gradient Descent Particularities   Basic Practice  Feature Engineering  One-Hot Encoding (Categorical -&gt; Numerical) Binning (Bucketing) (Numerical -&gt; Categorical) Normalization Standardization (Z-score Normalization) Dealing with Missing Features   Learning Algorithm Selection Three Sets Underfitting and Overfitting Regularization  Shrinkage: Ridge Regression   Model Performance Assessment  Confusion Matrix Precision/Recall Accuracy Cost-Sensitive Accuracy Area under the ROC Curve (AUC)   Hyperparameter Tuning  Training Error Generalization/Test Error Validation Set Error Estimation Cross-Validation     Neural Networks and Deep Learning  Neural Networks  Multilayer Perceptron (Vanilla Neural Network) Feed-Forward Neural Network Architecture   Deep Learning  Convolutional Neural Network Recurrent Neural Network     Problems and Solutions  Basis Expansions  Regression with Gaussian Kernel   Kernel Regression Classification  Linear Discriminant Analysis   Ensemble Learning  Boosting and Bagging Random Forest     Unsupervised Learning  Density Estimation Clustering  K-Means   Dimensionality Reduction  Principal Component Analysis (PCA)     References  Introduction This post is about some basic machine learning concepts.]]></description>
</item><item>
    <title>Algorithms and Data Structures</title>
    <link>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</link>
    <pubDate>Fri, 10 Apr 2020 00:00:00 &#43;0200</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</guid>
    <description><![CDATA[Dynamic Programming Greedy Algorithms References  Dynamic Programming   The two key ingredients:
 optimal substructure: The optimal solution contains the optimal solutions to subproblems.  The subproblems need to be independent, which means the solution to one subproblem does not affect the solution to another subproblem.   overlapping subproblems    The other two steps:
 Reconstruct an optimal solution Memoization: When the subproblem is first encountered as the recursive algorithm unfolds, its solution is computed and then stored in the stable.]]></description>
</item></channel>
</rss>
