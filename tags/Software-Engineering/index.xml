<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering on Tianyao Chen</title>
    <link>https://tillchen.com/tags/Software-Engineering/</link>
    <description>Recent content in Software Engineering on Tianyao Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 May 2020 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://tillchen.com/tags/Software-Engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software Engineering Notes</title>
      <link>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#socio-technical-systems&#34;&gt;Socio-Technical Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-software-lifecycle&#34;&gt;The Software Lifecycle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#software-lifecycle&#34;&gt;Software Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requirements-engineering&#34;&gt;Requirements Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uml&#34;&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compiling-and-linking&#34;&gt;Compiling and Linking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#defensive-programming&#34;&gt;Defensive Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration-version-and-release-management&#34;&gt;Configuration, Version, and Release Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#software-testing&#34;&gt;Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-and-other-applications&#34;&gt;Web and Other Applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#application-architectures&#34;&gt;Application Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gui-technology&#34;&gt;GUI Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-enabled-information-systems&#34;&gt;Web-Enabled Information Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ui-design&#34;&gt;UI Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-design&#34;&gt;Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-design-patterns&#34;&gt;Web Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#project-and-process-management&#34;&gt;Project and Process Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security-and-ethics&#34;&gt;Security and Ethics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the course notes for Software Engineering at Jacobs University Bremen.&lt;/p&gt;
&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The code-and-fix cycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainability and reliability decrease continuously (entropy).&lt;/li&gt;
&lt;li&gt;If the programmer leaves, all know-how leaves.&lt;/li&gt;
&lt;li&gt;If the developer is not the user, we get frequent dissent about expectations vs implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Common problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complexity&lt;/li&gt;
&lt;li&gt;Integration requirements&lt;/li&gt;
&lt;li&gt;Quality requirements&lt;/li&gt;
&lt;li&gt;Flexibility requirements&lt;/li&gt;
&lt;li&gt;Portability and internationalization requirements&lt;/li&gt;
&lt;li&gt;Organizational requirements
&lt;ul&gt;
&lt;li&gt;Communication problems/ bad project management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software engineering is multi-person construction of multi-version software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software = programs + documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System engineering = hardware + software + process engineering&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good software delivers functionality and performance that is (MEDA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainable&lt;/li&gt;
&lt;li&gt;Efficient&lt;/li&gt;
&lt;li&gt;Dependable&lt;/li&gt;
&lt;li&gt;Acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;socio-technical-systems&#34;&gt;Socio-Technical Systems&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;System = software + hardware + people&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical = software + hardware&lt;/li&gt;
&lt;li&gt;Socio-technical = technical systems + operational processes &amp;amp; people&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Socio-technical system characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emergent properties&lt;/li&gt;
&lt;li&gt;Non-deterministic
&lt;ul&gt;
&lt;li&gt;Partially dependent on human operators + a time-varying environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex relationships with organizational objectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-software-lifecycle&#34;&gt;The Software Lifecycle&lt;/h2&gt;
&lt;h3 id=&#34;software-lifecycle&#34;&gt;Software Lifecycle&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Requirements Engineering&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;Verification &amp;amp; Testing&lt;/li&gt;
&lt;li&gt;Deployment &amp;amp; Maintenance&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;requirements-engineering&#34;&gt;Requirements Engineering&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Requirements engineering = services + constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types of requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User requirements - understandable by users (UML)&lt;/li&gt;
&lt;li&gt;System requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way of classification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional requirements&lt;/li&gt;
&lt;li&gt;Non-functional requirements - properties + constraints&lt;/li&gt;
&lt;li&gt;Domain requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;uml&#34;&gt;UML&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use case diagrams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use case = a chunk of functionality&lt;/li&gt;
&lt;li&gt;Actor = someone/something that interacts with the system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activity diagrams&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Represents the overall flow of control&lt;/li&gt;
&lt;li&gt;User-perceived actions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class diagrams: &lt;a href=&#34;https://creately.com/blog/diagrams/class-diagram-relationships/&#34;&gt;https://creately.com/blog/diagrams/class-diagram-relationships/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relationships:
&lt;ul&gt;
&lt;li&gt;Association - connection&lt;/li&gt;
&lt;li&gt;Aggregation - stronger: HAS-A&lt;/li&gt;
&lt;li&gt;Dependency - weaker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrow head means it&amp;rsquo;s traversable only this direction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequence diagrams: object interactions in a time sequence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actors + system components (unlike activity diagrams)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State transition diagrams: lifecycle of a given class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternative: DSLs (domain specific modelling languages)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better used for embedded systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;design-patterns&#34;&gt;Design Patterns&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pattern = description + essence of its solution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design pattern = re-using abstract knowledge; generic, reusable design templates for OOP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Singleton: ensure a class has only one instance and provide a global access point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observer: separate the display of object state from the object itself&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mediator: define an object that encapsulates how a set of objects interact&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facade: a unified interface to a set of interfaces in a subsystem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proxy: a surrogate or placeholder for another object to control access to it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter: let classes work together that could not otherwise because of incompatible interfaces&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composite: compose objects into tree structures to represent part-whole hierarchies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creational&lt;/li&gt;
&lt;li&gt;Structural&lt;/li&gt;
&lt;li&gt;Behavioral&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;compiling-and-linking&#34;&gt;Compiling and Linking&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;source + header files -&amp;gt; Preprocessor -&amp;gt; source -&amp;gt; compiler -&amp;gt; object code -&amp;gt; linker -&amp;gt; executable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preprocessor: textual substitution (with directives #)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object files contain code for a program fragment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name mangling (name decoration): compiler modifies names to make them unique&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linker generates one executable from several object and library files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strip:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, executables contain symbol tables which allows reverse engineering and makes the code files substantially larger.&lt;/li&gt;
&lt;li&gt;Strip executables before shipping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Library = archive file containing a collection of object files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object files are linked in completely, from library only what is actually needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;defensive-programming&#34;&gt;Defensive Programming&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defensive programming intends to ensure the continuing function of the software despite the unforeseeable usage. - Defend against errors (avoid bugs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invariants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loop invariants&lt;/li&gt;
&lt;li&gt;Class invariants: true before and after each method call&lt;/li&gt;
&lt;li&gt;Method invariants: meet the pre and post conditions - part of design-by-contract (methods are contracts with the user)&lt;/li&gt;
&lt;li&gt;Ways of enforcing invariants
&lt;ul&gt;
&lt;li&gt;Assertions&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Return codes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structured programming: only use a small set of programming constructs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good: sequence, condition, repetition&lt;/li&gt;
&lt;li&gt;Bad: goto, break, continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code guide = uniform style + best practice&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;configuration-version-and-release-management&#34;&gt;Configuration, Version, and Release Management&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Software configuration management (SCM) is the discipline of controlling the evolution of software systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Three classic problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The double maintenance problem&lt;/li&gt;
&lt;li&gt;The shared data problem&lt;/li&gt;
&lt;li&gt;The simultaneous update problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A delta is a difference between two revisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Terminology:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release: a version that&amp;rsquo;s available to user/client&lt;/li&gt;
&lt;li&gt;Configuration: combination of components into a system according to case-specific criteria&lt;/li&gt;
&lt;li&gt;Baseline: a static reference point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composition model = set of objects &amp;ndash; module oriented&lt;/li&gt;
&lt;li&gt;Change set model = bundle of changes &amp;ndash; dynamic&lt;/li&gt;
&lt;li&gt;Long transaction model = all changes all isolated into transactions &amp;ndash; collaborative&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;software-testing&#34;&gt;Software Testing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Software testing: find errors before delivering to the end user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit testing: (code)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test driver = dummy environment&lt;/li&gt;
&lt;li&gt;Test stub = dummy methods&lt;/li&gt;
&lt;li&gt;Equivalence class testing: build equivalence classes and test one candidate per class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration testing: (design)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test interactions among units (e.g. type compatibility)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System testing: (requirements)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine whether system meets requirements&lt;/li&gt;
&lt;li&gt;Focus on use &amp;amp; interaction&lt;/li&gt;
&lt;li&gt;Alpha &amp;amp; Beta testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceptance testing: (users&amp;rsquo; need)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get approval from customers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static testing - without executing the software
&lt;ul&gt;
&lt;li&gt;Static analysis = control flow + data flow analysis&lt;/li&gt;
&lt;li&gt;Formal verification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic testing - with executing the software
&lt;ul&gt;
&lt;li&gt;Black-box testing: spec based&lt;/li&gt;
&lt;li&gt;White-box testing: look inside to check all statements &amp;amp; conditions have been executed at least once&lt;/li&gt;
&lt;li&gt;Coverage analysis: measures how much of the code has been exercised
&lt;ul&gt;
&lt;li&gt;Statement vs decision vs path coverage&lt;/li&gt;
&lt;li&gt;Independent paths V(G) = number of simple decisions + 1 or number of enclosed areas + 1&lt;/li&gt;
&lt;li&gt;C0 = every instruction; C1 = every branch; C2, C3 - every condition once true once false; C4 path coverage; Rule of thumb: 95% C0, 70% C1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory leaks:
&lt;ul&gt;
&lt;li&gt;Stack: automatic management&lt;/li&gt;
&lt;li&gt;Heap: explicit allocation and deallocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance profiling: benchmark execution to understand where time is being spent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regression testing: run tests and compare the output to same tests on the previous code version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web-and-other-applications&#34;&gt;Web and Other Applications&lt;/h2&gt;
&lt;h3 id=&#34;application-architectures&#34;&gt;Application Architectures&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Application Types
&lt;ul&gt;
&lt;li&gt;Data processing&lt;/li&gt;
&lt;li&gt;Transaction processing&lt;/li&gt;
&lt;li&gt;Event processing&lt;/li&gt;
&lt;li&gt;Language processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gui-technology&#34;&gt;GUI Technology&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sequential programs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modern GUI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Event-driven: the program waits on the user instead of the other way around
&lt;ul&gt;
&lt;li&gt;All events go to a single event queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Widgets (window gadget): reusable interactive object
&lt;ul&gt;
&lt;li&gt;Handle events&lt;/li&gt;
&lt;li&gt;Update appearance&lt;/li&gt;
&lt;li&gt;Generate new events&lt;/li&gt;
&lt;li&gt;Send to listeners (custom code)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactor Tree: decompose interactive objects into a tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model-View-Controller:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model = information the app is manipulating (representation of real world objects)&lt;/li&gt;
&lt;li&gt;View = a visual representation of the model
&lt;ul&gt;
&lt;li&gt;View will be notified if there are changes for the model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Controller:
&lt;ul&gt;
&lt;li&gt;Receives input events&lt;/li&gt;
&lt;li&gt;Decides what to do
&lt;ul&gt;
&lt;li&gt;Communicates with the view to select the objects&lt;/li&gt;
&lt;li&gt;Calls model methods to make changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why?
&lt;ul&gt;
&lt;li&gt;Combining MVC into one class will not scale&lt;/li&gt;
&lt;li&gt;Separation eases maintenance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web-enabled-information-systems&#34;&gt;Web-Enabled Information Systems&lt;/h3&gt;
&lt;h3 id=&#34;ui-design&#34;&gt;UI Design&lt;/h3&gt;
&lt;h3 id=&#34;web-design&#34;&gt;Web Design&lt;/h3&gt;
&lt;h3 id=&#34;web-design-patterns&#34;&gt;Web Design Patterns&lt;/h3&gt;
&lt;h2 id=&#34;project-and-process-management&#34;&gt;Project and Process Management&lt;/h2&gt;
&lt;h2 id=&#34;security-and-ethics&#34;&gt;Security and Ethics&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://tillchen.com/posts/2020-03-29-Design-Patterns/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0100</pubDate>
      
      <guid>https://tillchen.com/posts/2020-03-29-Design-Patterns/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#principles&#34;&gt;Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-strategy-pattern&#34;&gt;The Strategy Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-observer-pattern&#34;&gt;The Observer Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-decorator-pattern&#34;&gt;The Decorator Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-factory-pattern&#34;&gt;The Factory Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-singleton-pattern&#34;&gt;The Singleton Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-command-pattern&#34;&gt;The Command Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-adapter-pattern&#34;&gt;The Adapter Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-facade-pattern&#34;&gt;The Facade Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-template-method-pattern&#34;&gt;The Template Method Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-state-pattern&#34;&gt;The State Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-proxy-pattern&#34;&gt;The Proxy Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#model-view-controller&#34;&gt;Model-View-Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-pattern-categories&#34;&gt;Design Pattern Categories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Identify the varying parts and separate them from the invariant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program to an interface (supertype), not an implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Animal animal &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Dog&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
animal&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;makeSound&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
List&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Favor composition over inheritance. HAS-A can be better than IS-A.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single responsibility: a class should have only one reason to change.&lt;/li&gt;
&lt;li&gt;Open-closed: classes should be open for extension, but closed for modification.&lt;/li&gt;
&lt;li&gt;Liskov Substitution: objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program&lt;/li&gt;
&lt;li&gt;Interface Segregation: many client-specific interfaces are better than one general-purpose interface.&lt;/li&gt;
&lt;li&gt;Dependency inversion: depend upon abstractions. Do not depend upon concrete classes. High-level components should not depend on low-level components; rather, they should both depend on abstractions.
&lt;ul&gt;
&lt;li&gt;No variables should hold a reference to a concrete class.&lt;/li&gt;
&lt;li&gt;No class should derive from a concrete class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loose coupling: minimize the interdependency between objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design by contract: preconditions, postconditions, and invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principle of Least Knowledge aka (Law of Demeter): talk only to your immediate friends.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hollywood Principle (aka. Inversion of Control): (High-level components) Don&amp;rsquo;t call us, we&amp;rsquo;ll call you (low-level components).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A form of IoC:  Dependency injection - a technique in which an object receives other objects that it depends on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell-Don&amp;rsquo;t-Ask: A-&amp;gt;B  instead of B-&amp;gt;A-&amp;gt;B for data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build end-to-end (incrementally) instead of top-down nor bottom-up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a Test-driven development (TDD), there&amp;rsquo;s no need to do a big design up front.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s no need to prefix &lt;code&gt;m_&lt;/code&gt; for private stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We shouldn&amp;rsquo;t &lt;em&gt;always&lt;/em&gt; use patterns in today&amp;rsquo;s agile and XP trends. But if our specific solution is similar to a pattern, refactor it to make it more generic if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-strategy-pattern&#34;&gt;The Strategy Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The strategy pattern enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-observer-pattern&#34;&gt;The Observer Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Publishers (Subject) + Subscribers (Observers) = Observer Pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It defines a one-to-many dependency. When the subject changes, all dependents are notified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Java, we can use the built-in Observable - Observer superclasses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// extends Observable
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;setChanged&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
notifyObservers&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// extends Observer
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// in the constructor
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;observable&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;addObserver&lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Java, Observable is a class, which means we have to subclass it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/observer.png&#34; alt=&#34;Observer&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/observer_example.png&#34; alt=&#34;Observer example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loose coupling.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-decorator-pattern&#34;&gt;The Decorator Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Decorators have the same supertype as the object they decorate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use one or more decorators to wrap (HAS-A) an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The decorator pattern attaches additional responsibilities to an object dynamically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/decorator.png&#34; alt=&#34;Decorator&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/decorator_example.png&#34; alt=&#34;Decorator example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;java.io&lt;/code&gt; is mainly using the decorator pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-factory-pattern&#34;&gt;The Factory Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The factory method pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/factory.png&#34; alt=&#34;Factory&#34;&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;img src=&#34;https://tillchen.com/images/factory_example.png&#34; alt=&#34;Factory example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency inversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-singleton-pattern&#34;&gt;The Singleton Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The singleton pattern restricts the instantiation of a class to one single instance, and provides a global point of access to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Singleton&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; Singleton uniqueInstance&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Singleton&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// PRIVATE constructor
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#268bd2&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;synchronized&lt;/span&gt; Singleton &lt;span style=&#34;color:#268bd2&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;// remove synchronized if there&amp;#39;s no multithreading
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;uniqueInstance &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
            uniqueInstance &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Singleton&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; uniqueInstance&lt;span style=&#34;color:#719e07&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-command-pattern&#34;&gt;The Command Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The command pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests and support undoable operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/command.png&#34; alt=&#34;Command&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-adapter-pattern&#34;&gt;The Adapter Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The adapter pattern converts the interface of a class into another interface the clients expect. It lets classes work together that couldn&amp;rsquo;t otherwise because of incompatible interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/adapter1.png&#34; alt=&#34;Adapter1&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://tillchen.com/images/adapter2.png&#34; alt=&#34;Adapter2&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-facade-pattern&#34;&gt;The Facade Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The facade pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Least knowledge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-template-method-pattern&#34;&gt;The Template Method Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The template method pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm&amp;rsquo;s structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;AbstractClass&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#268bd2&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;templateMethod&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        primitiveOperation1&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        primitiveOperation2&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
        concreteOperation&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;primitiveOperation1&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#268bd2&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;primitiveOperation2&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;concreteOperation&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#586e75&#34;&gt;// implementation here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Used principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inversion of control.&lt;/li&gt;
&lt;li&gt;Single responsibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-state-pattern&#34;&gt;The State Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The state pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s close to the concept of finite-state machines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-proxy-pattern&#34;&gt;The Proxy Pattern&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A remote proxy acts as a local representative to a remote object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java RMI&amp;rsquo;s (remote method invocation) client helper is a &amp;ldquo;stub&amp;rdquo; and the service helper is a &amp;ldquo;skeleton&amp;rdquo;. The stub is the proxy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The proxy pattern provides a surrogate or placeholder for another object to access it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;model-view-controller&#34;&gt;Model-View-Controller&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The MVC is using:
&lt;ul&gt;
&lt;li&gt;the strategy pattern: the view delegates to the controllers to handle user actions. (Swappable controllers.)&lt;/li&gt;
&lt;li&gt;the composite pattern: the view is a composite of GUI components.&lt;/li&gt;
&lt;li&gt;the observer pattern: the model is the observable, and the view &amp;amp; controller are observers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;design-pattern-categories&#34;&gt;Design Pattern Categories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creational: Factory, Singleton&lt;/li&gt;
&lt;li&gt;Behavioral (how classes communicate): State, Iterator, Command&lt;/li&gt;
&lt;li&gt;Structural: Adapter, Composite, Decorator, Facade, Proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly-dp-0596007124/dp/0596007124/ref=mt_paperback?_encoding=UTF8&amp;amp;me=&amp;amp;qid=1585509064&#34;&gt;Head First Design Patterns: A Brain-Friendly Guide 1st Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=2ahUKEwjp6c22-JLpAhWO-qQKHQ_GBQoQFjAAegQIARAB&amp;amp;url=https%3A%2F%2Fwww.goodreads.com%2Fbook%2Fshow%2F4099.The_Pragmatic_Programmer&amp;amp;usg=AOvVaw0I5l-Ojbr1FUIYyreWhRyx&#34;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/3735293-clean-code&#34;&gt;Clean Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/23215733-the-software-craftsman?ac=1&amp;amp;from_search=true&amp;amp;qid=aFF78JXQaM&amp;amp;rank=2#&#34;&gt;The Software Craftsman: Professionalism, Pragmatism, Pride&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
