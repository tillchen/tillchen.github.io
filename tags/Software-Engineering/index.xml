<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Software Engineering - Tag - Tianyao Chen</title>
        <link>https://tillchen.com/tags/Software-Engineering/</link>
        <description>Software Engineering - Tag - Tianyao Chen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tillchen417@gmail.com (Tianyao Chen)</managingEditor>
            <webMaster>tillchen417@gmail.com (Tianyao Chen)</webMaster><lastBuildDate>Sun, 29 Mar 2020 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://tillchen.com/tags/Software-Engineering/" rel="self" type="application/rss+xml" /><item>
    <title>Design Patterns</title>
    <link>https://tillchen.com/posts/2020-03-29-Design-Patterns/</link>
    <pubDate>Sun, 29 Mar 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-03-29-Design-Patterns/</guid>
    <description><![CDATA[Principles The Strategy Pattern The Observer Pattern The Decorator Pattern The Factory Pattern The Singleton Pattern The Command Pattern The Adapter Pattern The Facade Pattern The Template Method Pattern The State Pattern The Proxy Pattern Model-View-Controller Design Pattern Categories References  Principles   Identify the varying parts and separate them from the invariant.
  Program to an interface (supertype), not an implementation.
1 2 3  Animal animal = new Dog(); animal.]]></description>
</item></channel>
</rss>
