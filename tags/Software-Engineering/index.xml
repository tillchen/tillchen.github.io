<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Software Engineering - Tag - Tianyao (Till) Chen</title>
        <link>https://tillchen.com/tags/Software-Engineering/</link>
        <description>Software Engineering - Tag - Tianyao (Till) Chen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>tillchen417@gmail.com (Tianyao (Till) Chen)</managingEditor>
            <webMaster>tillchen417@gmail.com (Tianyao (Till) Chen)</webMaster><lastBuildDate>Thu, 21 May 2020 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://tillchen.com/tags/Software-Engineering/" rel="self" type="application/rss+xml" /><item>
    <title>Software Engineering Notes</title>
    <link>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</link>
    <pubDate>Thu, 21 May 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-05-21-Software-Engineering-Notes/</guid>
    <description><![CDATA[Introduction  Intro Socio-Technical Systems   The Software Lifecycle  Software Lifecycle Requirements Engineering UML Design Patterns Compiling and Linking Defensive Programming Configuration, Version, and Release Management Software Testing   Web and Other Applications  Application Architectures GUI Technology Web-Enabled Information Systems UI Design Web Design   Project and Process Management  Project Management Software Process Models   Security  Introduction This is the course notes for Software Engineering at Jacobs University Bremen.]]></description>
</item><item>
    <title>Design Patterns</title>
    <link>https://tillchen.com/posts/2020-03-29-Design-Patterns/</link>
    <pubDate>Sun, 29 Mar 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://tillchen.com/posts/2020-03-29-Design-Patterns/</guid>
    <description><![CDATA[Principles The Strategy Pattern The Observer Pattern The Decorator Pattern The Factory Pattern The Singleton Pattern The Command Pattern The Adapter Pattern The Facade Pattern The Template Method Pattern The State Pattern The Proxy Pattern Model-View-Controller Design Pattern Categories References  Principles   Identify the varying parts and separate them from the invariant.
  Program to an interface (supertype), not an implementation.
1 2 3  Animal animal = new Dog(); animal.]]></description>
</item></channel>
</rss>
