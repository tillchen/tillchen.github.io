<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Science on Tianyao Chen</title>
    <link>https://tillchen.com/tags/Computer-Science/</link>
    <description>Recent content in Computer Science on Tianyao Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 May 2020 18:52:12 +0200</lastBuildDate>
    
	<atom:link href="https://tillchen.com/tags/Computer-Science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computer Networks Notes</title>
      <link>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</link>
      <pubDate>Fri, 22 May 2020 18:52:12 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-05-22-Computer-Networks-Notes/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#internet-concepts-and-design-principles&#34;&gt;Internet Concepts and Design Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#structure-and-growth-of-the-internet&#34;&gt;Structure and Growth of the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#internet-programming-with-sockets&#34;&gt;Internet Programming with Sockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fundamental-concepts&#34;&gt;Fundamental Concepts&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#classification-and-terminology&#34;&gt;Classification and Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#communication-channels-and-transmission-media&#34;&gt;Communication Channels and Transmission Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media-access-control&#34;&gt;Media Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transmission-error-detection&#34;&gt;Transmission Error Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sequence-numbers-acknowledgements-timer&#34;&gt;Sequence Numbers, Acknowledgements, Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flow-control-and-congestion-control&#34;&gt;Flow Control and Congestion Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#layering-and-the-osi-reference-model&#34;&gt;Layering and the OSI Reference Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is the course notes for Computer Networks at Jacobs University Bremen.&lt;/p&gt;
&lt;h3 id=&#34;internet-concepts-and-design-principles&#34;&gt;Internet Concepts and Design Principles&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Internet Addresses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leading nulls in IPv6 addresses can be omitted and two consecutive  colons can represent a sequence of nulls:
&lt;ul&gt;
&lt;li&gt;2001:00db8:0000:0000:0000:0000:0000:0001 can be written as 2001:db8::1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPv6 addresses have 16 bytes (4 x 8 groups); IPv4 addresses have 4 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autonomous Systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An AS is a set of routers and networks under the same administration.&lt;/li&gt;
&lt;li&gt;IP packets are forwarded between ASs by EGP (Exterior Gateway Protocol); within an AS, it&amp;rsquo;s IGP (Interior Gateway Protocol)&lt;/li&gt;
&lt;li&gt;The Internet is a collection os ASs. There&amp;rsquo;s no central authority.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;structure-and-growth-of-the-internet&#34;&gt;Structure and Growth of the Internet&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Internet Exchange Points (IXPs) are switching hubs where many Internet Service Providers (operating ASs) connect in order to exchange internet traffic.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;internet-programming-with-sockets&#34;&gt;Internet Programming with Sockets&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sockets are abstract communication endpoints with a rather small number of associated function calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection-less vs connection-oriented communication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection-oriented communication requires a establishment and a teardown. Most of the Internet traffic is using this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fundamental-concepts&#34;&gt;Fundamental Concepts&lt;/h2&gt;
&lt;h3 id=&#34;classification-and-terminology&#34;&gt;Classification and Terminology&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Communication modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicast - 1:1&lt;/li&gt;
&lt;li&gt;Multicast - 1:n&lt;/li&gt;
&lt;li&gt;Concast - n:1&lt;/li&gt;
&lt;li&gt;Multipeer - m:n&lt;/li&gt;
&lt;li&gt;Anycast - 1: nearest receiver&lt;/li&gt;
&lt;li&gt;Broadcast - 1: all&lt;/li&gt;
&lt;li&gt;Geocast - 1: n in a region&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communication protocols define the syntax and semantics of messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Circuit vs packet switching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Circuit switching: create and remove (virtual) circuit (e.g. the telephone network)&lt;/li&gt;
&lt;li&gt;Packet switching: data is carried in packets (e.g. Internet)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection-oriented vs connection-less:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection-oriented: stateful (e.g. fetching a Web page)&lt;/li&gt;
&lt;li&gt;Connection-less: stateless (e.g. Internet name lookups)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data vs. control vs. management plane:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data plane: forwarding of data (hardware)&lt;/li&gt;
&lt;li&gt;Control plane: telling the data plane how to forward data (routers and switches)&lt;/li&gt;
&lt;li&gt;Management plane: configuration and monitoring of data and control planes (may involve humans)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Star; Ring; Meshed Network; Bus; Line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;communication-channels-and-transmission-media&#34;&gt;Communication Channels and Transmission Media&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Signals are in general modified during transmission, leading to transmission errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data rate (bit rate) vs bit time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bit time is the time needed to transmit a single bit (1 microsecond for 1 Mbit/s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay is the time needed to transmit a message from the source to the sink. It consists of transmission delay and propagation delay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tillchen.com/images/transmission_propagation_delay.png&#34; alt=&#34;transmission vs propagation delay&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bit error rate is the probability of a bit being changed during transmission.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple wires can easily experience crosstalk caused by capacitive coupling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transmission impairments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attenuation&lt;/li&gt;
&lt;li&gt;Delay distortion (different frequencies arrive at different time)&lt;/li&gt;
&lt;li&gt;Noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;media-access-control&#34;&gt;Media Access Control&lt;/h3&gt;
&lt;h3 id=&#34;transmission-error-detection&#34;&gt;Transmission Error Detection&lt;/h3&gt;
&lt;h3 id=&#34;sequence-numbers-acknowledgements-timer&#34;&gt;Sequence Numbers, Acknowledgements, Timer&lt;/h3&gt;
&lt;h3 id=&#34;flow-control-and-congestion-control&#34;&gt;Flow Control and Congestion Control&lt;/h3&gt;
&lt;h3 id=&#34;layering-and-the-osi-reference-model&#34;&gt;Layering and the OSI Reference Model&lt;/h3&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cnds.jacobs-university.de/courses/cn-2019/&#34;&gt;https://cnds.jacobs-university.de/courses/cn-2019/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Algorithms and Data Structures</title>
      <link>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0200</pubDate>
      
      <guid>https://tillchen.com/posts/2020-4-10-Algorithms-and-Data-Structures/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic-programming&#34;&gt;Dynamic Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dynamic-programming&#34;&gt;Dynamic Programming&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The two key ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optimal substructure: The optimal solution contains the optimal solutions to subproblems.
&lt;ul&gt;
&lt;li&gt;The subproblems need to be independent, which means the solution to one subproblem does not affect the solution to another subproblem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;overlapping subproblems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reconstruct an optimal solution&lt;/li&gt;
&lt;li&gt;Memoization: When the subproblem is first encountered as the recursive algorithm unfolds, its solution is computed and then stored in the stable. Each subsequent time that we encounter this subproblem, we simply look up the value and return it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For many optimization problems, using dynamic programming is overkill. Even though there is almost always a more cumbersome dynamic-programming solution beneath every greedy algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A greedy algorithm always makes the choice that looks best at the moment. That is, it makes a locally optimal choice in the hope that this choice will lead to a globally optimal solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The two key ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;greedy-choice property: we can assemble a globally optimal solution by making locally optimal (greedy) choices.
&lt;ul&gt;
&lt;li&gt;Unlike dynamic programming, which solves the subproblems before making the first choice (bottom up), a greedy algorithm makes its first choice before solving any subproblems (top down.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optimal substructure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Introduction-Algorithms-Leiserson-published-Hardcover-dp-B008F1DKXU/dp/B008F1DKXU/ref=mt_paperback?_encoding=UTF8&amp;amp;me=&amp;amp;qid=1586534178&#34;&gt;Introduction to Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
